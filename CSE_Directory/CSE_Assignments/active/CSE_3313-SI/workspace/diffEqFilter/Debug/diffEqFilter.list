
diffEqFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08007a28  08007a28  00017a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08008010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          00000180  20000224  20000224  00020224  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  00020224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7e0  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc6  00000000  00000000  0002da34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc0  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c6e  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8c5  00000000  00000000  00052a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd038  00000000  00000000  0006035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d393  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000471c  00000000  00000000  0012d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a0c 	.word	0x08007a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08007a0c 	.word	0x08007a0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fe20 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f814 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f932 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8000f5c:	f000 f87a 	bl	8001054 <MX_TIM5_Init>
  MX_TIM7_Init();
 8000f60:	f000 f8ce 	bl	8001100 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 f902 	bl	800116c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <main+0x2c>)
 8000f6a:	f001 feb5 	bl	8002cd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <main+0x30>)
 8000f70:	f001 fe4a 	bl	8002c08 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0x28>
 8000f76:	bf00      	nop
 8000f78:	20000288 	.word	0x20000288
 8000f7c:	20000240 	.word	0x20000240

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	; 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 ffba 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <SystemClock_Config+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a27      	ldr	r2, [pc, #156]	; (800104c <SystemClock_Config+0xcc>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <SystemClock_Config+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <SystemClock_Config+0xd0>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ff4:	2332      	movs	r3, #50	; 0x32
 8000ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f917 	bl	8002238 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001010:	f000 fbc2 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2101      	movs	r1, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fb78 	bl	8002728 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800103e:	f000 fbab 	bl	8001798 <Error_Handler>
  }
}
 8001042:	bf00      	nop
 8001044:	3750      	adds	r7, #80	; 0x50
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_TIM5_Init+0xa8>)
 800107a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM5_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_TIM5_Init+0xa4>)
 800108a:	f04f 32ff 	mov.w	r2, #4294967295
 800108e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <MX_TIM5_Init+0xa4>)
 800109e:	f001 fe8b 	bl	8002db8 <HAL_TIM_OC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80010a8:	f000 fb76 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4619      	mov	r1, r3
 80010ba:	480f      	ldr	r0, [pc, #60]	; (80010f8 <MX_TIM5_Init+0xa4>)
 80010bc:	f002 faa8 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80010c6:	f000 fb67 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM5_Init+0xa4>)
 80010e2:	f001 ffc1 	bl	8003068 <HAL_TIM_OC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb54 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000240 	.word	0x20000240
 80010fc:	40000c00 	.word	0x40000c00

08001100 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM7_Init+0x64>)
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_TIM7_Init+0x68>)
 8001112:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_TIM7_Init+0x64>)
 8001116:	2209      	movs	r2, #9
 8001118:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_TIM7_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_TIM7_Init+0x64>)
 8001122:	f242 720f 	movw	r2, #9999	; 0x270f
 8001126:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_TIM7_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM7_Init+0x64>)
 8001130:	f001 fd1a 	bl	8002b68 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800113a:	f000 fb2d 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM7_Init+0x64>)
 800114c:	f002 fa60 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001156:	f000 fb1f 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000288 	.word	0x20000288
 8001168:	40001400 	.word	0x40001400

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f002 fac4 	bl	8003730 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 faf3 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002d0 	.word	0x200002d0
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	4ba6      	ldr	r3, [pc, #664]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4aa5      	ldr	r2, [pc, #660]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4ba3      	ldr	r3, [pc, #652]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	4b9f      	ldr	r3, [pc, #636]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a9e      	ldr	r2, [pc, #632]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b9c      	ldr	r3, [pc, #624]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b98      	ldr	r3, [pc, #608]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a97      	ldr	r2, [pc, #604]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b91      	ldr	r3, [pc, #580]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a90      	ldr	r2, [pc, #576]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b8e      	ldr	r3, [pc, #568]	; (8001474 <MX_GPIO_Init+0x2b4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b8a      	ldr	r3, [pc, #552]	; (8001474 <MX_GPIO_Init+0x2b4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a89      	ldr	r2, [pc, #548]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b87      	ldr	r3, [pc, #540]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b83      	ldr	r3, [pc, #524]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a82      	ldr	r2, [pc, #520]	; (8001474 <MX_GPIO_Init+0x2b4>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b80      	ldr	r3, [pc, #512]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	487d      	ldr	r0, [pc, #500]	; (8001478 <MX_GPIO_Init+0x2b8>)
 8001284:	f000 ffa6 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2101      	movs	r1, #1
 800128c:	487b      	ldr	r0, [pc, #492]	; (800147c <MX_GPIO_Init+0x2bc>)
 800128e:	f000 ffa1 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001292:	2200      	movs	r2, #0
 8001294:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001298:	4879      	ldr	r0, [pc, #484]	; (8001480 <MX_GPIO_Init+0x2c0>)
 800129a:	f000 ff9b 	bl	80021d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800129e:	2308      	movs	r3, #8
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4870      	ldr	r0, [pc, #448]	; (8001478 <MX_GPIO_Init+0x2b8>)
 80012b6:	f000 fdf1 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	486a      	ldr	r0, [pc, #424]	; (800147c <MX_GPIO_Init+0x2bc>)
 80012d2:	f000 fde3 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012d6:	2308      	movs	r3, #8
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e6:	2305      	movs	r3, #5
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4862      	ldr	r0, [pc, #392]	; (800147c <MX_GPIO_Init+0x2bc>)
 80012f2:	f000 fdd3 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	485e      	ldr	r0, [pc, #376]	; (8001484 <MX_GPIO_Init+0x2c4>)
 800130c:	f000 fdc6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001310:	2310      	movs	r3, #16
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001320:	2306      	movs	r3, #6
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4856      	ldr	r0, [pc, #344]	; (8001484 <MX_GPIO_Init+0x2c4>)
 800132c:	f000 fdb6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001330:	23e0      	movs	r3, #224	; 0xe0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001340:	2305      	movs	r3, #5
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	484e      	ldr	r0, [pc, #312]	; (8001484 <MX_GPIO_Init+0x2c4>)
 800134c:	f000 fda6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001350:	2304      	movs	r3, #4
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4849      	ldr	r0, [pc, #292]	; (8001488 <MX_GPIO_Init+0x2c8>)
 8001364:	f000 fd9a 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137a:	2305      	movs	r3, #5
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4840      	ldr	r0, [pc, #256]	; (8001488 <MX_GPIO_Init+0x2c8>)
 8001386:	f000 fd89 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800138a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800138e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4837      	ldr	r0, [pc, #220]	; (8001480 <MX_GPIO_Init+0x2c0>)
 80013a4:	f000 fd7a 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013a8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ba:	2306      	movs	r3, #6
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	482d      	ldr	r0, [pc, #180]	; (800147c <MX_GPIO_Init+0x2bc>)
 80013c6:	f000 fd69 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80013ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4829      	ldr	r0, [pc, #164]	; (8001484 <MX_GPIO_Init+0x2c4>)
 80013e0:	f000 fd5c 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80013e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013f6:	230a      	movs	r3, #10
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4820      	ldr	r0, [pc, #128]	; (8001484 <MX_GPIO_Init+0x2c4>)
 8001402:	f000 fd4b 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001406:	2320      	movs	r3, #32
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <MX_GPIO_Init+0x2c0>)
 800141a:	f000 fd3f 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800141e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001430:	2304      	movs	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_GPIO_Init+0x2c8>)
 800143c:	f000 fd2e 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001444:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <MX_GPIO_Init+0x2b8>)
 8001456:	f000 fd21 	bl	8001e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2006      	movs	r0, #6
 8001460:	f000 fce5 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001464:	2006      	movs	r0, #6
 8001466:	f000 fcfe 	bl	8001e66 <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40021000 	.word	0x40021000
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400

0800148c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001494:	1d39      	adds	r1, r7, #4
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	2201      	movs	r2, #1
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <__io_putchar+0x20>)
 800149e:	f002 f994 	bl	80037ca <HAL_UART_Transmit>

  return ch;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200002d0 	.word	0x200002d0

080014b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
	// Toggle Filtering on and off using user button
	if(filt==0)
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x1a>
	{

		filt = 1;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
	}else{

		filt = 0;
	}
	//HAL_Delay(1);
}
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_EXTI_Callback+0x20>
		filt = 0;
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000370 	.word	0x20000370

080014e0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a8b      	ldr	r2, [pc, #556]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f040 810a 	bne.w	8001706 <HAL_TIM_PeriodElapsedCallback+0x226>
		{
			clk[1] = TIM5->CNT;
 80014f2:	4b8a      	ldr	r3, [pc, #552]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b89      	ldr	r3, [pc, #548]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014fa:	605a      	str	r2, [r3, #4]
			dc = (clk[1] - clk[0]);
 80014fc:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4b87      	ldr	r3, [pc, #540]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	461a      	mov	r2, r3
 8001508:	4b86      	ldr	r3, [pc, #536]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800150a:	601a      	str	r2, [r3, #0]
			dt = (tim5_rate)*((float)dc);
 800150c:	4b85      	ldr	r3, [pc, #532]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001518:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
			fs = 1/dt;
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	4b7e      	ldr	r3, [pc, #504]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001538:	edc3 7a00 	vstr	s15, [r3]
			clk[0] = clk[1];
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a77      	ldr	r2, [pc, #476]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001542:	6013      	str	r3, [r2, #0]


			count = count + dt;
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	4b77      	ldr	r3, [pc, #476]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
			//for(int i = 0; i < N; i++){
			//	x[i+1] = x[i];
			//	y[i+1] = y[i];
			//}

			input = (sin(2*3.14159*fc*count));
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_f2d>
 8001564:	a36a      	add	r3, pc, #424	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f845 	bl	80005f8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7ff f836 	bl	80005f8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	ec43 2b17 	vmov	d7, r2, r3
 8001594:	eeb0 0a47 	vmov.f32	s0, s14
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	f005 f9ec 	bl	8006978 <sin>
 80015a0:	ec53 2b10 	vmov	r2, r3, d0
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fafe 	bl	8000ba8 <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a63      	ldr	r2, [pc, #396]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015b0:	6013      	str	r3, [r2, #0]
			noise_value = 1*(sin(2*3.14159*fn*count));
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffc6 	bl	8000548 <__aeabi_f2d>
 80015bc:	a354      	add	r3, pc, #336	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f819 	bl	80005f8 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4614      	mov	r4, r2
 80015cc:	461d      	mov	r5, r3
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7ff f80a 	bl	80005f8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	ec43 2b17 	vmov	d7, r2, r3
 80015ec:	eeb0 0a47 	vmov.f32	s0, s14
 80015f0:	eef0 0a67 	vmov.f32	s1, s15
 80015f4:	f005 f9c0 	bl	8006978 <sin>
 80015f8:	ec53 2b10 	vmov	r2, r3, d0
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fad2 	bl	8000ba8 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001608:	6013      	str	r3, [r2, #0]
			input = input + noise_value;
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	4b48      	ldr	r3, [pc, #288]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800161c:	edc3 7a00 	vstr	s15, [r3]

			//Different Equation Implementation
			if(filt==0)
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d132      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x1ae>
			{

				for(int i = N; i > 0; i--){
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e018      	b.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x182>
					x[i] = x[i-1];
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3b01      	subs	r3, #1
 8001634:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4944      	ldr	r1, [pc, #272]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	601a      	str	r2, [r3, #0]
					y[i] = y[i-1];
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3b01      	subs	r3, #1
 800164a:	4a42      	ldr	r2, [pc, #264]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4940      	ldr	r1, [pc, #256]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	601a      	str	r2, [r3, #0]
				for(int i = N; i > 0; i--){
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dce3      	bgt.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x150>
				}

				x[0] = input;
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a38      	ldr	r2, [pc, #224]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800166e:	6013      	str	r3, [r2, #0]
				y[0] = IIRFilter(B, A, x, y, N);
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800167a:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800167c:	4837      	ldr	r0, [pc, #220]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800167e:	f000 f877 	bl	8001770 <IIRFilter>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
 800168c:	e031      	b.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x212>
				//out = y[0];
			}else{
				for(int i = N2; i > 0; i--){
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e018      	b.n	80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
					x[i] = x[i-1];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3b01      	subs	r3, #1
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	492b      	ldr	r1, [pc, #172]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	601a      	str	r2, [r3, #0]
					y[i] = y[i-1];
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4926      	ldr	r1, [pc, #152]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	601a      	str	r2, [r3, #0]
				for(int i = N2; i > 0; i--){
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dce3      	bgt.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x1b6>
				}

				x[0] = input;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016d4:	6013      	str	r3, [r2, #0]
				y[0] = IIRFilter(B2, A2, x, y, N2);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016e0:	4920      	ldr	r1, [pc, #128]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e2:	4821      	ldr	r0, [pc, #132]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016e4:	f000 f844 	bl	8001770 <IIRFilter>
 80016e8:	eef0 7a40 	vmov.f32	s15, s0
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
				//out = y[0];
			}

			// Print y[n] to USART (to MATLAB)
			printf("%0.2f\r\n", y[0]);
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001702:	f003 f873 	bl	80047ec <iprintf>

	//Print values to help with Debug
//	printf("%0.5f: %0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\r\n", count, y[0], y[1], y[2], x[0], x[1], x[2]);


}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	f01b866e 	.word	0xf01b866e
 8001714:	401921f9 	.word	0x401921f9
 8001718:	20000288 	.word	0x20000288
 800171c:	40000c00 	.word	0x40000c00
 8001720:	20000374 	.word	0x20000374
 8001724:	2000037c 	.word	0x2000037c
 8001728:	20000008 	.word	0x20000008
 800172c:	20000380 	.word	0x20000380
 8001730:	20000384 	.word	0x20000384
 8001734:	20000318 	.word	0x20000318
 8001738:	20000000 	.word	0x20000000
 800173c:	2000036c 	.word	0x2000036c
 8001740:	20000004 	.word	0x20000004
 8001744:	20000314 	.word	0x20000314
 8001748:	20000370 	.word	0x20000370
 800174c:	20000388 	.word	0x20000388
 8001750:	20000344 	.word	0x20000344
 8001754:	2000031c 	.word	0x2000031c
 8001758:	2000000c 	.word	0x2000000c
 800175c:	20000010 	.word	0x20000010
 8001760:	20000044 	.word	0x20000044
 8001764:	20000014 	.word	0x20000014
 8001768:	2000002c 	.word	0x2000002c
 800176c:	08007a28 	.word	0x08007a28

08001770 <IIRFilter>:

float IIRFilter(float Bf[], float Af[], float ins[], float outs[], uint32_t Nf)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
	//Replace this with your difference equation code
	float fout = ins[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	617b      	str	r3, [r7, #20]
	//Replace this with your difference equation code

	return fout;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	ee07 3a90 	vmov	s15, r3
}
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f000 fb18 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_TIM_OC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10d      	bne.n	8001822 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_TIM_OC_MspInit+0x40>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_TIM_OC_MspInit+0x40>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_TIM_OC_MspInit+0x40>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40000c00 	.word	0x40000c00
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d115      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_TIM_Base_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_TIM_Base_MspInit+0x4c>)
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2037      	movs	r0, #55	; 0x37
 800186c:	f000 fadf 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001870:	2037      	movs	r0, #55	; 0x37
 8001872:	f000 faf8 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40001400 	.word	0x40001400
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_UART_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e2:	230c      	movs	r3, #12
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x8c>)
 80018fe:	f000 facd 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004400 	.word	0x40004400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f968 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 fc49 	bl	8002208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <TIM7_IRQHandler+0x10>)
 8001982:	f001 fa68 	bl	8002e56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000288 	.word	0x20000288

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019aa:	f002 fa83 	bl	8003eb4 <__errno>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2216      	movs	r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
	return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_exit>:

void _exit (int status)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffe7 	bl	80019a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019d2:	e7fe      	b.n	80019d2 <_exit+0x12>

080019d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e00a      	b.n	80019fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019e6:	f3af 8000 	nop.w
 80019ea:	4601      	mov	r1, r0
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf0      	blt.n	80019e6 <_read+0x12>
	}

return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e009      	b.n	8001a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fd2f 	bl	800148c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf1      	blt.n	8001a20 <_write+0x12>
	}
	return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_close>:

int _close(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f002 f9e8 	bl	8003eb4 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20020000 	.word	0x20020000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	2000038c 	.word	0x2000038c
 8001b18:	200003a8 	.word	0x200003a8

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b46:	490e      	ldr	r1, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b5c:	4c0b      	ldr	r4, [pc, #44]	; (8001b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6a:	f7ff ffd7 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f002 f9a7 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff f9eb 	bl	8000f4c <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001b84:	08008010 	.word	0x08008010
  ldr r2, =_sbss
 8001b88:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8001b8c:	200003a4 	.word	0x200003a4

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f92b 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fdec 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f943 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f90b 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000048 	.word	0x20000048
 8001c30:	20000050 	.word	0x20000050
 8001c34:	2000004c 	.word	0x2000004c

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000050 	.word	0x20000050
 8001c5c:	20000390 	.word	0x20000390

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000390 	.word	0x20000390

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff29 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff3e 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff31 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e16b      	b.n	8002190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 815a 	bne.w	800218a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80b4 	beq.w	800218a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b60      	ldr	r3, [pc, #384]	; (80021a8 <HAL_GPIO_Init+0x30c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a5f      	ldr	r2, [pc, #380]	; (80021a8 <HAL_GPIO_Init+0x30c>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <HAL_GPIO_Init+0x30c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a5b      	ldr	r2, [pc, #364]	; (80021ac <HAL_GPIO_Init+0x310>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x21a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <HAL_GPIO_Init+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_GPIO_Init+0x328>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x212>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4c      	ldr	r2, [pc, #304]	; (80021c8 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x20e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x20a>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00e      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020a6:	2308      	movs	r3, #8
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_GPIO_Init+0x310>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_GPIO_Init+0x334>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a32      	ldr	r2, [pc, #200]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_GPIO_Init+0x334>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_GPIO_Init+0x334>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f ae90 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021800 	.word	0x40021800
 80021cc:	40021c00 	.word	0x40021c00
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f942 	bl	80014b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40013c00 	.word	0x40013c00

08002238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e267      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d075      	beq.n	8002342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002256:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b04      	cmp	r3, #4
 8002260:	d00c      	beq.n	800227c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b85      	ldr	r3, [pc, #532]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800226a:	2b08      	cmp	r3, #8
 800226c:	d112      	bne.n	8002294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4b7e      	ldr	r3, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d05b      	beq.n	8002340 <HAL_RCC_OscConfig+0x108>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d157      	bne.n	8002340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e242      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x74>
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xb0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x98>
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xb0>
 80022d0:	4b69      	ldr	r3, [pc, #420]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a68      	ldr	r2, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a65      	ldr	r2, [pc, #404]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fcb6 	bl	8001c60 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fcb2 	bl	8001c60 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e207      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xc0>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7ff fca2 	bl	8001c60 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7ff fc9e 	bl	8001c60 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1f3      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0xe8>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d063      	beq.n	8002416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002362:	2b08      	cmp	r3, #8
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x152>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1c7      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4937      	ldr	r1, [pc, #220]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	e03a      	b.n	8002416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x244>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff fc57 	bl	8001c60 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b6:	f7ff fc53 	bl	8001c60 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1a8      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4925      	ldr	r1, [pc, #148]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x244>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff fc36 	bl	8001c60 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f8:	f7ff fc32 	bl	8001c60 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e187      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d036      	beq.n	8002490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCC_OscConfig+0x248>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7ff fc16 	bl	8001c60 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002438:	f7ff fc12 	bl	8001c60 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e167      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x240>)
 800244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x200>
 8002456:	e01b      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_OscConfig+0x248>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7ff fbff 	bl	8001c60 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	e00e      	b.n	8002484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002466:	f7ff fbfb 	bl	8001c60 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d907      	bls.n	8002484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e150      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
 8002478:	40023800 	.word	0x40023800
 800247c:	42470000 	.word	0x42470000
 8002480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ea      	bne.n	8002466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8097 	beq.w	80025cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	4b7d      	ldr	r3, [pc, #500]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a7c      	ldr	r2, [pc, #496]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b7a      	ldr	r3, [pc, #488]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b77      	ldr	r3, [pc, #476]	; (80026ac <HAL_RCC_OscConfig+0x474>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b74      	ldr	r3, [pc, #464]	; (80026ac <HAL_RCC_OscConfig+0x474>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a73      	ldr	r2, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x474>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7ff fbbb 	bl	8001c60 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7ff fbb7 	bl	8001c60 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e10c      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x474>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x2ea>
 8002514:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x324>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x30c>
 800252a:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5b      	ldr	r2, [pc, #364]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0x324>
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d015      	beq.n	8002590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7ff fb7c 	bl	8001c60 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7ff fb78 	bl	8001c60 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e0cb      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ee      	beq.n	800256c <HAL_RCC_OscConfig+0x334>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7ff fb66 	bl	8001c60 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7ff fb62 	bl	8001c60 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0b5      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ae:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ee      	bne.n	8002598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80a1 	beq.w	8002718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d6:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d05c      	beq.n	800269c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d141      	bne.n	800266e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_RCC_OscConfig+0x478>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fb36 	bl	8001c60 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7ff fb32 	bl	8001c60 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e087      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	491b      	ldr	r1, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x478>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7ff fb0b 	bl	8001c60 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7ff fb07 	bl	8001c60 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e05c      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x416>
 800266c:	e054      	b.n	8002718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCC_OscConfig+0x478>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff faf4 	bl	8001c60 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff faf0 	bl	8001c60 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e045      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_OscConfig+0x470>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x444>
 800269a:	e03d      	b.n	8002718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e038      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000
 80026b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x4ec>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d028      	beq.n	8002714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d121      	bne.n	8002714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d11a      	bne.n	8002714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e4:	4013      	ands	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d111      	bne.n	8002714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	3b01      	subs	r3, #1
 80026fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0cc      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d90c      	bls.n	8002764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d044      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d119      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e067      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4934      	ldr	r1, [pc, #208]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7ff fa22 	bl	8001c60 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7ff fa1e 	bl	8001c60 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e04f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d20c      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f982 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08007a30 	.word	0x08007a30
 80028ec:	20000048 	.word	0x20000048
 80028f0:	2000004c 	.word	0x2000004c

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f8:	b094      	sub	sp, #80	; 0x50
 80028fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	2300      	movs	r3, #0
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002904:	2300      	movs	r3, #0
 8002906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d00d      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x40>
 8002918:	2b08      	cmp	r3, #8
 800291a:	f200 80e1 	bhi.w	8002ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x34>
 8002922:	2b04      	cmp	r3, #4
 8002924:	d003      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x3a>
 8002926:	e0db      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800292c:	e0db      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <HAL_RCC_GetSysClockFreq+0x208>)
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002932:	e0d8      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293e:	4b6d      	ldr	r3, [pc, #436]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d063      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	2200      	movs	r2, #0
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
 8002954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
 800295e:	2300      	movs	r3, #0
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
 8002962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002966:	4622      	mov	r2, r4
 8002968:	462b      	mov	r3, r5
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	0159      	lsls	r1, r3, #5
 8002974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002978:	0150      	lsls	r0, r2, #5
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4621      	mov	r1, r4
 8002980:	1a51      	subs	r1, r2, r1
 8002982:	6139      	str	r1, [r7, #16]
 8002984:	4629      	mov	r1, r5
 8002986:	eb63 0301 	sbc.w	r3, r3, r1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002998:	4659      	mov	r1, fp
 800299a:	018b      	lsls	r3, r1, #6
 800299c:	4651      	mov	r1, sl
 800299e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029a2:	4651      	mov	r1, sl
 80029a4:	018a      	lsls	r2, r1, #6
 80029a6:	4651      	mov	r1, sl
 80029a8:	ebb2 0801 	subs.w	r8, r2, r1
 80029ac:	4659      	mov	r1, fp
 80029ae:	eb63 0901 	sbc.w	r9, r3, r1
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c6:	4690      	mov	r8, r2
 80029c8:	4699      	mov	r9, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	eb18 0303 	adds.w	r3, r8, r3
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	462b      	mov	r3, r5
 80029d4:	eb49 0303 	adc.w	r3, r9, r3
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029e6:	4629      	mov	r1, r5
 80029e8:	024b      	lsls	r3, r1, #9
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029f0:	4621      	mov	r1, r4
 80029f2:	024a      	lsls	r2, r1, #9
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a04:	f7fe f920 	bl	8000c48 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a10:	e058      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	f04f 0000 	mov.w	r0, #0
 8002a34:	f04f 0100 	mov.w	r1, #0
 8002a38:	0159      	lsls	r1, r3, #5
 8002a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3e:	0150      	lsls	r0, r2, #5
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4641      	mov	r1, r8
 8002a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a64:	ebb2 040a 	subs.w	r4, r2, sl
 8002a68:	eb63 050b 	sbc.w	r5, r3, fp
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	00eb      	lsls	r3, r5, #3
 8002a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a7a:	00e2      	lsls	r2, r4, #3
 8002a7c:	4614      	mov	r4, r2
 8002a7e:	461d      	mov	r5, r3
 8002a80:	4643      	mov	r3, r8
 8002a82:	18e3      	adds	r3, r4, r3
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	464b      	mov	r3, r9
 8002a88:	eb45 0303 	adc.w	r3, r5, r3
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	028b      	lsls	r3, r1, #10
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	028a      	lsls	r2, r1, #10
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	61fa      	str	r2, [r7, #28]
 8002ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab8:	f7fe f8c6 	bl	8000c48 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ade:	e002      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3750      	adds	r7, #80	; 0x50
 8002aec:	46bd      	mov	sp, r7
 8002aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	007a1200 	.word	0x007a1200

08002b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000048 	.word	0x20000048

08002b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b1c:	f7ff fff0 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0a9b      	lsrs	r3, r3, #10
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4903      	ldr	r1, [pc, #12]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08007a40 	.word	0x08007a40

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b44:	f7ff ffdc 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0b5b      	lsrs	r3, r3, #13
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	08007a40 	.word	0x08007a40

08002b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e041      	b.n	8002bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fe52 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 fae2 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e046      	b.n	8002cae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_TIM_Base_Start+0xb4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d022      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d01d      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_TIM_Base_Start+0xb8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d018      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_TIM_Base_Start+0xbc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_TIM_Base_Start+0xc0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00e      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_TIM_Base_Start+0xc4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_TIM_Base_Start+0xc8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_TIM_Base_Start+0x70>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_TIM_Base_Start+0xcc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d010      	beq.n	8002cac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9a:	e007      	b.n	8002cac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	40010400 	.word	0x40010400
 8002cd0:	40014000 	.word	0x40014000
 8002cd4:	40001800 	.word	0x40001800

08002cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e04e      	b.n	8002d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d01d      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_TIM_Base_Start_IT+0xd4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d111      	bne.n	8002d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d010      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	e007      	b.n	8002d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40001800 	.word	0x40001800

08002db8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e041      	b.n	8002e4e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fd08 	bl	80017f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 f9ba 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d122      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d11b      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0202 	mvn.w	r2, #2
 8002e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f94b 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002e9e:	e005      	b.n	8002eac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f93d 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f94e 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d122      	bne.n	8002f06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d11b      	bne.n	8002f06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0204 	mvn.w	r2, #4
 8002ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f921 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002ef2:	e005      	b.n	8002f00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f913 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f924 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d122      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11b      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0208 	mvn.w	r2, #8
 8002f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8f7 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002f46:	e005      	b.n	8002f54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8e9 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8fa 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d122      	bne.n	8002fae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d11b      	bne.n	8002fae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f06f 0210 	mvn.w	r2, #16
 8002f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2208      	movs	r2, #8
 8002f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8cd 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002f9a:	e005      	b.n	8002fa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8bf 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8d0 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10e      	bne.n	8002fda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0201 	mvn.w	r2, #1
 8002fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe fa83 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb8b 	bl	800371c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f895 	bl	800315c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b20      	cmp	r3, #32
 800303e:	d10e      	bne.n	800305e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d107      	bne.n	800305e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0220 	mvn.w	r2, #32
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fb55 	bl	8003708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003082:	2302      	movs	r3, #2
 8003084:	e048      	b.n	8003118 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d839      	bhi.n	8003108 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	08003109 	.word	0x08003109
 80030a4:	08003109 	.word	0x08003109
 80030a8:	08003109 	.word	0x08003109
 80030ac:	080030df 	.word	0x080030df
 80030b0:	08003109 	.word	0x08003109
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003109 	.word	0x08003109
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	08003109 	.word	0x08003109
 80030c4:	08003109 	.word	0x08003109
 80030c8:	08003109 	.word	0x08003109
 80030cc:	080030fb 	.word	0x080030fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f8ea 	bl	80032b0 <TIM_OC1_SetConfig>
      break;
 80030dc:	e017      	b.n	800310e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f953 	bl	8003390 <TIM_OC2_SetConfig>
      break;
 80030ea:	e010      	b.n	800310e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f9c2 	bl	800347c <TIM_OC3_SetConfig>
      break;
 80030f8:	e009      	b.n	800310e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fa2f 	bl	8003564 <TIM_OC4_SetConfig>
      break;
 8003106:	e002      	b.n	800310e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
      break;
 800310c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a40      	ldr	r2, [pc, #256]	; (8003284 <TIM_Base_SetConfig+0x114>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d00f      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3d      	ldr	r2, [pc, #244]	; (8003288 <TIM_Base_SetConfig+0x118>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00b      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <TIM_Base_SetConfig+0x11c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <TIM_Base_SetConfig+0x120>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <TIM_Base_SetConfig+0x124>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d108      	bne.n	80031c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <TIM_Base_SetConfig+0x114>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d027      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <TIM_Base_SetConfig+0x118>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d023      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <TIM_Base_SetConfig+0x11c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <TIM_Base_SetConfig+0x120>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <TIM_Base_SetConfig+0x124>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d017      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <TIM_Base_SetConfig+0x128>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <TIM_Base_SetConfig+0x12c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <TIM_Base_SetConfig+0x130>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <TIM_Base_SetConfig+0x134>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <TIM_Base_SetConfig+0x138>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <TIM_Base_SetConfig+0x13c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <TIM_Base_SetConfig+0x114>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0xf8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <TIM_Base_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d103      	bne.n	8003270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	615a      	str	r2, [r3, #20]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800
 80032a4:	40001800 	.word	0x40001800
 80032a8:	40001c00 	.word	0x40001c00
 80032ac:	40002000 	.word	0x40002000

080032b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0201 	bic.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 0302 	bic.w	r3, r3, #2
 80032f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a20      	ldr	r2, [pc, #128]	; (8003388 <TIM_OC1_SetConfig+0xd8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC1_SetConfig+0x64>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <TIM_OC1_SetConfig+0xdc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0308 	bic.w	r3, r3, #8
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <TIM_OC1_SetConfig+0xd8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_OC1_SetConfig+0x8e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <TIM_OC1_SetConfig+0xdc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40010000 	.word	0x40010000
 800338c:	40010400 	.word	0x40010400

08003390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0210 	bic.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <TIM_OC2_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x68>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <TIM_OC2_SetConfig+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10d      	bne.n	8003414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a17      	ldr	r2, [pc, #92]	; (8003474 <TIM_OC2_SetConfig+0xe4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_OC2_SetConfig+0x94>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC2_SetConfig+0xe8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d113      	bne.n	800344c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40010400 	.word	0x40010400

0800347c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <TIM_OC3_SetConfig+0xe0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC3_SetConfig+0x66>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_OC3_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a16      	ldr	r2, [pc, #88]	; (800355c <TIM_OC3_SetConfig+0xe0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_OC3_SetConfig+0x92>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <TIM_OC3_SetConfig+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d113      	bne.n	8003536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40010000 	.word	0x40010000
 8003560:	40010400 	.word	0x40010400

08003564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <TIM_OC4_SetConfig+0xa4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_OC4_SetConfig+0x68>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <TIM_OC4_SetConfig+0xa8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d109      	bne.n	80035e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40010400 	.word	0x40010400

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e05a      	b.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d01d      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40010400 	.word	0x40010400
 8003700:	40014000 	.word	0x40014000
 8003704:	40001800 	.word	0x40001800

08003708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e03f      	b.n	80037c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe f896 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f929 	bl	80039cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	; 0x28
 80037ce:	af02      	add	r7, sp, #8
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d17c      	bne.n	80038e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_UART_Transmit+0x2c>
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e075      	b.n	80038e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UART_Transmit+0x3e>
 8003804:	2302      	movs	r3, #2
 8003806:	e06e      	b.n	80038e6 <HAL_UART_Transmit+0x11c>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2221      	movs	r2, #33	; 0x21
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381e:	f7fe fa1f 	bl	8001c60 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d108      	bne.n	800384c <HAL_UART_Transmit+0x82>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	e003      	b.n	8003854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800385c:	e02a      	b.n	80038b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f840 	bl	80038ee <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e036      	b.n	80038e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10b      	bne.n	8003896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3302      	adds	r3, #2
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	e007      	b.n	80038a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3301      	adds	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1cf      	bne.n	800385e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2140      	movs	r1, #64	; 0x40
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f810 	bl	80038ee <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e006      	b.n	80038e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b090      	sub	sp, #64	; 0x40
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fe:	e050      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d04c      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	f7fe f9a7 	bl	8001c60 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391a:	429a      	cmp	r2, r3
 800391c:	d241      	bcs.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800393e:	637a      	str	r2, [r7, #52]	; 0x34
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003972:	623a      	str	r2, [r7, #32]
 8003974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00f      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d09f      	beq.n	8003900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3740      	adds	r7, #64	; 0x40
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b0c0      	sub	sp, #256	; 0x100
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	ea40 0301 	orr.w	r3, r0, r1
 80039f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a24:	f021 010c 	bic.w	r1, r1, #12
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a32:	430b      	orrs	r3, r1
 8003a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a46:	6999      	ldr	r1, [r3, #24]
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	ea40 0301 	orr.w	r3, r0, r1
 8003a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b8f      	ldr	r3, [pc, #572]	; (8003c98 <UART_SetConfig+0x2cc>)
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d005      	beq.n	8003a6c <UART_SetConfig+0xa0>
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <UART_SetConfig+0x2d0>)
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d104      	bne.n	8003a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7ff f868 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8003a70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a74:	e003      	b.n	8003a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a76:	f7ff f84f 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 8003a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a88:	f040 810c 	bne.w	8003ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003aae:	4621      	mov	r1, r4
 8003ab0:	eb12 0801 	adds.w	r8, r2, r1
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	eb43 0901 	adc.w	r9, r3, r1
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ace:	4690      	mov	r8, r2
 8003ad0:	4699      	mov	r9, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	eb18 0303 	adds.w	r3, r8, r3
 8003ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003adc:	462b      	mov	r3, r5
 8003ade:	eb49 0303 	adc.w	r3, r9, r3
 8003ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003af2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003afa:	460b      	mov	r3, r1
 8003afc:	18db      	adds	r3, r3, r3
 8003afe:	653b      	str	r3, [r7, #80]	; 0x50
 8003b00:	4613      	mov	r3, r2
 8003b02:	eb42 0303 	adc.w	r3, r2, r3
 8003b06:	657b      	str	r3, [r7, #84]	; 0x54
 8003b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b10:	f7fd f89a 	bl	8000c48 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <UART_SetConfig+0x2d4>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	011c      	lsls	r4, r3, #4
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b34:	4642      	mov	r2, r8
 8003b36:	464b      	mov	r3, r9
 8003b38:	1891      	adds	r1, r2, r2
 8003b3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b44:	4641      	mov	r1, r8
 8003b46:	eb12 0a01 	adds.w	sl, r2, r1
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b64:	4692      	mov	sl, r2
 8003b66:	469b      	mov	fp, r3
 8003b68:	4643      	mov	r3, r8
 8003b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b72:	464b      	mov	r3, r9
 8003b74:	eb4b 0303 	adc.w	r3, fp, r3
 8003b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b90:	460b      	mov	r3, r1
 8003b92:	18db      	adds	r3, r3, r3
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
 8003b96:	4613      	mov	r3, r2
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ba6:	f7fd f84f 	bl	8000c48 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <UART_SetConfig+0x2d4>)
 8003bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2264      	movs	r2, #100	; 0x64
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	1acb      	subs	r3, r1, r3
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <UART_SetConfig+0x2d4>)
 8003bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bd4:	441c      	add	r4, r3
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003be0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	1851      	adds	r1, r2, r1
 8003bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8003bfe:	4649      	mov	r1, r9
 8003c00:	414b      	adcs	r3, r1
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c10:	4659      	mov	r1, fp
 8003c12:	00cb      	lsls	r3, r1, #3
 8003c14:	4651      	mov	r1, sl
 8003c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	00ca      	lsls	r2, r1, #3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	4642      	mov	r2, r8
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	460a      	mov	r2, r1
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	18db      	adds	r3, r3, r3
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c52:	4613      	mov	r3, r2
 8003c54:	eb42 0303 	adc.w	r3, r2, r3
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c62:	f7fc fff1 	bl	8000c48 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <UART_SetConfig+0x2d4>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <UART_SetConfig+0x2d4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 0207 	and.w	r2, r3, #7
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4422      	add	r2, r4
 8003c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c94:	e105      	b.n	8003ea2 <UART_SetConfig+0x4d6>
 8003c96:	bf00      	nop
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	40011400 	.word	0x40011400
 8003ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	6239      	str	r1, [r7, #32]
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	1854      	adds	r4, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb43 0501 	adc.w	r5, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	00eb      	lsls	r3, r5, #3
 8003cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cde:	00e2      	lsls	r2, r4, #3
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	4643      	mov	r3, r8
 8003ce6:	18e3      	adds	r3, r4, r3
 8003ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cec:	464b      	mov	r3, r9
 8003cee:	eb45 0303 	adc.w	r3, r5, r3
 8003cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d12:	4629      	mov	r1, r5
 8003d14:	008b      	lsls	r3, r1, #2
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	008a      	lsls	r2, r1, #2
 8003d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d24:	f7fc ff90 	bl	8000c48 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4b60      	ldr	r3, [pc, #384]	; (8003eb0 <UART_SetConfig+0x4e4>)
 8003d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	011c      	lsls	r4, r3, #4
 8003d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	61b9      	str	r1, [r7, #24]
 8003d50:	415b      	adcs	r3, r3
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d58:	4641      	mov	r1, r8
 8003d5a:	1851      	adds	r1, r2, r1
 8003d5c:	6139      	str	r1, [r7, #16]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	414b      	adcs	r3, r1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d70:	4659      	mov	r1, fp
 8003d72:	00cb      	lsls	r3, r1, #3
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	4642      	mov	r2, r8
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	460a      	mov	r2, r1
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003da2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003db0:	4649      	mov	r1, r9
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dba:	4641      	mov	r1, r8
 8003dbc:	008a      	lsls	r2, r1, #2
 8003dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dc2:	f7fc ff41 	bl	8000c48 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <UART_SetConfig+0x4e4>)
 8003dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	2164      	movs	r1, #100	; 0x64
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	3332      	adds	r3, #50	; 0x32
 8003dde:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <UART_SetConfig+0x4e4>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dea:	441c      	add	r4, r3
 8003dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df0:	2200      	movs	r2, #0
 8003df2:	673b      	str	r3, [r7, #112]	; 0x70
 8003df4:	677a      	str	r2, [r7, #116]	; 0x74
 8003df6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dfa:	4642      	mov	r2, r8
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	1891      	adds	r1, r2, r2
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	415b      	adcs	r3, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1851      	adds	r1, r2, r1
 8003e0e:	6039      	str	r1, [r7, #0]
 8003e10:	4649      	mov	r1, r9
 8003e12:	414b      	adcs	r3, r1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e22:	4659      	mov	r1, fp
 8003e24:	00cb      	lsls	r3, r1, #3
 8003e26:	4651      	mov	r1, sl
 8003e28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	00ca      	lsls	r2, r1, #3
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	4603      	mov	r3, r0
 8003e36:	4642      	mov	r2, r8
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	460a      	mov	r2, r1
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e50:	667a      	str	r2, [r7, #100]	; 0x64
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e5e:	4649      	mov	r1, r9
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4641      	mov	r1, r8
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4641      	mov	r1, r8
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e70:	f7fc feea 	bl	8000c48 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <UART_SetConfig+0x4e4>)
 8003e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2164      	movs	r1, #100	; 0x64
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	3332      	adds	r3, #50	; 0x32
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <UART_SetConfig+0x4e4>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4422      	add	r2, r4
 8003ea0:	609a      	str	r2, [r3, #8]
}
 8003ea2:	bf00      	nop
 8003ea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eae:	bf00      	nop
 8003eb0:	51eb851f 	.word	0x51eb851f

08003eb4 <__errno>:
 8003eb4:	4b01      	ldr	r3, [pc, #4]	; (8003ebc <__errno+0x8>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000054 	.word	0x20000054

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4d0d      	ldr	r5, [pc, #52]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2600      	movs	r6, #0
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4d0b      	ldr	r5, [pc, #44]	; (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	; (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f003 fd9a 	bl	8007a0c <_init>
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2600      	movs	r6, #0
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08008008 	.word	0x08008008
 8003efc:	08008008 	.word	0x08008008
 8003f00:	08008008 	.word	0x08008008
 8003f04:	0800800c 	.word	0x0800800c

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <__cvt>:
 8003f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	ec55 4b10 	vmov	r4, r5, d0
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	460e      	mov	r6, r1
 8003f24:	4619      	mov	r1, r3
 8003f26:	462b      	mov	r3, r5
 8003f28:	bfbb      	ittet	lt
 8003f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f2e:	461d      	movlt	r5, r3
 8003f30:	2300      	movge	r3, #0
 8003f32:	232d      	movlt	r3, #45	; 0x2d
 8003f34:	700b      	strb	r3, [r1, #0]
 8003f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f3c:	4691      	mov	r9, r2
 8003f3e:	f023 0820 	bic.w	r8, r3, #32
 8003f42:	bfbc      	itt	lt
 8003f44:	4622      	movlt	r2, r4
 8003f46:	4614      	movlt	r4, r2
 8003f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f4c:	d005      	beq.n	8003f5a <__cvt+0x42>
 8003f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f52:	d100      	bne.n	8003f56 <__cvt+0x3e>
 8003f54:	3601      	adds	r6, #1
 8003f56:	2102      	movs	r1, #2
 8003f58:	e000      	b.n	8003f5c <__cvt+0x44>
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	ab03      	add	r3, sp, #12
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	ab02      	add	r3, sp, #8
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	ec45 4b10 	vmov	d0, r4, r5
 8003f68:	4653      	mov	r3, sl
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	f000 fce4 	bl	8004938 <_dtoa_r>
 8003f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f74:	4607      	mov	r7, r0
 8003f76:	d102      	bne.n	8003f7e <__cvt+0x66>
 8003f78:	f019 0f01 	tst.w	r9, #1
 8003f7c:	d022      	beq.n	8003fc4 <__cvt+0xac>
 8003f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f82:	eb07 0906 	add.w	r9, r7, r6
 8003f86:	d110      	bne.n	8003faa <__cvt+0x92>
 8003f88:	783b      	ldrb	r3, [r7, #0]
 8003f8a:	2b30      	cmp	r3, #48	; 0x30
 8003f8c:	d10a      	bne.n	8003fa4 <__cvt+0x8c>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f9a:	b918      	cbnz	r0, 8003fa4 <__cvt+0x8c>
 8003f9c:	f1c6 0601 	rsb	r6, r6, #1
 8003fa0:	f8ca 6000 	str.w	r6, [sl]
 8003fa4:	f8da 3000 	ldr.w	r3, [sl]
 8003fa8:	4499      	add	r9, r3
 8003faa:	2200      	movs	r2, #0
 8003fac:	2300      	movs	r3, #0
 8003fae:	4620      	mov	r0, r4
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7fc fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fb6:	b108      	cbz	r0, 8003fbc <__cvt+0xa4>
 8003fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fbc:	2230      	movs	r2, #48	; 0x30
 8003fbe:	9b03      	ldr	r3, [sp, #12]
 8003fc0:	454b      	cmp	r3, r9
 8003fc2:	d307      	bcc.n	8003fd4 <__cvt+0xbc>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fc8:	1bdb      	subs	r3, r3, r7
 8003fca:	4638      	mov	r0, r7
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	b004      	add	sp, #16
 8003fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	9103      	str	r1, [sp, #12]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e7f0      	b.n	8003fbe <__cvt+0xa6>

08003fdc <__exponent>:
 8003fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	bfb8      	it	lt
 8003fe4:	4249      	neglt	r1, r1
 8003fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8003fea:	bfb4      	ite	lt
 8003fec:	222d      	movlt	r2, #45	; 0x2d
 8003fee:	222b      	movge	r2, #43	; 0x2b
 8003ff0:	2909      	cmp	r1, #9
 8003ff2:	7042      	strb	r2, [r0, #1]
 8003ff4:	dd2a      	ble.n	800404c <__exponent+0x70>
 8003ff6:	f10d 0407 	add.w	r4, sp, #7
 8003ffa:	46a4      	mov	ip, r4
 8003ffc:	270a      	movs	r7, #10
 8003ffe:	46a6      	mov	lr, r4
 8004000:	460a      	mov	r2, r1
 8004002:	fb91 f6f7 	sdiv	r6, r1, r7
 8004006:	fb07 1516 	mls	r5, r7, r6, r1
 800400a:	3530      	adds	r5, #48	; 0x30
 800400c:	2a63      	cmp	r2, #99	; 0x63
 800400e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004016:	4631      	mov	r1, r6
 8004018:	dcf1      	bgt.n	8003ffe <__exponent+0x22>
 800401a:	3130      	adds	r1, #48	; 0x30
 800401c:	f1ae 0502 	sub.w	r5, lr, #2
 8004020:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004024:	1c44      	adds	r4, r0, #1
 8004026:	4629      	mov	r1, r5
 8004028:	4561      	cmp	r1, ip
 800402a:	d30a      	bcc.n	8004042 <__exponent+0x66>
 800402c:	f10d 0209 	add.w	r2, sp, #9
 8004030:	eba2 020e 	sub.w	r2, r2, lr
 8004034:	4565      	cmp	r5, ip
 8004036:	bf88      	it	hi
 8004038:	2200      	movhi	r2, #0
 800403a:	4413      	add	r3, r2
 800403c:	1a18      	subs	r0, r3, r0
 800403e:	b003      	add	sp, #12
 8004040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800404a:	e7ed      	b.n	8004028 <__exponent+0x4c>
 800404c:	2330      	movs	r3, #48	; 0x30
 800404e:	3130      	adds	r1, #48	; 0x30
 8004050:	7083      	strb	r3, [r0, #2]
 8004052:	70c1      	strb	r1, [r0, #3]
 8004054:	1d03      	adds	r3, r0, #4
 8004056:	e7f1      	b.n	800403c <__exponent+0x60>

08004058 <_printf_float>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	ed2d 8b02 	vpush	{d8}
 8004060:	b08d      	sub	sp, #52	; 0x34
 8004062:	460c      	mov	r4, r1
 8004064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004068:	4616      	mov	r6, r2
 800406a:	461f      	mov	r7, r3
 800406c:	4605      	mov	r5, r0
 800406e:	f001 fb47 	bl	8005700 <_localeconv_r>
 8004072:	f8d0 a000 	ldr.w	sl, [r0]
 8004076:	4650      	mov	r0, sl
 8004078:	f7fc f8aa 	bl	80001d0 <strlen>
 800407c:	2300      	movs	r3, #0
 800407e:	930a      	str	r3, [sp, #40]	; 0x28
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	f8d8 3000 	ldr.w	r3, [r8]
 8004088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800408c:	3307      	adds	r3, #7
 800408e:	f023 0307 	bic.w	r3, r3, #7
 8004092:	f103 0208 	add.w	r2, r3, #8
 8004096:	f8c8 2000 	str.w	r2, [r8]
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80040a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040aa:	9307      	str	r3, [sp, #28]
 80040ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80040b0:	ee08 0a10 	vmov	s16, r0
 80040b4:	4b9f      	ldr	r3, [pc, #636]	; (8004334 <_printf_float+0x2dc>)
 80040b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	f7fc fd35 	bl	8000b2c <__aeabi_dcmpun>
 80040c2:	bb88      	cbnz	r0, 8004128 <_printf_float+0xd0>
 80040c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c8:	4b9a      	ldr	r3, [pc, #616]	; (8004334 <_printf_float+0x2dc>)
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	f7fc fd0f 	bl	8000af0 <__aeabi_dcmple>
 80040d2:	bb48      	cbnz	r0, 8004128 <_printf_float+0xd0>
 80040d4:	2200      	movs	r2, #0
 80040d6:	2300      	movs	r3, #0
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc fcfe 	bl	8000adc <__aeabi_dcmplt>
 80040e0:	b110      	cbz	r0, 80040e8 <_printf_float+0x90>
 80040e2:	232d      	movs	r3, #45	; 0x2d
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	4b93      	ldr	r3, [pc, #588]	; (8004338 <_printf_float+0x2e0>)
 80040ea:	4894      	ldr	r0, [pc, #592]	; (800433c <_printf_float+0x2e4>)
 80040ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040f0:	bf94      	ite	ls
 80040f2:	4698      	movls	r8, r3
 80040f4:	4680      	movhi	r8, r0
 80040f6:	2303      	movs	r3, #3
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	9b05      	ldr	r3, [sp, #20]
 80040fc:	f023 0204 	bic.w	r2, r3, #4
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	f04f 0900 	mov.w	r9, #0
 8004106:	9700      	str	r7, [sp, #0]
 8004108:	4633      	mov	r3, r6
 800410a:	aa0b      	add	r2, sp, #44	; 0x2c
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f9d8 	bl	80044c4 <_printf_common>
 8004114:	3001      	adds	r0, #1
 8004116:	f040 8090 	bne.w	800423a <_printf_float+0x1e2>
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b00d      	add	sp, #52	; 0x34
 8004120:	ecbd 8b02 	vpop	{d8}
 8004124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	4640      	mov	r0, r8
 800412e:	4649      	mov	r1, r9
 8004130:	f7fc fcfc 	bl	8000b2c <__aeabi_dcmpun>
 8004134:	b140      	cbz	r0, 8004148 <_printf_float+0xf0>
 8004136:	464b      	mov	r3, r9
 8004138:	2b00      	cmp	r3, #0
 800413a:	bfbc      	itt	lt
 800413c:	232d      	movlt	r3, #45	; 0x2d
 800413e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004142:	487f      	ldr	r0, [pc, #508]	; (8004340 <_printf_float+0x2e8>)
 8004144:	4b7f      	ldr	r3, [pc, #508]	; (8004344 <_printf_float+0x2ec>)
 8004146:	e7d1      	b.n	80040ec <_printf_float+0x94>
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800414e:	9206      	str	r2, [sp, #24]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	d13f      	bne.n	80041d4 <_printf_float+0x17c>
 8004154:	2306      	movs	r3, #6
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	9b05      	ldr	r3, [sp, #20]
 800415a:	6861      	ldr	r1, [r4, #4]
 800415c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004160:	2300      	movs	r3, #0
 8004162:	9303      	str	r3, [sp, #12]
 8004164:	ab0a      	add	r3, sp, #40	; 0x28
 8004166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800416a:	ab09      	add	r3, sp, #36	; 0x24
 800416c:	ec49 8b10 	vmov	d0, r8, r9
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6022      	str	r2, [r4, #0]
 8004174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004178:	4628      	mov	r0, r5
 800417a:	f7ff fecd 	bl	8003f18 <__cvt>
 800417e:	9b06      	ldr	r3, [sp, #24]
 8004180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004182:	2b47      	cmp	r3, #71	; 0x47
 8004184:	4680      	mov	r8, r0
 8004186:	d108      	bne.n	800419a <_printf_float+0x142>
 8004188:	1cc8      	adds	r0, r1, #3
 800418a:	db02      	blt.n	8004192 <_printf_float+0x13a>
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	4299      	cmp	r1, r3
 8004190:	dd41      	ble.n	8004216 <_printf_float+0x1be>
 8004192:	f1ab 0b02 	sub.w	fp, fp, #2
 8004196:	fa5f fb8b 	uxtb.w	fp, fp
 800419a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800419e:	d820      	bhi.n	80041e2 <_printf_float+0x18a>
 80041a0:	3901      	subs	r1, #1
 80041a2:	465a      	mov	r2, fp
 80041a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041a8:	9109      	str	r1, [sp, #36]	; 0x24
 80041aa:	f7ff ff17 	bl	8003fdc <__exponent>
 80041ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041b0:	1813      	adds	r3, r2, r0
 80041b2:	2a01      	cmp	r2, #1
 80041b4:	4681      	mov	r9, r0
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	dc02      	bgt.n	80041c0 <_printf_float+0x168>
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	07d2      	lsls	r2, r2, #31
 80041be:	d501      	bpl.n	80041c4 <_printf_float+0x16c>
 80041c0:	3301      	adds	r3, #1
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d09c      	beq.n	8004106 <_printf_float+0xae>
 80041cc:	232d      	movs	r3, #45	; 0x2d
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e798      	b.n	8004106 <_printf_float+0xae>
 80041d4:	9a06      	ldr	r2, [sp, #24]
 80041d6:	2a47      	cmp	r2, #71	; 0x47
 80041d8:	d1be      	bne.n	8004158 <_printf_float+0x100>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1bc      	bne.n	8004158 <_printf_float+0x100>
 80041de:	2301      	movs	r3, #1
 80041e0:	e7b9      	b.n	8004156 <_printf_float+0xfe>
 80041e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041e6:	d118      	bne.n	800421a <_printf_float+0x1c2>
 80041e8:	2900      	cmp	r1, #0
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	dd0b      	ble.n	8004206 <_printf_float+0x1ae>
 80041ee:	6121      	str	r1, [r4, #16]
 80041f0:	b913      	cbnz	r3, 80041f8 <_printf_float+0x1a0>
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	07d0      	lsls	r0, r2, #31
 80041f6:	d502      	bpl.n	80041fe <_printf_float+0x1a6>
 80041f8:	3301      	adds	r3, #1
 80041fa:	440b      	add	r3, r1
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004200:	f04f 0900 	mov.w	r9, #0
 8004204:	e7de      	b.n	80041c4 <_printf_float+0x16c>
 8004206:	b913      	cbnz	r3, 800420e <_printf_float+0x1b6>
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	07d2      	lsls	r2, r2, #31
 800420c:	d501      	bpl.n	8004212 <_printf_float+0x1ba>
 800420e:	3302      	adds	r3, #2
 8004210:	e7f4      	b.n	80041fc <_printf_float+0x1a4>
 8004212:	2301      	movs	r3, #1
 8004214:	e7f2      	b.n	80041fc <_printf_float+0x1a4>
 8004216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421c:	4299      	cmp	r1, r3
 800421e:	db05      	blt.n	800422c <_printf_float+0x1d4>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	6121      	str	r1, [r4, #16]
 8004224:	07d8      	lsls	r0, r3, #31
 8004226:	d5ea      	bpl.n	80041fe <_printf_float+0x1a6>
 8004228:	1c4b      	adds	r3, r1, #1
 800422a:	e7e7      	b.n	80041fc <_printf_float+0x1a4>
 800422c:	2900      	cmp	r1, #0
 800422e:	bfd4      	ite	le
 8004230:	f1c1 0202 	rsble	r2, r1, #2
 8004234:	2201      	movgt	r2, #1
 8004236:	4413      	add	r3, r2
 8004238:	e7e0      	b.n	80041fc <_printf_float+0x1a4>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	055a      	lsls	r2, r3, #21
 800423e:	d407      	bmi.n	8004250 <_printf_float+0x1f8>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	4642      	mov	r2, r8
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	d12c      	bne.n	80042a8 <_printf_float+0x250>
 800424e:	e764      	b.n	800411a <_printf_float+0xc2>
 8004250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004254:	f240 80e0 	bls.w	8004418 <_printf_float+0x3c0>
 8004258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800425c:	2200      	movs	r2, #0
 800425e:	2300      	movs	r3, #0
 8004260:	f7fc fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004264:	2800      	cmp	r0, #0
 8004266:	d034      	beq.n	80042d2 <_printf_float+0x27a>
 8004268:	4a37      	ldr	r2, [pc, #220]	; (8004348 <_printf_float+0x2f0>)
 800426a:	2301      	movs	r3, #1
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	f43f af51 	beq.w	800411a <_printf_float+0xc2>
 8004278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800427c:	429a      	cmp	r2, r3
 800427e:	db02      	blt.n	8004286 <_printf_float+0x22e>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07d8      	lsls	r0, r3, #31
 8004284:	d510      	bpl.n	80042a8 <_printf_float+0x250>
 8004286:	ee18 3a10 	vmov	r3, s16
 800428a:	4652      	mov	r2, sl
 800428c:	4631      	mov	r1, r6
 800428e:	4628      	mov	r0, r5
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	f43f af41 	beq.w	800411a <_printf_float+0xc2>
 8004298:	f04f 0800 	mov.w	r8, #0
 800429c:	f104 091a 	add.w	r9, r4, #26
 80042a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4543      	cmp	r3, r8
 80042a6:	dc09      	bgt.n	80042bc <_printf_float+0x264>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	079b      	lsls	r3, r3, #30
 80042ac:	f100 8105 	bmi.w	80044ba <_printf_float+0x462>
 80042b0:	68e0      	ldr	r0, [r4, #12]
 80042b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b4:	4298      	cmp	r0, r3
 80042b6:	bfb8      	it	lt
 80042b8:	4618      	movlt	r0, r3
 80042ba:	e730      	b.n	800411e <_printf_float+0xc6>
 80042bc:	2301      	movs	r3, #1
 80042be:	464a      	mov	r2, r9
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af27 	beq.w	800411a <_printf_float+0xc2>
 80042cc:	f108 0801 	add.w	r8, r8, #1
 80042d0:	e7e6      	b.n	80042a0 <_printf_float+0x248>
 80042d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc39      	bgt.n	800434c <_printf_float+0x2f4>
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <_printf_float+0x2f0>)
 80042da:	2301      	movs	r3, #1
 80042dc:	4631      	mov	r1, r6
 80042de:	4628      	mov	r0, r5
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f af19 	beq.w	800411a <_printf_float+0xc2>
 80042e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d102      	bne.n	80042f6 <_printf_float+0x29e>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07d9      	lsls	r1, r3, #31
 80042f4:	d5d8      	bpl.n	80042a8 <_printf_float+0x250>
 80042f6:	ee18 3a10 	vmov	r3, s16
 80042fa:	4652      	mov	r2, sl
 80042fc:	4631      	mov	r1, r6
 80042fe:	4628      	mov	r0, r5
 8004300:	47b8      	blx	r7
 8004302:	3001      	adds	r0, #1
 8004304:	f43f af09 	beq.w	800411a <_printf_float+0xc2>
 8004308:	f04f 0900 	mov.w	r9, #0
 800430c:	f104 0a1a 	add.w	sl, r4, #26
 8004310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004312:	425b      	negs	r3, r3
 8004314:	454b      	cmp	r3, r9
 8004316:	dc01      	bgt.n	800431c <_printf_float+0x2c4>
 8004318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800431a:	e792      	b.n	8004242 <_printf_float+0x1ea>
 800431c:	2301      	movs	r3, #1
 800431e:	4652      	mov	r2, sl
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f aef7 	beq.w	800411a <_printf_float+0xc2>
 800432c:	f109 0901 	add.w	r9, r9, #1
 8004330:	e7ee      	b.n	8004310 <_printf_float+0x2b8>
 8004332:	bf00      	nop
 8004334:	7fefffff 	.word	0x7fefffff
 8004338:	08007a4c 	.word	0x08007a4c
 800433c:	08007a50 	.word	0x08007a50
 8004340:	08007a58 	.word	0x08007a58
 8004344:	08007a54 	.word	0x08007a54
 8004348:	08007a5c 	.word	0x08007a5c
 800434c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800434e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004350:	429a      	cmp	r2, r3
 8004352:	bfa8      	it	ge
 8004354:	461a      	movge	r2, r3
 8004356:	2a00      	cmp	r2, #0
 8004358:	4691      	mov	r9, r2
 800435a:	dc37      	bgt.n	80043cc <_printf_float+0x374>
 800435c:	f04f 0b00 	mov.w	fp, #0
 8004360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004364:	f104 021a 	add.w	r2, r4, #26
 8004368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800436a:	9305      	str	r3, [sp, #20]
 800436c:	eba3 0309 	sub.w	r3, r3, r9
 8004370:	455b      	cmp	r3, fp
 8004372:	dc33      	bgt.n	80043dc <_printf_float+0x384>
 8004374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004378:	429a      	cmp	r2, r3
 800437a:	db3b      	blt.n	80043f4 <_printf_float+0x39c>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07da      	lsls	r2, r3, #31
 8004380:	d438      	bmi.n	80043f4 <_printf_float+0x39c>
 8004382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004384:	9a05      	ldr	r2, [sp, #20]
 8004386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004388:	1a9a      	subs	r2, r3, r2
 800438a:	eba3 0901 	sub.w	r9, r3, r1
 800438e:	4591      	cmp	r9, r2
 8004390:	bfa8      	it	ge
 8004392:	4691      	movge	r9, r2
 8004394:	f1b9 0f00 	cmp.w	r9, #0
 8004398:	dc35      	bgt.n	8004406 <_printf_float+0x3ae>
 800439a:	f04f 0800 	mov.w	r8, #0
 800439e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043a2:	f104 0a1a 	add.w	sl, r4, #26
 80043a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	eba3 0309 	sub.w	r3, r3, r9
 80043b0:	4543      	cmp	r3, r8
 80043b2:	f77f af79 	ble.w	80042a8 <_printf_float+0x250>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f aeaa 	beq.w	800411a <_printf_float+0xc2>
 80043c6:	f108 0801 	add.w	r8, r8, #1
 80043ca:	e7ec      	b.n	80043a6 <_printf_float+0x34e>
 80043cc:	4613      	mov	r3, r2
 80043ce:	4631      	mov	r1, r6
 80043d0:	4642      	mov	r2, r8
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	d1c0      	bne.n	800435c <_printf_float+0x304>
 80043da:	e69e      	b.n	800411a <_printf_float+0xc2>
 80043dc:	2301      	movs	r3, #1
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	9205      	str	r2, [sp, #20]
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f ae97 	beq.w	800411a <_printf_float+0xc2>
 80043ec:	9a05      	ldr	r2, [sp, #20]
 80043ee:	f10b 0b01 	add.w	fp, fp, #1
 80043f2:	e7b9      	b.n	8004368 <_printf_float+0x310>
 80043f4:	ee18 3a10 	vmov	r3, s16
 80043f8:	4652      	mov	r2, sl
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	d1be      	bne.n	8004382 <_printf_float+0x32a>
 8004404:	e689      	b.n	800411a <_printf_float+0xc2>
 8004406:	9a05      	ldr	r2, [sp, #20]
 8004408:	464b      	mov	r3, r9
 800440a:	4442      	add	r2, r8
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	d1c1      	bne.n	800439a <_printf_float+0x342>
 8004416:	e680      	b.n	800411a <_printf_float+0xc2>
 8004418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800441a:	2a01      	cmp	r2, #1
 800441c:	dc01      	bgt.n	8004422 <_printf_float+0x3ca>
 800441e:	07db      	lsls	r3, r3, #31
 8004420:	d538      	bpl.n	8004494 <_printf_float+0x43c>
 8004422:	2301      	movs	r3, #1
 8004424:	4642      	mov	r2, r8
 8004426:	4631      	mov	r1, r6
 8004428:	4628      	mov	r0, r5
 800442a:	47b8      	blx	r7
 800442c:	3001      	adds	r0, #1
 800442e:	f43f ae74 	beq.w	800411a <_printf_float+0xc2>
 8004432:	ee18 3a10 	vmov	r3, s16
 8004436:	4652      	mov	r2, sl
 8004438:	4631      	mov	r1, r6
 800443a:	4628      	mov	r0, r5
 800443c:	47b8      	blx	r7
 800443e:	3001      	adds	r0, #1
 8004440:	f43f ae6b 	beq.w	800411a <_printf_float+0xc2>
 8004444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004448:	2200      	movs	r2, #0
 800444a:	2300      	movs	r3, #0
 800444c:	f7fc fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004450:	b9d8      	cbnz	r0, 800448a <_printf_float+0x432>
 8004452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004454:	f108 0201 	add.w	r2, r8, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	d10e      	bne.n	8004482 <_printf_float+0x42a>
 8004464:	e659      	b.n	800411a <_printf_float+0xc2>
 8004466:	2301      	movs	r3, #1
 8004468:	4652      	mov	r2, sl
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f ae52 	beq.w	800411a <_printf_float+0xc2>
 8004476:	f108 0801 	add.w	r8, r8, #1
 800447a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	4543      	cmp	r3, r8
 8004480:	dcf1      	bgt.n	8004466 <_printf_float+0x40e>
 8004482:	464b      	mov	r3, r9
 8004484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004488:	e6dc      	b.n	8004244 <_printf_float+0x1ec>
 800448a:	f04f 0800 	mov.w	r8, #0
 800448e:	f104 0a1a 	add.w	sl, r4, #26
 8004492:	e7f2      	b.n	800447a <_printf_float+0x422>
 8004494:	2301      	movs	r3, #1
 8004496:	4642      	mov	r2, r8
 8004498:	e7df      	b.n	800445a <_printf_float+0x402>
 800449a:	2301      	movs	r3, #1
 800449c:	464a      	mov	r2, r9
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	f43f ae38 	beq.w	800411a <_printf_float+0xc2>
 80044aa:	f108 0801 	add.w	r8, r8, #1
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044b2:	1a5b      	subs	r3, r3, r1
 80044b4:	4543      	cmp	r3, r8
 80044b6:	dcf0      	bgt.n	800449a <_printf_float+0x442>
 80044b8:	e6fa      	b.n	80042b0 <_printf_float+0x258>
 80044ba:	f04f 0800 	mov.w	r8, #0
 80044be:	f104 0919 	add.w	r9, r4, #25
 80044c2:	e7f4      	b.n	80044ae <_printf_float+0x456>

080044c4 <_printf_common>:
 80044c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c8:	4616      	mov	r6, r2
 80044ca:	4699      	mov	r9, r3
 80044cc:	688a      	ldr	r2, [r1, #8]
 80044ce:	690b      	ldr	r3, [r1, #16]
 80044d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bfb8      	it	lt
 80044d8:	4613      	movlt	r3, r2
 80044da:	6033      	str	r3, [r6, #0]
 80044dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e0:	4607      	mov	r7, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	b10a      	cbz	r2, 80044ea <_printf_common+0x26>
 80044e6:	3301      	adds	r3, #1
 80044e8:	6033      	str	r3, [r6, #0]
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	0699      	lsls	r1, r3, #26
 80044ee:	bf42      	ittt	mi
 80044f0:	6833      	ldrmi	r3, [r6, #0]
 80044f2:	3302      	addmi	r3, #2
 80044f4:	6033      	strmi	r3, [r6, #0]
 80044f6:	6825      	ldr	r5, [r4, #0]
 80044f8:	f015 0506 	ands.w	r5, r5, #6
 80044fc:	d106      	bne.n	800450c <_printf_common+0x48>
 80044fe:	f104 0a19 	add.w	sl, r4, #25
 8004502:	68e3      	ldr	r3, [r4, #12]
 8004504:	6832      	ldr	r2, [r6, #0]
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	42ab      	cmp	r3, r5
 800450a:	dc26      	bgt.n	800455a <_printf_common+0x96>
 800450c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004510:	1e13      	subs	r3, r2, #0
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	bf18      	it	ne
 8004516:	2301      	movne	r3, #1
 8004518:	0692      	lsls	r2, r2, #26
 800451a:	d42b      	bmi.n	8004574 <_printf_common+0xb0>
 800451c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004520:	4649      	mov	r1, r9
 8004522:	4638      	mov	r0, r7
 8004524:	47c0      	blx	r8
 8004526:	3001      	adds	r0, #1
 8004528:	d01e      	beq.n	8004568 <_printf_common+0xa4>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	68e5      	ldr	r5, [r4, #12]
 800452e:	6832      	ldr	r2, [r6, #0]
 8004530:	f003 0306 	and.w	r3, r3, #6
 8004534:	2b04      	cmp	r3, #4
 8004536:	bf08      	it	eq
 8004538:	1aad      	subeq	r5, r5, r2
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	bf0c      	ite	eq
 8004540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004544:	2500      	movne	r5, #0
 8004546:	4293      	cmp	r3, r2
 8004548:	bfc4      	itt	gt
 800454a:	1a9b      	subgt	r3, r3, r2
 800454c:	18ed      	addgt	r5, r5, r3
 800454e:	2600      	movs	r6, #0
 8004550:	341a      	adds	r4, #26
 8004552:	42b5      	cmp	r5, r6
 8004554:	d11a      	bne.n	800458c <_printf_common+0xc8>
 8004556:	2000      	movs	r0, #0
 8004558:	e008      	b.n	800456c <_printf_common+0xa8>
 800455a:	2301      	movs	r3, #1
 800455c:	4652      	mov	r2, sl
 800455e:	4649      	mov	r1, r9
 8004560:	4638      	mov	r0, r7
 8004562:	47c0      	blx	r8
 8004564:	3001      	adds	r0, #1
 8004566:	d103      	bne.n	8004570 <_printf_common+0xac>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	3501      	adds	r5, #1
 8004572:	e7c6      	b.n	8004502 <_printf_common+0x3e>
 8004574:	18e1      	adds	r1, r4, r3
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	2030      	movs	r0, #48	; 0x30
 800457a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800457e:	4422      	add	r2, r4
 8004580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004588:	3302      	adds	r3, #2
 800458a:	e7c7      	b.n	800451c <_printf_common+0x58>
 800458c:	2301      	movs	r3, #1
 800458e:	4622      	mov	r2, r4
 8004590:	4649      	mov	r1, r9
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d0e6      	beq.n	8004568 <_printf_common+0xa4>
 800459a:	3601      	adds	r6, #1
 800459c:	e7d9      	b.n	8004552 <_printf_common+0x8e>
	...

080045a0 <_printf_i>:
 80045a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	7e0f      	ldrb	r7, [r1, #24]
 80045a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045a8:	2f78      	cmp	r7, #120	; 0x78
 80045aa:	4691      	mov	r9, r2
 80045ac:	4680      	mov	r8, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	469a      	mov	sl, r3
 80045b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045b6:	d807      	bhi.n	80045c8 <_printf_i+0x28>
 80045b8:	2f62      	cmp	r7, #98	; 0x62
 80045ba:	d80a      	bhi.n	80045d2 <_printf_i+0x32>
 80045bc:	2f00      	cmp	r7, #0
 80045be:	f000 80d8 	beq.w	8004772 <_printf_i+0x1d2>
 80045c2:	2f58      	cmp	r7, #88	; 0x58
 80045c4:	f000 80a3 	beq.w	800470e <_printf_i+0x16e>
 80045c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d0:	e03a      	b.n	8004648 <_printf_i+0xa8>
 80045d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045d6:	2b15      	cmp	r3, #21
 80045d8:	d8f6      	bhi.n	80045c8 <_printf_i+0x28>
 80045da:	a101      	add	r1, pc, #4	; (adr r1, 80045e0 <_printf_i+0x40>)
 80045dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045e0:	08004639 	.word	0x08004639
 80045e4:	0800464d 	.word	0x0800464d
 80045e8:	080045c9 	.word	0x080045c9
 80045ec:	080045c9 	.word	0x080045c9
 80045f0:	080045c9 	.word	0x080045c9
 80045f4:	080045c9 	.word	0x080045c9
 80045f8:	0800464d 	.word	0x0800464d
 80045fc:	080045c9 	.word	0x080045c9
 8004600:	080045c9 	.word	0x080045c9
 8004604:	080045c9 	.word	0x080045c9
 8004608:	080045c9 	.word	0x080045c9
 800460c:	08004759 	.word	0x08004759
 8004610:	0800467d 	.word	0x0800467d
 8004614:	0800473b 	.word	0x0800473b
 8004618:	080045c9 	.word	0x080045c9
 800461c:	080045c9 	.word	0x080045c9
 8004620:	0800477b 	.word	0x0800477b
 8004624:	080045c9 	.word	0x080045c9
 8004628:	0800467d 	.word	0x0800467d
 800462c:	080045c9 	.word	0x080045c9
 8004630:	080045c9 	.word	0x080045c9
 8004634:	08004743 	.word	0x08004743
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	1d1a      	adds	r2, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	602a      	str	r2, [r5, #0]
 8004640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004648:	2301      	movs	r3, #1
 800464a:	e0a3      	b.n	8004794 <_printf_i+0x1f4>
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	6829      	ldr	r1, [r5, #0]
 8004650:	0606      	lsls	r6, r0, #24
 8004652:	f101 0304 	add.w	r3, r1, #4
 8004656:	d50a      	bpl.n	800466e <_printf_i+0xce>
 8004658:	680e      	ldr	r6, [r1, #0]
 800465a:	602b      	str	r3, [r5, #0]
 800465c:	2e00      	cmp	r6, #0
 800465e:	da03      	bge.n	8004668 <_printf_i+0xc8>
 8004660:	232d      	movs	r3, #45	; 0x2d
 8004662:	4276      	negs	r6, r6
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004668:	485e      	ldr	r0, [pc, #376]	; (80047e4 <_printf_i+0x244>)
 800466a:	230a      	movs	r3, #10
 800466c:	e019      	b.n	80046a2 <_printf_i+0x102>
 800466e:	680e      	ldr	r6, [r1, #0]
 8004670:	602b      	str	r3, [r5, #0]
 8004672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004676:	bf18      	it	ne
 8004678:	b236      	sxthne	r6, r6
 800467a:	e7ef      	b.n	800465c <_printf_i+0xbc>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	6820      	ldr	r0, [r4, #0]
 8004680:	1d19      	adds	r1, r3, #4
 8004682:	6029      	str	r1, [r5, #0]
 8004684:	0601      	lsls	r1, r0, #24
 8004686:	d501      	bpl.n	800468c <_printf_i+0xec>
 8004688:	681e      	ldr	r6, [r3, #0]
 800468a:	e002      	b.n	8004692 <_printf_i+0xf2>
 800468c:	0646      	lsls	r6, r0, #25
 800468e:	d5fb      	bpl.n	8004688 <_printf_i+0xe8>
 8004690:	881e      	ldrh	r6, [r3, #0]
 8004692:	4854      	ldr	r0, [pc, #336]	; (80047e4 <_printf_i+0x244>)
 8004694:	2f6f      	cmp	r7, #111	; 0x6f
 8004696:	bf0c      	ite	eq
 8004698:	2308      	moveq	r3, #8
 800469a:	230a      	movne	r3, #10
 800469c:	2100      	movs	r1, #0
 800469e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046a2:	6865      	ldr	r5, [r4, #4]
 80046a4:	60a5      	str	r5, [r4, #8]
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	bfa2      	ittt	ge
 80046aa:	6821      	ldrge	r1, [r4, #0]
 80046ac:	f021 0104 	bicge.w	r1, r1, #4
 80046b0:	6021      	strge	r1, [r4, #0]
 80046b2:	b90e      	cbnz	r6, 80046b8 <_printf_i+0x118>
 80046b4:	2d00      	cmp	r5, #0
 80046b6:	d04d      	beq.n	8004754 <_printf_i+0x1b4>
 80046b8:	4615      	mov	r5, r2
 80046ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80046be:	fb03 6711 	mls	r7, r3, r1, r6
 80046c2:	5dc7      	ldrb	r7, [r0, r7]
 80046c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046c8:	4637      	mov	r7, r6
 80046ca:	42bb      	cmp	r3, r7
 80046cc:	460e      	mov	r6, r1
 80046ce:	d9f4      	bls.n	80046ba <_printf_i+0x11a>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d10b      	bne.n	80046ec <_printf_i+0x14c>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	07de      	lsls	r6, r3, #31
 80046d8:	d508      	bpl.n	80046ec <_printf_i+0x14c>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	6861      	ldr	r1, [r4, #4]
 80046de:	4299      	cmp	r1, r3
 80046e0:	bfde      	ittt	le
 80046e2:	2330      	movle	r3, #48	; 0x30
 80046e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ec:	1b52      	subs	r2, r2, r5
 80046ee:	6122      	str	r2, [r4, #16]
 80046f0:	f8cd a000 	str.w	sl, [sp]
 80046f4:	464b      	mov	r3, r9
 80046f6:	aa03      	add	r2, sp, #12
 80046f8:	4621      	mov	r1, r4
 80046fa:	4640      	mov	r0, r8
 80046fc:	f7ff fee2 	bl	80044c4 <_printf_common>
 8004700:	3001      	adds	r0, #1
 8004702:	d14c      	bne.n	800479e <_printf_i+0x1fe>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	b004      	add	sp, #16
 800470a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470e:	4835      	ldr	r0, [pc, #212]	; (80047e4 <_printf_i+0x244>)
 8004710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004714:	6829      	ldr	r1, [r5, #0]
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	f851 6b04 	ldr.w	r6, [r1], #4
 800471c:	6029      	str	r1, [r5, #0]
 800471e:	061d      	lsls	r5, r3, #24
 8004720:	d514      	bpl.n	800474c <_printf_i+0x1ac>
 8004722:	07df      	lsls	r7, r3, #31
 8004724:	bf44      	itt	mi
 8004726:	f043 0320 	orrmi.w	r3, r3, #32
 800472a:	6023      	strmi	r3, [r4, #0]
 800472c:	b91e      	cbnz	r6, 8004736 <_printf_i+0x196>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	f023 0320 	bic.w	r3, r3, #32
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	2310      	movs	r3, #16
 8004738:	e7b0      	b.n	800469c <_printf_i+0xfc>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	f043 0320 	orr.w	r3, r3, #32
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	2378      	movs	r3, #120	; 0x78
 8004744:	4828      	ldr	r0, [pc, #160]	; (80047e8 <_printf_i+0x248>)
 8004746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800474a:	e7e3      	b.n	8004714 <_printf_i+0x174>
 800474c:	0659      	lsls	r1, r3, #25
 800474e:	bf48      	it	mi
 8004750:	b2b6      	uxthmi	r6, r6
 8004752:	e7e6      	b.n	8004722 <_printf_i+0x182>
 8004754:	4615      	mov	r5, r2
 8004756:	e7bb      	b.n	80046d0 <_printf_i+0x130>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	6826      	ldr	r6, [r4, #0]
 800475c:	6961      	ldr	r1, [r4, #20]
 800475e:	1d18      	adds	r0, r3, #4
 8004760:	6028      	str	r0, [r5, #0]
 8004762:	0635      	lsls	r5, r6, #24
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	d501      	bpl.n	800476c <_printf_i+0x1cc>
 8004768:	6019      	str	r1, [r3, #0]
 800476a:	e002      	b.n	8004772 <_printf_i+0x1d2>
 800476c:	0670      	lsls	r0, r6, #25
 800476e:	d5fb      	bpl.n	8004768 <_printf_i+0x1c8>
 8004770:	8019      	strh	r1, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	4615      	mov	r5, r2
 8004778:	e7ba      	b.n	80046f0 <_printf_i+0x150>
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	1d1a      	adds	r2, r3, #4
 800477e:	602a      	str	r2, [r5, #0]
 8004780:	681d      	ldr	r5, [r3, #0]
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	4628      	mov	r0, r5
 8004788:	f7fb fd2a 	bl	80001e0 <memchr>
 800478c:	b108      	cbz	r0, 8004792 <_printf_i+0x1f2>
 800478e:	1b40      	subs	r0, r0, r5
 8004790:	6060      	str	r0, [r4, #4]
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	6123      	str	r3, [r4, #16]
 8004796:	2300      	movs	r3, #0
 8004798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479c:	e7a8      	b.n	80046f0 <_printf_i+0x150>
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	462a      	mov	r2, r5
 80047a2:	4649      	mov	r1, r9
 80047a4:	4640      	mov	r0, r8
 80047a6:	47d0      	blx	sl
 80047a8:	3001      	adds	r0, #1
 80047aa:	d0ab      	beq.n	8004704 <_printf_i+0x164>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	079b      	lsls	r3, r3, #30
 80047b0:	d413      	bmi.n	80047da <_printf_i+0x23a>
 80047b2:	68e0      	ldr	r0, [r4, #12]
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	4298      	cmp	r0, r3
 80047b8:	bfb8      	it	lt
 80047ba:	4618      	movlt	r0, r3
 80047bc:	e7a4      	b.n	8004708 <_printf_i+0x168>
 80047be:	2301      	movs	r3, #1
 80047c0:	4632      	mov	r2, r6
 80047c2:	4649      	mov	r1, r9
 80047c4:	4640      	mov	r0, r8
 80047c6:	47d0      	blx	sl
 80047c8:	3001      	adds	r0, #1
 80047ca:	d09b      	beq.n	8004704 <_printf_i+0x164>
 80047cc:	3501      	adds	r5, #1
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	9903      	ldr	r1, [sp, #12]
 80047d2:	1a5b      	subs	r3, r3, r1
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dcf2      	bgt.n	80047be <_printf_i+0x21e>
 80047d8:	e7eb      	b.n	80047b2 <_printf_i+0x212>
 80047da:	2500      	movs	r5, #0
 80047dc:	f104 0619 	add.w	r6, r4, #25
 80047e0:	e7f5      	b.n	80047ce <_printf_i+0x22e>
 80047e2:	bf00      	nop
 80047e4:	08007a5e 	.word	0x08007a5e
 80047e8:	08007a6f 	.word	0x08007a6f

080047ec <iprintf>:
 80047ec:	b40f      	push	{r0, r1, r2, r3}
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <iprintf+0x2c>)
 80047f0:	b513      	push	{r0, r1, r4, lr}
 80047f2:	681c      	ldr	r4, [r3, #0]
 80047f4:	b124      	cbz	r4, 8004800 <iprintf+0x14>
 80047f6:	69a3      	ldr	r3, [r4, #24]
 80047f8:	b913      	cbnz	r3, 8004800 <iprintf+0x14>
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fee2 	bl	80055c4 <__sinit>
 8004800:	ab05      	add	r3, sp, #20
 8004802:	9a04      	ldr	r2, [sp, #16]
 8004804:	68a1      	ldr	r1, [r4, #8]
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	4620      	mov	r0, r4
 800480a:	f001 fc3b 	bl	8006084 <_vfiprintf_r>
 800480e:	b002      	add	sp, #8
 8004810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004814:	b004      	add	sp, #16
 8004816:	4770      	bx	lr
 8004818:	20000054 	.word	0x20000054

0800481c <quorem>:
 800481c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	6903      	ldr	r3, [r0, #16]
 8004822:	690c      	ldr	r4, [r1, #16]
 8004824:	42a3      	cmp	r3, r4
 8004826:	4607      	mov	r7, r0
 8004828:	f2c0 8081 	blt.w	800492e <quorem+0x112>
 800482c:	3c01      	subs	r4, #1
 800482e:	f101 0814 	add.w	r8, r1, #20
 8004832:	f100 0514 	add.w	r5, r0, #20
 8004836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004844:	3301      	adds	r3, #1
 8004846:	429a      	cmp	r2, r3
 8004848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800484c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004850:	fbb2 f6f3 	udiv	r6, r2, r3
 8004854:	d331      	bcc.n	80048ba <quorem+0x9e>
 8004856:	f04f 0e00 	mov.w	lr, #0
 800485a:	4640      	mov	r0, r8
 800485c:	46ac      	mov	ip, r5
 800485e:	46f2      	mov	sl, lr
 8004860:	f850 2b04 	ldr.w	r2, [r0], #4
 8004864:	b293      	uxth	r3, r2
 8004866:	fb06 e303 	mla	r3, r6, r3, lr
 800486a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800486e:	b29b      	uxth	r3, r3
 8004870:	ebaa 0303 	sub.w	r3, sl, r3
 8004874:	f8dc a000 	ldr.w	sl, [ip]
 8004878:	0c12      	lsrs	r2, r2, #16
 800487a:	fa13 f38a 	uxtah	r3, r3, sl
 800487e:	fb06 e202 	mla	r2, r6, r2, lr
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	9b00      	ldr	r3, [sp, #0]
 8004886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800488a:	b292      	uxth	r2, r2
 800488c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004894:	f8bd 3000 	ldrh.w	r3, [sp]
 8004898:	4581      	cmp	r9, r0
 800489a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800489e:	f84c 3b04 	str.w	r3, [ip], #4
 80048a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80048a6:	d2db      	bcs.n	8004860 <quorem+0x44>
 80048a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80048ac:	b92b      	cbnz	r3, 80048ba <quorem+0x9e>
 80048ae:	9b01      	ldr	r3, [sp, #4]
 80048b0:	3b04      	subs	r3, #4
 80048b2:	429d      	cmp	r5, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	d32e      	bcc.n	8004916 <quorem+0xfa>
 80048b8:	613c      	str	r4, [r7, #16]
 80048ba:	4638      	mov	r0, r7
 80048bc:	f001 f9c0 	bl	8005c40 <__mcmp>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	db24      	blt.n	800490e <quorem+0xf2>
 80048c4:	3601      	adds	r6, #1
 80048c6:	4628      	mov	r0, r5
 80048c8:	f04f 0c00 	mov.w	ip, #0
 80048cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80048d0:	f8d0 e000 	ldr.w	lr, [r0]
 80048d4:	b293      	uxth	r3, r2
 80048d6:	ebac 0303 	sub.w	r3, ip, r3
 80048da:	0c12      	lsrs	r2, r2, #16
 80048dc:	fa13 f38e 	uxtah	r3, r3, lr
 80048e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ee:	45c1      	cmp	r9, r8
 80048f0:	f840 3b04 	str.w	r3, [r0], #4
 80048f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048f8:	d2e8      	bcs.n	80048cc <quorem+0xb0>
 80048fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004902:	b922      	cbnz	r2, 800490e <quorem+0xf2>
 8004904:	3b04      	subs	r3, #4
 8004906:	429d      	cmp	r5, r3
 8004908:	461a      	mov	r2, r3
 800490a:	d30a      	bcc.n	8004922 <quorem+0x106>
 800490c:	613c      	str	r4, [r7, #16]
 800490e:	4630      	mov	r0, r6
 8004910:	b003      	add	sp, #12
 8004912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	3b04      	subs	r3, #4
 800491a:	2a00      	cmp	r2, #0
 800491c:	d1cc      	bne.n	80048b8 <quorem+0x9c>
 800491e:	3c01      	subs	r4, #1
 8004920:	e7c7      	b.n	80048b2 <quorem+0x96>
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	3b04      	subs	r3, #4
 8004926:	2a00      	cmp	r2, #0
 8004928:	d1f0      	bne.n	800490c <quorem+0xf0>
 800492a:	3c01      	subs	r4, #1
 800492c:	e7eb      	b.n	8004906 <quorem+0xea>
 800492e:	2000      	movs	r0, #0
 8004930:	e7ee      	b.n	8004910 <quorem+0xf4>
 8004932:	0000      	movs	r0, r0
 8004934:	0000      	movs	r0, r0
	...

08004938 <_dtoa_r>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	ed2d 8b04 	vpush	{d8-d9}
 8004940:	ec57 6b10 	vmov	r6, r7, d0
 8004944:	b093      	sub	sp, #76	; 0x4c
 8004946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800494c:	9106      	str	r1, [sp, #24]
 800494e:	ee10 aa10 	vmov	sl, s0
 8004952:	4604      	mov	r4, r0
 8004954:	9209      	str	r2, [sp, #36]	; 0x24
 8004956:	930c      	str	r3, [sp, #48]	; 0x30
 8004958:	46bb      	mov	fp, r7
 800495a:	b975      	cbnz	r5, 800497a <_dtoa_r+0x42>
 800495c:	2010      	movs	r0, #16
 800495e:	f000 fed7 	bl	8005710 <malloc>
 8004962:	4602      	mov	r2, r0
 8004964:	6260      	str	r0, [r4, #36]	; 0x24
 8004966:	b920      	cbnz	r0, 8004972 <_dtoa_r+0x3a>
 8004968:	4ba7      	ldr	r3, [pc, #668]	; (8004c08 <_dtoa_r+0x2d0>)
 800496a:	21ea      	movs	r1, #234	; 0xea
 800496c:	48a7      	ldr	r0, [pc, #668]	; (8004c0c <_dtoa_r+0x2d4>)
 800496e:	f001 fddf 	bl	8006530 <__assert_func>
 8004972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004976:	6005      	str	r5, [r0, #0]
 8004978:	60c5      	str	r5, [r0, #12]
 800497a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	b151      	cbz	r1, 8004996 <_dtoa_r+0x5e>
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	604a      	str	r2, [r1, #4]
 8004984:	2301      	movs	r3, #1
 8004986:	4093      	lsls	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
 800498a:	4620      	mov	r0, r4
 800498c:	f000 ff16 	bl	80057bc <_Bfree>
 8004990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	1e3b      	subs	r3, r7, #0
 8004998:	bfaa      	itet	ge
 800499a:	2300      	movge	r3, #0
 800499c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80049a0:	f8c8 3000 	strge.w	r3, [r8]
 80049a4:	4b9a      	ldr	r3, [pc, #616]	; (8004c10 <_dtoa_r+0x2d8>)
 80049a6:	bfbc      	itt	lt
 80049a8:	2201      	movlt	r2, #1
 80049aa:	f8c8 2000 	strlt.w	r2, [r8]
 80049ae:	ea33 030b 	bics.w	r3, r3, fp
 80049b2:	d11b      	bne.n	80049ec <_dtoa_r+0xb4>
 80049b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049c0:	4333      	orrs	r3, r6
 80049c2:	f000 8592 	beq.w	80054ea <_dtoa_r+0xbb2>
 80049c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049c8:	b963      	cbnz	r3, 80049e4 <_dtoa_r+0xac>
 80049ca:	4b92      	ldr	r3, [pc, #584]	; (8004c14 <_dtoa_r+0x2dc>)
 80049cc:	e022      	b.n	8004a14 <_dtoa_r+0xdc>
 80049ce:	4b92      	ldr	r3, [pc, #584]	; (8004c18 <_dtoa_r+0x2e0>)
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	3308      	adds	r3, #8
 80049d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	9801      	ldr	r0, [sp, #4]
 80049da:	b013      	add	sp, #76	; 0x4c
 80049dc:	ecbd 8b04 	vpop	{d8-d9}
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <_dtoa_r+0x2dc>)
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	3303      	adds	r3, #3
 80049ea:	e7f3      	b.n	80049d4 <_dtoa_r+0x9c>
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	4650      	mov	r0, sl
 80049f2:	4659      	mov	r1, fp
 80049f4:	f7fc f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80049f8:	ec4b ab19 	vmov	d9, sl, fp
 80049fc:	4680      	mov	r8, r0
 80049fe:	b158      	cbz	r0, 8004a18 <_dtoa_r+0xe0>
 8004a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a02:	2301      	movs	r3, #1
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 856b 	beq.w	80054e4 <_dtoa_r+0xbac>
 8004a0e:	4883      	ldr	r0, [pc, #524]	; (8004c1c <_dtoa_r+0x2e4>)
 8004a10:	6018      	str	r0, [r3, #0]
 8004a12:	1e43      	subs	r3, r0, #1
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	e7df      	b.n	80049d8 <_dtoa_r+0xa0>
 8004a18:	ec4b ab10 	vmov	d0, sl, fp
 8004a1c:	aa10      	add	r2, sp, #64	; 0x40
 8004a1e:	a911      	add	r1, sp, #68	; 0x44
 8004a20:	4620      	mov	r0, r4
 8004a22:	f001 f9b3 	bl	8005d8c <__d2b>
 8004a26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004a2a:	ee08 0a10 	vmov	s16, r0
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	f000 8084 	beq.w	8004b3c <_dtoa_r+0x204>
 8004a34:	ee19 3a90 	vmov	r3, s19
 8004a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004a40:	4656      	mov	r6, sl
 8004a42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004a46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004a4e:	4b74      	ldr	r3, [pc, #464]	; (8004c20 <_dtoa_r+0x2e8>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	4630      	mov	r0, r6
 8004a54:	4639      	mov	r1, r7
 8004a56:	f7fb fc17 	bl	8000288 <__aeabi_dsub>
 8004a5a:	a365      	add	r3, pc, #404	; (adr r3, 8004bf0 <_dtoa_r+0x2b8>)
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f7fb fdca 	bl	80005f8 <__aeabi_dmul>
 8004a64:	a364      	add	r3, pc, #400	; (adr r3, 8004bf8 <_dtoa_r+0x2c0>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fb fc0f 	bl	800028c <__adddf3>
 8004a6e:	4606      	mov	r6, r0
 8004a70:	4628      	mov	r0, r5
 8004a72:	460f      	mov	r7, r1
 8004a74:	f7fb fd56 	bl	8000524 <__aeabi_i2d>
 8004a78:	a361      	add	r3, pc, #388	; (adr r3, 8004c00 <_dtoa_r+0x2c8>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fdbb 	bl	80005f8 <__aeabi_dmul>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4630      	mov	r0, r6
 8004a88:	4639      	mov	r1, r7
 8004a8a:	f7fb fbff 	bl	800028c <__adddf3>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	f7fc f861 	bl	8000b58 <__aeabi_d2iz>
 8004a96:	2200      	movs	r2, #0
 8004a98:	9000      	str	r0, [sp, #0]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fc f81c 	bl	8000adc <__aeabi_dcmplt>
 8004aa4:	b150      	cbz	r0, 8004abc <_dtoa_r+0x184>
 8004aa6:	9800      	ldr	r0, [sp, #0]
 8004aa8:	f7fb fd3c 	bl	8000524 <__aeabi_i2d>
 8004aac:	4632      	mov	r2, r6
 8004aae:	463b      	mov	r3, r7
 8004ab0:	f7fc f80a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ab4:	b910      	cbnz	r0, 8004abc <_dtoa_r+0x184>
 8004ab6:	9b00      	ldr	r3, [sp, #0]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	9b00      	ldr	r3, [sp, #0]
 8004abe:	2b16      	cmp	r3, #22
 8004ac0:	d85a      	bhi.n	8004b78 <_dtoa_r+0x240>
 8004ac2:	9a00      	ldr	r2, [sp, #0]
 8004ac4:	4b57      	ldr	r3, [pc, #348]	; (8004c24 <_dtoa_r+0x2ec>)
 8004ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	ec51 0b19 	vmov	r0, r1, d9
 8004ad2:	f7fc f803 	bl	8000adc <__aeabi_dcmplt>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d050      	beq.n	8004b7c <_dtoa_r+0x244>
 8004ada:	9b00      	ldr	r3, [sp, #0]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ae6:	1b5d      	subs	r5, r3, r5
 8004ae8:	1e6b      	subs	r3, r5, #1
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	bf45      	ittet	mi
 8004aee:	f1c5 0301 	rsbmi	r3, r5, #1
 8004af2:	9304      	strmi	r3, [sp, #16]
 8004af4:	2300      	movpl	r3, #0
 8004af6:	2300      	movmi	r3, #0
 8004af8:	bf4c      	ite	mi
 8004afa:	9305      	strmi	r3, [sp, #20]
 8004afc:	9304      	strpl	r3, [sp, #16]
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db3d      	blt.n	8004b80 <_dtoa_r+0x248>
 8004b04:	9b05      	ldr	r3, [sp, #20]
 8004b06:	9a00      	ldr	r2, [sp, #0]
 8004b08:	920a      	str	r2, [sp, #40]	; 0x28
 8004b0a:	4413      	add	r3, r2
 8004b0c:	9305      	str	r3, [sp, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9307      	str	r3, [sp, #28]
 8004b12:	9b06      	ldr	r3, [sp, #24]
 8004b14:	2b09      	cmp	r3, #9
 8004b16:	f200 8089 	bhi.w	8004c2c <_dtoa_r+0x2f4>
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	bfc4      	itt	gt
 8004b1e:	3b04      	subgt	r3, #4
 8004b20:	9306      	strgt	r3, [sp, #24]
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	f1a3 0302 	sub.w	r3, r3, #2
 8004b28:	bfcc      	ite	gt
 8004b2a:	2500      	movgt	r5, #0
 8004b2c:	2501      	movle	r5, #1
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	f200 8087 	bhi.w	8004c42 <_dtoa_r+0x30a>
 8004b34:	e8df f003 	tbb	[pc, r3]
 8004b38:	59383a2d 	.word	0x59383a2d
 8004b3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004b40:	441d      	add	r5, r3
 8004b42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	bfc1      	itttt	gt
 8004b4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004b52:	fa0b f303 	lslgt.w	r3, fp, r3
 8004b56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b5a:	bfda      	itte	le
 8004b5c:	f1c3 0320 	rsble	r3, r3, #32
 8004b60:	fa06 f003 	lslle.w	r0, r6, r3
 8004b64:	4318      	orrgt	r0, r3
 8004b66:	f7fb fccd 	bl	8000504 <__aeabi_ui2d>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b72:	3d01      	subs	r5, #1
 8004b74:	930e      	str	r3, [sp, #56]	; 0x38
 8004b76:	e76a      	b.n	8004a4e <_dtoa_r+0x116>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7b2      	b.n	8004ae2 <_dtoa_r+0x1aa>
 8004b7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b7e:	e7b1      	b.n	8004ae4 <_dtoa_r+0x1ac>
 8004b80:	9b04      	ldr	r3, [sp, #16]
 8004b82:	9a00      	ldr	r2, [sp, #0]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	9304      	str	r3, [sp, #16]
 8004b88:	4253      	negs	r3, r2
 8004b8a:	9307      	str	r3, [sp, #28]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b90:	e7bf      	b.n	8004b12 <_dtoa_r+0x1da>
 8004b92:	2300      	movs	r3, #0
 8004b94:	9308      	str	r3, [sp, #32]
 8004b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dc55      	bgt.n	8004c48 <_dtoa_r+0x310>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba6:	e00c      	b.n	8004bc2 <_dtoa_r+0x28a>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e7f3      	b.n	8004b94 <_dtoa_r+0x25c>
 8004bac:	2300      	movs	r3, #0
 8004bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb0:	9308      	str	r3, [sp, #32]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	9302      	str	r3, [sp, #8]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	9303      	str	r3, [sp, #12]
 8004bbe:	bfb8      	it	lt
 8004bc0:	2301      	movlt	r3, #1
 8004bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	6042      	str	r2, [r0, #4]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	f102 0614 	add.w	r6, r2, #20
 8004bce:	429e      	cmp	r6, r3
 8004bd0:	6841      	ldr	r1, [r0, #4]
 8004bd2:	d93d      	bls.n	8004c50 <_dtoa_r+0x318>
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 fdb1 	bl	800573c <_Balloc>
 8004bda:	9001      	str	r0, [sp, #4]
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d13b      	bne.n	8004c58 <_dtoa_r+0x320>
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <_dtoa_r+0x2f0>)
 8004be2:	4602      	mov	r2, r0
 8004be4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004be8:	e6c0      	b.n	800496c <_dtoa_r+0x34>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e7df      	b.n	8004bae <_dtoa_r+0x276>
 8004bee:	bf00      	nop
 8004bf0:	636f4361 	.word	0x636f4361
 8004bf4:	3fd287a7 	.word	0x3fd287a7
 8004bf8:	8b60c8b3 	.word	0x8b60c8b3
 8004bfc:	3fc68a28 	.word	0x3fc68a28
 8004c00:	509f79fb 	.word	0x509f79fb
 8004c04:	3fd34413 	.word	0x3fd34413
 8004c08:	08007a8d 	.word	0x08007a8d
 8004c0c:	08007aa4 	.word	0x08007aa4
 8004c10:	7ff00000 	.word	0x7ff00000
 8004c14:	08007a89 	.word	0x08007a89
 8004c18:	08007a80 	.word	0x08007a80
 8004c1c:	08007a5d 	.word	0x08007a5d
 8004c20:	3ff80000 	.word	0x3ff80000
 8004c24:	08007bf8 	.word	0x08007bf8
 8004c28:	08007aff 	.word	0x08007aff
 8004c2c:	2501      	movs	r5, #1
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9306      	str	r3, [sp, #24]
 8004c32:	9508      	str	r5, [sp, #32]
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295
 8004c38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2312      	movs	r3, #18
 8004c40:	e7b0      	b.n	8004ba4 <_dtoa_r+0x26c>
 8004c42:	2301      	movs	r3, #1
 8004c44:	9308      	str	r3, [sp, #32]
 8004c46:	e7f5      	b.n	8004c34 <_dtoa_r+0x2fc>
 8004c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c4e:	e7b8      	b.n	8004bc2 <_dtoa_r+0x28a>
 8004c50:	3101      	adds	r1, #1
 8004c52:	6041      	str	r1, [r0, #4]
 8004c54:	0052      	lsls	r2, r2, #1
 8004c56:	e7b8      	b.n	8004bca <_dtoa_r+0x292>
 8004c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c5a:	9a01      	ldr	r2, [sp, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	2b0e      	cmp	r3, #14
 8004c62:	f200 809d 	bhi.w	8004da0 <_dtoa_r+0x468>
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	f000 809a 	beq.w	8004da0 <_dtoa_r+0x468>
 8004c6c:	9b00      	ldr	r3, [sp, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dd32      	ble.n	8004cd8 <_dtoa_r+0x3a0>
 8004c72:	4ab7      	ldr	r2, [pc, #732]	; (8004f50 <_dtoa_r+0x618>)
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c80:	9b00      	ldr	r3, [sp, #0]
 8004c82:	05d8      	lsls	r0, r3, #23
 8004c84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004c88:	d516      	bpl.n	8004cb8 <_dtoa_r+0x380>
 8004c8a:	4bb2      	ldr	r3, [pc, #712]	; (8004f54 <_dtoa_r+0x61c>)
 8004c8c:	ec51 0b19 	vmov	r0, r1, d9
 8004c90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c94:	f7fb fdda 	bl	800084c <__aeabi_ddiv>
 8004c98:	f007 070f 	and.w	r7, r7, #15
 8004c9c:	4682      	mov	sl, r0
 8004c9e:	468b      	mov	fp, r1
 8004ca0:	2503      	movs	r5, #3
 8004ca2:	4eac      	ldr	r6, [pc, #688]	; (8004f54 <_dtoa_r+0x61c>)
 8004ca4:	b957      	cbnz	r7, 8004cbc <_dtoa_r+0x384>
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	464b      	mov	r3, r9
 8004caa:	4650      	mov	r0, sl
 8004cac:	4659      	mov	r1, fp
 8004cae:	f7fb fdcd 	bl	800084c <__aeabi_ddiv>
 8004cb2:	4682      	mov	sl, r0
 8004cb4:	468b      	mov	fp, r1
 8004cb6:	e028      	b.n	8004d0a <_dtoa_r+0x3d2>
 8004cb8:	2502      	movs	r5, #2
 8004cba:	e7f2      	b.n	8004ca2 <_dtoa_r+0x36a>
 8004cbc:	07f9      	lsls	r1, r7, #31
 8004cbe:	d508      	bpl.n	8004cd2 <_dtoa_r+0x39a>
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cc8:	f7fb fc96 	bl	80005f8 <__aeabi_dmul>
 8004ccc:	3501      	adds	r5, #1
 8004cce:	4680      	mov	r8, r0
 8004cd0:	4689      	mov	r9, r1
 8004cd2:	107f      	asrs	r7, r7, #1
 8004cd4:	3608      	adds	r6, #8
 8004cd6:	e7e5      	b.n	8004ca4 <_dtoa_r+0x36c>
 8004cd8:	f000 809b 	beq.w	8004e12 <_dtoa_r+0x4da>
 8004cdc:	9b00      	ldr	r3, [sp, #0]
 8004cde:	4f9d      	ldr	r7, [pc, #628]	; (8004f54 <_dtoa_r+0x61c>)
 8004ce0:	425e      	negs	r6, r3
 8004ce2:	4b9b      	ldr	r3, [pc, #620]	; (8004f50 <_dtoa_r+0x618>)
 8004ce4:	f006 020f 	and.w	r2, r6, #15
 8004ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	ec51 0b19 	vmov	r0, r1, d9
 8004cf4:	f7fb fc80 	bl	80005f8 <__aeabi_dmul>
 8004cf8:	1136      	asrs	r6, r6, #4
 8004cfa:	4682      	mov	sl, r0
 8004cfc:	468b      	mov	fp, r1
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2502      	movs	r5, #2
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	d17a      	bne.n	8004dfc <_dtoa_r+0x4c4>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d3      	bne.n	8004cb2 <_dtoa_r+0x37a>
 8004d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8082 	beq.w	8004e16 <_dtoa_r+0x4de>
 8004d12:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <_dtoa_r+0x620>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	4650      	mov	r0, sl
 8004d18:	4659      	mov	r1, fp
 8004d1a:	f7fb fedf 	bl	8000adc <__aeabi_dcmplt>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d079      	beq.n	8004e16 <_dtoa_r+0x4de>
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d076      	beq.n	8004e16 <_dtoa_r+0x4de>
 8004d28:	9b02      	ldr	r3, [sp, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dd36      	ble.n	8004d9c <_dtoa_r+0x464>
 8004d2e:	9b00      	ldr	r3, [sp, #0]
 8004d30:	4650      	mov	r0, sl
 8004d32:	4659      	mov	r1, fp
 8004d34:	1e5f      	subs	r7, r3, #1
 8004d36:	2200      	movs	r2, #0
 8004d38:	4b88      	ldr	r3, [pc, #544]	; (8004f5c <_dtoa_r+0x624>)
 8004d3a:	f7fb fc5d 	bl	80005f8 <__aeabi_dmul>
 8004d3e:	9e02      	ldr	r6, [sp, #8]
 8004d40:	4682      	mov	sl, r0
 8004d42:	468b      	mov	fp, r1
 8004d44:	3501      	adds	r5, #1
 8004d46:	4628      	mov	r0, r5
 8004d48:	f7fb fbec 	bl	8000524 <__aeabi_i2d>
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	465b      	mov	r3, fp
 8004d50:	f7fb fc52 	bl	80005f8 <__aeabi_dmul>
 8004d54:	4b82      	ldr	r3, [pc, #520]	; (8004f60 <_dtoa_r+0x628>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	f7fb fa98 	bl	800028c <__adddf3>
 8004d5c:	46d0      	mov	r8, sl
 8004d5e:	46d9      	mov	r9, fp
 8004d60:	4682      	mov	sl, r0
 8004d62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	d158      	bne.n	8004e1c <_dtoa_r+0x4e4>
 8004d6a:	4b7e      	ldr	r3, [pc, #504]	; (8004f64 <_dtoa_r+0x62c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4649      	mov	r1, r9
 8004d72:	f7fb fa89 	bl	8000288 <__aeabi_dsub>
 8004d76:	4652      	mov	r2, sl
 8004d78:	465b      	mov	r3, fp
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	4689      	mov	r9, r1
 8004d7e:	f7fb fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	f040 8295 	bne.w	80052b2 <_dtoa_r+0x97a>
 8004d88:	4652      	mov	r2, sl
 8004d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d8e:	4640      	mov	r0, r8
 8004d90:	4649      	mov	r1, r9
 8004d92:	f7fb fea3 	bl	8000adc <__aeabi_dcmplt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f040 8289 	bne.w	80052ae <_dtoa_r+0x976>
 8004d9c:	ec5b ab19 	vmov	sl, fp, d9
 8004da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f2c0 8148 	blt.w	8005038 <_dtoa_r+0x700>
 8004da8:	9a00      	ldr	r2, [sp, #0]
 8004daa:	2a0e      	cmp	r2, #14
 8004dac:	f300 8144 	bgt.w	8005038 <_dtoa_r+0x700>
 8004db0:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <_dtoa_r+0x618>)
 8004db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004db6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f280 80d5 	bge.w	8004f6c <_dtoa_r+0x634>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f300 80d1 	bgt.w	8004f6c <_dtoa_r+0x634>
 8004dca:	f040 826f 	bne.w	80052ac <_dtoa_r+0x974>
 8004dce:	4b65      	ldr	r3, [pc, #404]	; (8004f64 <_dtoa_r+0x62c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fc0f 	bl	80005f8 <__aeabi_dmul>
 8004dda:	4652      	mov	r2, sl
 8004ddc:	465b      	mov	r3, fp
 8004dde:	f7fb fe91 	bl	8000b04 <__aeabi_dcmpge>
 8004de2:	9e03      	ldr	r6, [sp, #12]
 8004de4:	4637      	mov	r7, r6
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f040 8245 	bne.w	8005276 <_dtoa_r+0x93e>
 8004dec:	9d01      	ldr	r5, [sp, #4]
 8004dee:	2331      	movs	r3, #49	; 0x31
 8004df0:	f805 3b01 	strb.w	r3, [r5], #1
 8004df4:	9b00      	ldr	r3, [sp, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	e240      	b.n	800527e <_dtoa_r+0x946>
 8004dfc:	07f2      	lsls	r2, r6, #31
 8004dfe:	d505      	bpl.n	8004e0c <_dtoa_r+0x4d4>
 8004e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e04:	f7fb fbf8 	bl	80005f8 <__aeabi_dmul>
 8004e08:	3501      	adds	r5, #1
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	1076      	asrs	r6, r6, #1
 8004e0e:	3708      	adds	r7, #8
 8004e10:	e777      	b.n	8004d02 <_dtoa_r+0x3ca>
 8004e12:	2502      	movs	r5, #2
 8004e14:	e779      	b.n	8004d0a <_dtoa_r+0x3d2>
 8004e16:	9f00      	ldr	r7, [sp, #0]
 8004e18:	9e03      	ldr	r6, [sp, #12]
 8004e1a:	e794      	b.n	8004d46 <_dtoa_r+0x40e>
 8004e1c:	9901      	ldr	r1, [sp, #4]
 8004e1e:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <_dtoa_r+0x618>)
 8004e20:	4431      	add	r1, r6
 8004e22:	910d      	str	r1, [sp, #52]	; 0x34
 8004e24:	9908      	ldr	r1, [sp, #32]
 8004e26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d043      	beq.n	8004eba <_dtoa_r+0x582>
 8004e32:	494d      	ldr	r1, [pc, #308]	; (8004f68 <_dtoa_r+0x630>)
 8004e34:	2000      	movs	r0, #0
 8004e36:	f7fb fd09 	bl	800084c <__aeabi_ddiv>
 8004e3a:	4652      	mov	r2, sl
 8004e3c:	465b      	mov	r3, fp
 8004e3e:	f7fb fa23 	bl	8000288 <__aeabi_dsub>
 8004e42:	9d01      	ldr	r5, [sp, #4]
 8004e44:	4682      	mov	sl, r0
 8004e46:	468b      	mov	fp, r1
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f7fb fe84 	bl	8000b58 <__aeabi_d2iz>
 8004e50:	4606      	mov	r6, r0
 8004e52:	f7fb fb67 	bl	8000524 <__aeabi_i2d>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fa13 	bl	8000288 <__aeabi_dsub>
 8004e62:	3630      	adds	r6, #48	; 0x30
 8004e64:	f805 6b01 	strb.w	r6, [r5], #1
 8004e68:	4652      	mov	r2, sl
 8004e6a:	465b      	mov	r3, fp
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	4689      	mov	r9, r1
 8004e70:	f7fb fe34 	bl	8000adc <__aeabi_dcmplt>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d163      	bne.n	8004f40 <_dtoa_r+0x608>
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	4936      	ldr	r1, [pc, #216]	; (8004f58 <_dtoa_r+0x620>)
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7fb fa02 	bl	8000288 <__aeabi_dsub>
 8004e84:	4652      	mov	r2, sl
 8004e86:	465b      	mov	r3, fp
 8004e88:	f7fb fe28 	bl	8000adc <__aeabi_dcmplt>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f040 80b5 	bne.w	8004ffc <_dtoa_r+0x6c4>
 8004e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e94:	429d      	cmp	r5, r3
 8004e96:	d081      	beq.n	8004d9c <_dtoa_r+0x464>
 8004e98:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <_dtoa_r+0x624>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	f7fb fbaa 	bl	80005f8 <__aeabi_dmul>
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <_dtoa_r+0x624>)
 8004ea6:	4682      	mov	sl, r0
 8004ea8:	468b      	mov	fp, r1
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4649      	mov	r1, r9
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f7fb fba2 	bl	80005f8 <__aeabi_dmul>
 8004eb4:	4680      	mov	r8, r0
 8004eb6:	4689      	mov	r9, r1
 8004eb8:	e7c6      	b.n	8004e48 <_dtoa_r+0x510>
 8004eba:	4650      	mov	r0, sl
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	f7fb fb9b 	bl	80005f8 <__aeabi_dmul>
 8004ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec4:	9d01      	ldr	r5, [sp, #4]
 8004ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec8:	4682      	mov	sl, r0
 8004eca:	468b      	mov	fp, r1
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f7fb fe42 	bl	8000b58 <__aeabi_d2iz>
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	f7fb fb25 	bl	8000524 <__aeabi_i2d>
 8004eda:	3630      	adds	r6, #48	; 0x30
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	f7fb f9d0 	bl	8000288 <__aeabi_dsub>
 8004ee8:	f805 6b01 	strb.w	r6, [r5], #1
 8004eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	4689      	mov	r9, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	d124      	bne.n	8004f44 <_dtoa_r+0x60c>
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <_dtoa_r+0x630>)
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	f7fb f9c4 	bl	800028c <__adddf3>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4640      	mov	r0, r8
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	f7fb fe04 	bl	8000b18 <__aeabi_dcmpgt>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d173      	bne.n	8004ffc <_dtoa_r+0x6c4>
 8004f14:	4652      	mov	r2, sl
 8004f16:	465b      	mov	r3, fp
 8004f18:	4913      	ldr	r1, [pc, #76]	; (8004f68 <_dtoa_r+0x630>)
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f7fb f9b4 	bl	8000288 <__aeabi_dsub>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4640      	mov	r0, r8
 8004f26:	4649      	mov	r1, r9
 8004f28:	f7fb fdd8 	bl	8000adc <__aeabi_dcmplt>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f43f af35 	beq.w	8004d9c <_dtoa_r+0x464>
 8004f32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f34:	1e6b      	subs	r3, r5, #1
 8004f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f3c:	2b30      	cmp	r3, #48	; 0x30
 8004f3e:	d0f8      	beq.n	8004f32 <_dtoa_r+0x5fa>
 8004f40:	9700      	str	r7, [sp, #0]
 8004f42:	e049      	b.n	8004fd8 <_dtoa_r+0x6a0>
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <_dtoa_r+0x624>)
 8004f46:	f7fb fb57 	bl	80005f8 <__aeabi_dmul>
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	4689      	mov	r9, r1
 8004f4e:	e7bd      	b.n	8004ecc <_dtoa_r+0x594>
 8004f50:	08007bf8 	.word	0x08007bf8
 8004f54:	08007bd0 	.word	0x08007bd0
 8004f58:	3ff00000 	.word	0x3ff00000
 8004f5c:	40240000 	.word	0x40240000
 8004f60:	401c0000 	.word	0x401c0000
 8004f64:	40140000 	.word	0x40140000
 8004f68:	3fe00000 	.word	0x3fe00000
 8004f6c:	9d01      	ldr	r5, [sp, #4]
 8004f6e:	4656      	mov	r6, sl
 8004f70:	465f      	mov	r7, fp
 8004f72:	4642      	mov	r2, r8
 8004f74:	464b      	mov	r3, r9
 8004f76:	4630      	mov	r0, r6
 8004f78:	4639      	mov	r1, r7
 8004f7a:	f7fb fc67 	bl	800084c <__aeabi_ddiv>
 8004f7e:	f7fb fdeb 	bl	8000b58 <__aeabi_d2iz>
 8004f82:	4682      	mov	sl, r0
 8004f84:	f7fb face 	bl	8000524 <__aeabi_i2d>
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004f9c:	f7fb f974 	bl	8000288 <__aeabi_dsub>
 8004fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8004fa4:	9e01      	ldr	r6, [sp, #4]
 8004fa6:	9f03      	ldr	r7, [sp, #12]
 8004fa8:	1bae      	subs	r6, r5, r6
 8004faa:	42b7      	cmp	r7, r6
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	d135      	bne.n	800501e <_dtoa_r+0x6e6>
 8004fb2:	f7fb f96b 	bl	800028c <__adddf3>
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	f7fb fdab 	bl	8000b18 <__aeabi_dcmpgt>
 8004fc2:	b9d0      	cbnz	r0, 8004ffa <_dtoa_r+0x6c2>
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fd0:	b110      	cbz	r0, 8004fd8 <_dtoa_r+0x6a0>
 8004fd2:	f01a 0f01 	tst.w	sl, #1
 8004fd6:	d110      	bne.n	8004ffa <_dtoa_r+0x6c2>
 8004fd8:	4620      	mov	r0, r4
 8004fda:	ee18 1a10 	vmov	r1, s16
 8004fde:	f000 fbed 	bl	80057bc <_Bfree>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9800      	ldr	r0, [sp, #0]
 8004fe6:	702b      	strb	r3, [r5, #0]
 8004fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fea:	3001      	adds	r0, #1
 8004fec:	6018      	str	r0, [r3, #0]
 8004fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f43f acf1 	beq.w	80049d8 <_dtoa_r+0xa0>
 8004ff6:	601d      	str	r5, [r3, #0]
 8004ff8:	e4ee      	b.n	80049d8 <_dtoa_r+0xa0>
 8004ffa:	9f00      	ldr	r7, [sp, #0]
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	461d      	mov	r5, r3
 8005000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005004:	2a39      	cmp	r2, #57	; 0x39
 8005006:	d106      	bne.n	8005016 <_dtoa_r+0x6de>
 8005008:	9a01      	ldr	r2, [sp, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d1f7      	bne.n	8004ffe <_dtoa_r+0x6c6>
 800500e:	9901      	ldr	r1, [sp, #4]
 8005010:	2230      	movs	r2, #48	; 0x30
 8005012:	3701      	adds	r7, #1
 8005014:	700a      	strb	r2, [r1, #0]
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	3201      	adds	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e790      	b.n	8004f40 <_dtoa_r+0x608>
 800501e:	4ba6      	ldr	r3, [pc, #664]	; (80052b8 <_dtoa_r+0x980>)
 8005020:	2200      	movs	r2, #0
 8005022:	f7fb fae9 	bl	80005f8 <__aeabi_dmul>
 8005026:	2200      	movs	r2, #0
 8005028:	2300      	movs	r3, #0
 800502a:	4606      	mov	r6, r0
 800502c:	460f      	mov	r7, r1
 800502e:	f7fb fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005032:	2800      	cmp	r0, #0
 8005034:	d09d      	beq.n	8004f72 <_dtoa_r+0x63a>
 8005036:	e7cf      	b.n	8004fd8 <_dtoa_r+0x6a0>
 8005038:	9a08      	ldr	r2, [sp, #32]
 800503a:	2a00      	cmp	r2, #0
 800503c:	f000 80d7 	beq.w	80051ee <_dtoa_r+0x8b6>
 8005040:	9a06      	ldr	r2, [sp, #24]
 8005042:	2a01      	cmp	r2, #1
 8005044:	f300 80ba 	bgt.w	80051bc <_dtoa_r+0x884>
 8005048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800504a:	2a00      	cmp	r2, #0
 800504c:	f000 80b2 	beq.w	80051b4 <_dtoa_r+0x87c>
 8005050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005054:	9e07      	ldr	r6, [sp, #28]
 8005056:	9d04      	ldr	r5, [sp, #16]
 8005058:	9a04      	ldr	r2, [sp, #16]
 800505a:	441a      	add	r2, r3
 800505c:	9204      	str	r2, [sp, #16]
 800505e:	9a05      	ldr	r2, [sp, #20]
 8005060:	2101      	movs	r1, #1
 8005062:	441a      	add	r2, r3
 8005064:	4620      	mov	r0, r4
 8005066:	9205      	str	r2, [sp, #20]
 8005068:	f000 fc60 	bl	800592c <__i2b>
 800506c:	4607      	mov	r7, r0
 800506e:	2d00      	cmp	r5, #0
 8005070:	dd0c      	ble.n	800508c <_dtoa_r+0x754>
 8005072:	9b05      	ldr	r3, [sp, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	dd09      	ble.n	800508c <_dtoa_r+0x754>
 8005078:	42ab      	cmp	r3, r5
 800507a:	9a04      	ldr	r2, [sp, #16]
 800507c:	bfa8      	it	ge
 800507e:	462b      	movge	r3, r5
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	9204      	str	r2, [sp, #16]
 8005084:	9a05      	ldr	r2, [sp, #20]
 8005086:	1aed      	subs	r5, r5, r3
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	9305      	str	r3, [sp, #20]
 800508c:	9b07      	ldr	r3, [sp, #28]
 800508e:	b31b      	cbz	r3, 80050d8 <_dtoa_r+0x7a0>
 8005090:	9b08      	ldr	r3, [sp, #32]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80af 	beq.w	80051f6 <_dtoa_r+0x8be>
 8005098:	2e00      	cmp	r6, #0
 800509a:	dd13      	ble.n	80050c4 <_dtoa_r+0x78c>
 800509c:	4639      	mov	r1, r7
 800509e:	4632      	mov	r2, r6
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 fd03 	bl	8005aac <__pow5mult>
 80050a6:	ee18 2a10 	vmov	r2, s16
 80050aa:	4601      	mov	r1, r0
 80050ac:	4607      	mov	r7, r0
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 fc52 	bl	8005958 <__multiply>
 80050b4:	ee18 1a10 	vmov	r1, s16
 80050b8:	4680      	mov	r8, r0
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 fb7e 	bl	80057bc <_Bfree>
 80050c0:	ee08 8a10 	vmov	s16, r8
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	1b9a      	subs	r2, r3, r6
 80050c8:	d006      	beq.n	80050d8 <_dtoa_r+0x7a0>
 80050ca:	ee18 1a10 	vmov	r1, s16
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 fcec 	bl	8005aac <__pow5mult>
 80050d4:	ee08 0a10 	vmov	s16, r0
 80050d8:	2101      	movs	r1, #1
 80050da:	4620      	mov	r0, r4
 80050dc:	f000 fc26 	bl	800592c <__i2b>
 80050e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	4606      	mov	r6, r0
 80050e6:	f340 8088 	ble.w	80051fa <_dtoa_r+0x8c2>
 80050ea:	461a      	mov	r2, r3
 80050ec:	4601      	mov	r1, r0
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 fcdc 	bl	8005aac <__pow5mult>
 80050f4:	9b06      	ldr	r3, [sp, #24]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	4606      	mov	r6, r0
 80050fa:	f340 8081 	ble.w	8005200 <_dtoa_r+0x8c8>
 80050fe:	f04f 0800 	mov.w	r8, #0
 8005102:	6933      	ldr	r3, [r6, #16]
 8005104:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005108:	6918      	ldr	r0, [r3, #16]
 800510a:	f000 fbbf 	bl	800588c <__hi0bits>
 800510e:	f1c0 0020 	rsb	r0, r0, #32
 8005112:	9b05      	ldr	r3, [sp, #20]
 8005114:	4418      	add	r0, r3
 8005116:	f010 001f 	ands.w	r0, r0, #31
 800511a:	f000 8092 	beq.w	8005242 <_dtoa_r+0x90a>
 800511e:	f1c0 0320 	rsb	r3, r0, #32
 8005122:	2b04      	cmp	r3, #4
 8005124:	f340 808a 	ble.w	800523c <_dtoa_r+0x904>
 8005128:	f1c0 001c 	rsb	r0, r0, #28
 800512c:	9b04      	ldr	r3, [sp, #16]
 800512e:	4403      	add	r3, r0
 8005130:	9304      	str	r3, [sp, #16]
 8005132:	9b05      	ldr	r3, [sp, #20]
 8005134:	4403      	add	r3, r0
 8005136:	4405      	add	r5, r0
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	9b04      	ldr	r3, [sp, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	dd07      	ble.n	8005150 <_dtoa_r+0x818>
 8005140:	ee18 1a10 	vmov	r1, s16
 8005144:	461a      	mov	r2, r3
 8005146:	4620      	mov	r0, r4
 8005148:	f000 fd0a 	bl	8005b60 <__lshift>
 800514c:	ee08 0a10 	vmov	s16, r0
 8005150:	9b05      	ldr	r3, [sp, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dd05      	ble.n	8005162 <_dtoa_r+0x82a>
 8005156:	4631      	mov	r1, r6
 8005158:	461a      	mov	r2, r3
 800515a:	4620      	mov	r0, r4
 800515c:	f000 fd00 	bl	8005b60 <__lshift>
 8005160:	4606      	mov	r6, r0
 8005162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d06e      	beq.n	8005246 <_dtoa_r+0x90e>
 8005168:	ee18 0a10 	vmov	r0, s16
 800516c:	4631      	mov	r1, r6
 800516e:	f000 fd67 	bl	8005c40 <__mcmp>
 8005172:	2800      	cmp	r0, #0
 8005174:	da67      	bge.n	8005246 <_dtoa_r+0x90e>
 8005176:	9b00      	ldr	r3, [sp, #0]
 8005178:	3b01      	subs	r3, #1
 800517a:	ee18 1a10 	vmov	r1, s16
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	220a      	movs	r2, #10
 8005182:	2300      	movs	r3, #0
 8005184:	4620      	mov	r0, r4
 8005186:	f000 fb3b 	bl	8005800 <__multadd>
 800518a:	9b08      	ldr	r3, [sp, #32]
 800518c:	ee08 0a10 	vmov	s16, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 81b1 	beq.w	80054f8 <_dtoa_r+0xbc0>
 8005196:	2300      	movs	r3, #0
 8005198:	4639      	mov	r1, r7
 800519a:	220a      	movs	r2, #10
 800519c:	4620      	mov	r0, r4
 800519e:	f000 fb2f 	bl	8005800 <__multadd>
 80051a2:	9b02      	ldr	r3, [sp, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	4607      	mov	r7, r0
 80051a8:	f300 808e 	bgt.w	80052c8 <_dtoa_r+0x990>
 80051ac:	9b06      	ldr	r3, [sp, #24]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	dc51      	bgt.n	8005256 <_dtoa_r+0x91e>
 80051b2:	e089      	b.n	80052c8 <_dtoa_r+0x990>
 80051b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051ba:	e74b      	b.n	8005054 <_dtoa_r+0x71c>
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	1e5e      	subs	r6, r3, #1
 80051c0:	9b07      	ldr	r3, [sp, #28]
 80051c2:	42b3      	cmp	r3, r6
 80051c4:	bfbf      	itttt	lt
 80051c6:	9b07      	ldrlt	r3, [sp, #28]
 80051c8:	9607      	strlt	r6, [sp, #28]
 80051ca:	1af2      	sublt	r2, r6, r3
 80051cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80051ce:	bfb6      	itet	lt
 80051d0:	189b      	addlt	r3, r3, r2
 80051d2:	1b9e      	subge	r6, r3, r6
 80051d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	bfb8      	it	lt
 80051da:	2600      	movlt	r6, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfb7      	itett	lt
 80051e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80051e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80051e8:	1a9d      	sublt	r5, r3, r2
 80051ea:	2300      	movlt	r3, #0
 80051ec:	e734      	b.n	8005058 <_dtoa_r+0x720>
 80051ee:	9e07      	ldr	r6, [sp, #28]
 80051f0:	9d04      	ldr	r5, [sp, #16]
 80051f2:	9f08      	ldr	r7, [sp, #32]
 80051f4:	e73b      	b.n	800506e <_dtoa_r+0x736>
 80051f6:	9a07      	ldr	r2, [sp, #28]
 80051f8:	e767      	b.n	80050ca <_dtoa_r+0x792>
 80051fa:	9b06      	ldr	r3, [sp, #24]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	dc18      	bgt.n	8005232 <_dtoa_r+0x8fa>
 8005200:	f1ba 0f00 	cmp.w	sl, #0
 8005204:	d115      	bne.n	8005232 <_dtoa_r+0x8fa>
 8005206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800520a:	b993      	cbnz	r3, 8005232 <_dtoa_r+0x8fa>
 800520c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005210:	0d1b      	lsrs	r3, r3, #20
 8005212:	051b      	lsls	r3, r3, #20
 8005214:	b183      	cbz	r3, 8005238 <_dtoa_r+0x900>
 8005216:	9b04      	ldr	r3, [sp, #16]
 8005218:	3301      	adds	r3, #1
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	9b05      	ldr	r3, [sp, #20]
 800521e:	3301      	adds	r3, #1
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	f04f 0801 	mov.w	r8, #1
 8005226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	f47f af6a 	bne.w	8005102 <_dtoa_r+0x7ca>
 800522e:	2001      	movs	r0, #1
 8005230:	e76f      	b.n	8005112 <_dtoa_r+0x7da>
 8005232:	f04f 0800 	mov.w	r8, #0
 8005236:	e7f6      	b.n	8005226 <_dtoa_r+0x8ee>
 8005238:	4698      	mov	r8, r3
 800523a:	e7f4      	b.n	8005226 <_dtoa_r+0x8ee>
 800523c:	f43f af7d 	beq.w	800513a <_dtoa_r+0x802>
 8005240:	4618      	mov	r0, r3
 8005242:	301c      	adds	r0, #28
 8005244:	e772      	b.n	800512c <_dtoa_r+0x7f4>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dc37      	bgt.n	80052bc <_dtoa_r+0x984>
 800524c:	9b06      	ldr	r3, [sp, #24]
 800524e:	2b02      	cmp	r3, #2
 8005250:	dd34      	ble.n	80052bc <_dtoa_r+0x984>
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	9b02      	ldr	r3, [sp, #8]
 8005258:	b96b      	cbnz	r3, 8005276 <_dtoa_r+0x93e>
 800525a:	4631      	mov	r1, r6
 800525c:	2205      	movs	r2, #5
 800525e:	4620      	mov	r0, r4
 8005260:	f000 face 	bl	8005800 <__multadd>
 8005264:	4601      	mov	r1, r0
 8005266:	4606      	mov	r6, r0
 8005268:	ee18 0a10 	vmov	r0, s16
 800526c:	f000 fce8 	bl	8005c40 <__mcmp>
 8005270:	2800      	cmp	r0, #0
 8005272:	f73f adbb 	bgt.w	8004dec <_dtoa_r+0x4b4>
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	9d01      	ldr	r5, [sp, #4]
 800527a:	43db      	mvns	r3, r3
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	4631      	mov	r1, r6
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fa99 	bl	80057bc <_Bfree>
 800528a:	2f00      	cmp	r7, #0
 800528c:	f43f aea4 	beq.w	8004fd8 <_dtoa_r+0x6a0>
 8005290:	f1b8 0f00 	cmp.w	r8, #0
 8005294:	d005      	beq.n	80052a2 <_dtoa_r+0x96a>
 8005296:	45b8      	cmp	r8, r7
 8005298:	d003      	beq.n	80052a2 <_dtoa_r+0x96a>
 800529a:	4641      	mov	r1, r8
 800529c:	4620      	mov	r0, r4
 800529e:	f000 fa8d 	bl	80057bc <_Bfree>
 80052a2:	4639      	mov	r1, r7
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 fa89 	bl	80057bc <_Bfree>
 80052aa:	e695      	b.n	8004fd8 <_dtoa_r+0x6a0>
 80052ac:	2600      	movs	r6, #0
 80052ae:	4637      	mov	r7, r6
 80052b0:	e7e1      	b.n	8005276 <_dtoa_r+0x93e>
 80052b2:	9700      	str	r7, [sp, #0]
 80052b4:	4637      	mov	r7, r6
 80052b6:	e599      	b.n	8004dec <_dtoa_r+0x4b4>
 80052b8:	40240000 	.word	0x40240000
 80052bc:	9b08      	ldr	r3, [sp, #32]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80ca 	beq.w	8005458 <_dtoa_r+0xb20>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	dd05      	ble.n	80052d8 <_dtoa_r+0x9a0>
 80052cc:	4639      	mov	r1, r7
 80052ce:	462a      	mov	r2, r5
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fc45 	bl	8005b60 <__lshift>
 80052d6:	4607      	mov	r7, r0
 80052d8:	f1b8 0f00 	cmp.w	r8, #0
 80052dc:	d05b      	beq.n	8005396 <_dtoa_r+0xa5e>
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fa2b 	bl	800573c <_Balloc>
 80052e6:	4605      	mov	r5, r0
 80052e8:	b928      	cbnz	r0, 80052f6 <_dtoa_r+0x9be>
 80052ea:	4b87      	ldr	r3, [pc, #540]	; (8005508 <_dtoa_r+0xbd0>)
 80052ec:	4602      	mov	r2, r0
 80052ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80052f2:	f7ff bb3b 	b.w	800496c <_dtoa_r+0x34>
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	3202      	adds	r2, #2
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	f107 010c 	add.w	r1, r7, #12
 8005300:	300c      	adds	r0, #12
 8005302:	f000 fa0d 	bl	8005720 <memcpy>
 8005306:	2201      	movs	r2, #1
 8005308:	4629      	mov	r1, r5
 800530a:	4620      	mov	r0, r4
 800530c:	f000 fc28 	bl	8005b60 <__lshift>
 8005310:	9b01      	ldr	r3, [sp, #4]
 8005312:	f103 0901 	add.w	r9, r3, #1
 8005316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800531a:	4413      	add	r3, r2
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	f00a 0301 	and.w	r3, sl, #1
 8005322:	46b8      	mov	r8, r7
 8005324:	9304      	str	r3, [sp, #16]
 8005326:	4607      	mov	r7, r0
 8005328:	4631      	mov	r1, r6
 800532a:	ee18 0a10 	vmov	r0, s16
 800532e:	f7ff fa75 	bl	800481c <quorem>
 8005332:	4641      	mov	r1, r8
 8005334:	9002      	str	r0, [sp, #8]
 8005336:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800533a:	ee18 0a10 	vmov	r0, s16
 800533e:	f000 fc7f 	bl	8005c40 <__mcmp>
 8005342:	463a      	mov	r2, r7
 8005344:	9003      	str	r0, [sp, #12]
 8005346:	4631      	mov	r1, r6
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fc95 	bl	8005c78 <__mdiff>
 800534e:	68c2      	ldr	r2, [r0, #12]
 8005350:	f109 3bff 	add.w	fp, r9, #4294967295
 8005354:	4605      	mov	r5, r0
 8005356:	bb02      	cbnz	r2, 800539a <_dtoa_r+0xa62>
 8005358:	4601      	mov	r1, r0
 800535a:	ee18 0a10 	vmov	r0, s16
 800535e:	f000 fc6f 	bl	8005c40 <__mcmp>
 8005362:	4602      	mov	r2, r0
 8005364:	4629      	mov	r1, r5
 8005366:	4620      	mov	r0, r4
 8005368:	9207      	str	r2, [sp, #28]
 800536a:	f000 fa27 	bl	80057bc <_Bfree>
 800536e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005372:	ea43 0102 	orr.w	r1, r3, r2
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	430b      	orrs	r3, r1
 800537a:	464d      	mov	r5, r9
 800537c:	d10f      	bne.n	800539e <_dtoa_r+0xa66>
 800537e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005382:	d02a      	beq.n	80053da <_dtoa_r+0xaa2>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dd02      	ble.n	8005390 <_dtoa_r+0xa58>
 800538a:	9b02      	ldr	r3, [sp, #8]
 800538c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005390:	f88b a000 	strb.w	sl, [fp]
 8005394:	e775      	b.n	8005282 <_dtoa_r+0x94a>
 8005396:	4638      	mov	r0, r7
 8005398:	e7ba      	b.n	8005310 <_dtoa_r+0x9d8>
 800539a:	2201      	movs	r2, #1
 800539c:	e7e2      	b.n	8005364 <_dtoa_r+0xa2c>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	db04      	blt.n	80053ae <_dtoa_r+0xa76>
 80053a4:	9906      	ldr	r1, [sp, #24]
 80053a6:	430b      	orrs	r3, r1
 80053a8:	9904      	ldr	r1, [sp, #16]
 80053aa:	430b      	orrs	r3, r1
 80053ac:	d122      	bne.n	80053f4 <_dtoa_r+0xabc>
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	ddee      	ble.n	8005390 <_dtoa_r+0xa58>
 80053b2:	ee18 1a10 	vmov	r1, s16
 80053b6:	2201      	movs	r2, #1
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fbd1 	bl	8005b60 <__lshift>
 80053be:	4631      	mov	r1, r6
 80053c0:	ee08 0a10 	vmov	s16, r0
 80053c4:	f000 fc3c 	bl	8005c40 <__mcmp>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	dc03      	bgt.n	80053d4 <_dtoa_r+0xa9c>
 80053cc:	d1e0      	bne.n	8005390 <_dtoa_r+0xa58>
 80053ce:	f01a 0f01 	tst.w	sl, #1
 80053d2:	d0dd      	beq.n	8005390 <_dtoa_r+0xa58>
 80053d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053d8:	d1d7      	bne.n	800538a <_dtoa_r+0xa52>
 80053da:	2339      	movs	r3, #57	; 0x39
 80053dc:	f88b 3000 	strb.w	r3, [fp]
 80053e0:	462b      	mov	r3, r5
 80053e2:	461d      	mov	r5, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053ea:	2a39      	cmp	r2, #57	; 0x39
 80053ec:	d071      	beq.n	80054d2 <_dtoa_r+0xb9a>
 80053ee:	3201      	adds	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e746      	b.n	8005282 <_dtoa_r+0x94a>
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	dd07      	ble.n	8005408 <_dtoa_r+0xad0>
 80053f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053fc:	d0ed      	beq.n	80053da <_dtoa_r+0xaa2>
 80053fe:	f10a 0301 	add.w	r3, sl, #1
 8005402:	f88b 3000 	strb.w	r3, [fp]
 8005406:	e73c      	b.n	8005282 <_dtoa_r+0x94a>
 8005408:	9b05      	ldr	r3, [sp, #20]
 800540a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800540e:	4599      	cmp	r9, r3
 8005410:	d047      	beq.n	80054a2 <_dtoa_r+0xb6a>
 8005412:	ee18 1a10 	vmov	r1, s16
 8005416:	2300      	movs	r3, #0
 8005418:	220a      	movs	r2, #10
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f9f0 	bl	8005800 <__multadd>
 8005420:	45b8      	cmp	r8, r7
 8005422:	ee08 0a10 	vmov	s16, r0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f04f 020a 	mov.w	r2, #10
 800542e:	4641      	mov	r1, r8
 8005430:	4620      	mov	r0, r4
 8005432:	d106      	bne.n	8005442 <_dtoa_r+0xb0a>
 8005434:	f000 f9e4 	bl	8005800 <__multadd>
 8005438:	4680      	mov	r8, r0
 800543a:	4607      	mov	r7, r0
 800543c:	f109 0901 	add.w	r9, r9, #1
 8005440:	e772      	b.n	8005328 <_dtoa_r+0x9f0>
 8005442:	f000 f9dd 	bl	8005800 <__multadd>
 8005446:	4639      	mov	r1, r7
 8005448:	4680      	mov	r8, r0
 800544a:	2300      	movs	r3, #0
 800544c:	220a      	movs	r2, #10
 800544e:	4620      	mov	r0, r4
 8005450:	f000 f9d6 	bl	8005800 <__multadd>
 8005454:	4607      	mov	r7, r0
 8005456:	e7f1      	b.n	800543c <_dtoa_r+0xb04>
 8005458:	9b03      	ldr	r3, [sp, #12]
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	9d01      	ldr	r5, [sp, #4]
 800545e:	ee18 0a10 	vmov	r0, s16
 8005462:	4631      	mov	r1, r6
 8005464:	f7ff f9da 	bl	800481c <quorem>
 8005468:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800546c:	9b01      	ldr	r3, [sp, #4]
 800546e:	f805 ab01 	strb.w	sl, [r5], #1
 8005472:	1aea      	subs	r2, r5, r3
 8005474:	9b02      	ldr	r3, [sp, #8]
 8005476:	4293      	cmp	r3, r2
 8005478:	dd09      	ble.n	800548e <_dtoa_r+0xb56>
 800547a:	ee18 1a10 	vmov	r1, s16
 800547e:	2300      	movs	r3, #0
 8005480:	220a      	movs	r2, #10
 8005482:	4620      	mov	r0, r4
 8005484:	f000 f9bc 	bl	8005800 <__multadd>
 8005488:	ee08 0a10 	vmov	s16, r0
 800548c:	e7e7      	b.n	800545e <_dtoa_r+0xb26>
 800548e:	9b02      	ldr	r3, [sp, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	bfc8      	it	gt
 8005494:	461d      	movgt	r5, r3
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	bfd8      	it	le
 800549a:	2501      	movle	r5, #1
 800549c:	441d      	add	r5, r3
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	ee18 1a10 	vmov	r1, s16
 80054a6:	2201      	movs	r2, #1
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fb59 	bl	8005b60 <__lshift>
 80054ae:	4631      	mov	r1, r6
 80054b0:	ee08 0a10 	vmov	s16, r0
 80054b4:	f000 fbc4 	bl	8005c40 <__mcmp>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	dc91      	bgt.n	80053e0 <_dtoa_r+0xaa8>
 80054bc:	d102      	bne.n	80054c4 <_dtoa_r+0xb8c>
 80054be:	f01a 0f01 	tst.w	sl, #1
 80054c2:	d18d      	bne.n	80053e0 <_dtoa_r+0xaa8>
 80054c4:	462b      	mov	r3, r5
 80054c6:	461d      	mov	r5, r3
 80054c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054cc:	2a30      	cmp	r2, #48	; 0x30
 80054ce:	d0fa      	beq.n	80054c6 <_dtoa_r+0xb8e>
 80054d0:	e6d7      	b.n	8005282 <_dtoa_r+0x94a>
 80054d2:	9a01      	ldr	r2, [sp, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d184      	bne.n	80053e2 <_dtoa_r+0xaaa>
 80054d8:	9b00      	ldr	r3, [sp, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2331      	movs	r3, #49	; 0x31
 80054e0:	7013      	strb	r3, [r2, #0]
 80054e2:	e6ce      	b.n	8005282 <_dtoa_r+0x94a>
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <_dtoa_r+0xbd4>)
 80054e6:	f7ff ba95 	b.w	8004a14 <_dtoa_r+0xdc>
 80054ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f47f aa6e 	bne.w	80049ce <_dtoa_r+0x96>
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <_dtoa_r+0xbd8>)
 80054f4:	f7ff ba8e 	b.w	8004a14 <_dtoa_r+0xdc>
 80054f8:	9b02      	ldr	r3, [sp, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dcae      	bgt.n	800545c <_dtoa_r+0xb24>
 80054fe:	9b06      	ldr	r3, [sp, #24]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f73f aea8 	bgt.w	8005256 <_dtoa_r+0x91e>
 8005506:	e7a9      	b.n	800545c <_dtoa_r+0xb24>
 8005508:	08007aff 	.word	0x08007aff
 800550c:	08007a5c 	.word	0x08007a5c
 8005510:	08007a80 	.word	0x08007a80

08005514 <std>:
 8005514:	2300      	movs	r3, #0
 8005516:	b510      	push	{r4, lr}
 8005518:	4604      	mov	r4, r0
 800551a:	e9c0 3300 	strd	r3, r3, [r0]
 800551e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005522:	6083      	str	r3, [r0, #8]
 8005524:	8181      	strh	r1, [r0, #12]
 8005526:	6643      	str	r3, [r0, #100]	; 0x64
 8005528:	81c2      	strh	r2, [r0, #14]
 800552a:	6183      	str	r3, [r0, #24]
 800552c:	4619      	mov	r1, r3
 800552e:	2208      	movs	r2, #8
 8005530:	305c      	adds	r0, #92	; 0x5c
 8005532:	f7fe fce9 	bl	8003f08 <memset>
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <std+0x38>)
 8005538:	6263      	str	r3, [r4, #36]	; 0x24
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <std+0x3c>)
 800553c:	62a3      	str	r3, [r4, #40]	; 0x28
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <std+0x40>)
 8005540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <std+0x44>)
 8005544:	6224      	str	r4, [r4, #32]
 8005546:	6323      	str	r3, [r4, #48]	; 0x30
 8005548:	bd10      	pop	{r4, pc}
 800554a:	bf00      	nop
 800554c:	08006305 	.word	0x08006305
 8005550:	08006327 	.word	0x08006327
 8005554:	0800635f 	.word	0x0800635f
 8005558:	08006383 	.word	0x08006383

0800555c <_cleanup_r>:
 800555c:	4901      	ldr	r1, [pc, #4]	; (8005564 <_cleanup_r+0x8>)
 800555e:	f000 b8af 	b.w	80056c0 <_fwalk_reent>
 8005562:	bf00      	nop
 8005564:	08006699 	.word	0x08006699

08005568 <__sfmoreglue>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	2268      	movs	r2, #104	; 0x68
 800556c:	1e4d      	subs	r5, r1, #1
 800556e:	4355      	muls	r5, r2
 8005570:	460e      	mov	r6, r1
 8005572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005576:	f000 fce7 	bl	8005f48 <_malloc_r>
 800557a:	4604      	mov	r4, r0
 800557c:	b140      	cbz	r0, 8005590 <__sfmoreglue+0x28>
 800557e:	2100      	movs	r1, #0
 8005580:	e9c0 1600 	strd	r1, r6, [r0]
 8005584:	300c      	adds	r0, #12
 8005586:	60a0      	str	r0, [r4, #8]
 8005588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800558c:	f7fe fcbc 	bl	8003f08 <memset>
 8005590:	4620      	mov	r0, r4
 8005592:	bd70      	pop	{r4, r5, r6, pc}

08005594 <__sfp_lock_acquire>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__sfp_lock_acquire+0x8>)
 8005596:	f000 b8b8 	b.w	800570a <__retarget_lock_acquire_recursive>
 800559a:	bf00      	nop
 800559c:	20000395 	.word	0x20000395

080055a0 <__sfp_lock_release>:
 80055a0:	4801      	ldr	r0, [pc, #4]	; (80055a8 <__sfp_lock_release+0x8>)
 80055a2:	f000 b8b3 	b.w	800570c <__retarget_lock_release_recursive>
 80055a6:	bf00      	nop
 80055a8:	20000395 	.word	0x20000395

080055ac <__sinit_lock_acquire>:
 80055ac:	4801      	ldr	r0, [pc, #4]	; (80055b4 <__sinit_lock_acquire+0x8>)
 80055ae:	f000 b8ac 	b.w	800570a <__retarget_lock_acquire_recursive>
 80055b2:	bf00      	nop
 80055b4:	20000396 	.word	0x20000396

080055b8 <__sinit_lock_release>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__sinit_lock_release+0x8>)
 80055ba:	f000 b8a7 	b.w	800570c <__retarget_lock_release_recursive>
 80055be:	bf00      	nop
 80055c0:	20000396 	.word	0x20000396

080055c4 <__sinit>:
 80055c4:	b510      	push	{r4, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	f7ff fff0 	bl	80055ac <__sinit_lock_acquire>
 80055cc:	69a3      	ldr	r3, [r4, #24]
 80055ce:	b11b      	cbz	r3, 80055d8 <__sinit+0x14>
 80055d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d4:	f7ff bff0 	b.w	80055b8 <__sinit_lock_release>
 80055d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055dc:	6523      	str	r3, [r4, #80]	; 0x50
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <__sinit+0x68>)
 80055e0:	4a13      	ldr	r2, [pc, #76]	; (8005630 <__sinit+0x6c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80055e6:	42a3      	cmp	r3, r4
 80055e8:	bf04      	itt	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	61a3      	streq	r3, [r4, #24]
 80055ee:	4620      	mov	r0, r4
 80055f0:	f000 f820 	bl	8005634 <__sfp>
 80055f4:	6060      	str	r0, [r4, #4]
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 f81c 	bl	8005634 <__sfp>
 80055fc:	60a0      	str	r0, [r4, #8]
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 f818 	bl	8005634 <__sfp>
 8005604:	2200      	movs	r2, #0
 8005606:	60e0      	str	r0, [r4, #12]
 8005608:	2104      	movs	r1, #4
 800560a:	6860      	ldr	r0, [r4, #4]
 800560c:	f7ff ff82 	bl	8005514 <std>
 8005610:	68a0      	ldr	r0, [r4, #8]
 8005612:	2201      	movs	r2, #1
 8005614:	2109      	movs	r1, #9
 8005616:	f7ff ff7d 	bl	8005514 <std>
 800561a:	68e0      	ldr	r0, [r4, #12]
 800561c:	2202      	movs	r2, #2
 800561e:	2112      	movs	r1, #18
 8005620:	f7ff ff78 	bl	8005514 <std>
 8005624:	2301      	movs	r3, #1
 8005626:	61a3      	str	r3, [r4, #24]
 8005628:	e7d2      	b.n	80055d0 <__sinit+0xc>
 800562a:	bf00      	nop
 800562c:	08007a48 	.word	0x08007a48
 8005630:	0800555d 	.word	0x0800555d

08005634 <__sfp>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	4607      	mov	r7, r0
 8005638:	f7ff ffac 	bl	8005594 <__sfp_lock_acquire>
 800563c:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <__sfp+0x84>)
 800563e:	681e      	ldr	r6, [r3, #0]
 8005640:	69b3      	ldr	r3, [r6, #24]
 8005642:	b913      	cbnz	r3, 800564a <__sfp+0x16>
 8005644:	4630      	mov	r0, r6
 8005646:	f7ff ffbd 	bl	80055c4 <__sinit>
 800564a:	3648      	adds	r6, #72	; 0x48
 800564c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005650:	3b01      	subs	r3, #1
 8005652:	d503      	bpl.n	800565c <__sfp+0x28>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	b30b      	cbz	r3, 800569c <__sfp+0x68>
 8005658:	6836      	ldr	r6, [r6, #0]
 800565a:	e7f7      	b.n	800564c <__sfp+0x18>
 800565c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005660:	b9d5      	cbnz	r5, 8005698 <__sfp+0x64>
 8005662:	4b16      	ldr	r3, [pc, #88]	; (80056bc <__sfp+0x88>)
 8005664:	60e3      	str	r3, [r4, #12]
 8005666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800566a:	6665      	str	r5, [r4, #100]	; 0x64
 800566c:	f000 f84c 	bl	8005708 <__retarget_lock_init_recursive>
 8005670:	f7ff ff96 	bl	80055a0 <__sfp_lock_release>
 8005674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800567c:	6025      	str	r5, [r4, #0]
 800567e:	61a5      	str	r5, [r4, #24]
 8005680:	2208      	movs	r2, #8
 8005682:	4629      	mov	r1, r5
 8005684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005688:	f7fe fc3e 	bl	8003f08 <memset>
 800568c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005694:	4620      	mov	r0, r4
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005698:	3468      	adds	r4, #104	; 0x68
 800569a:	e7d9      	b.n	8005650 <__sfp+0x1c>
 800569c:	2104      	movs	r1, #4
 800569e:	4638      	mov	r0, r7
 80056a0:	f7ff ff62 	bl	8005568 <__sfmoreglue>
 80056a4:	4604      	mov	r4, r0
 80056a6:	6030      	str	r0, [r6, #0]
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d1d5      	bne.n	8005658 <__sfp+0x24>
 80056ac:	f7ff ff78 	bl	80055a0 <__sfp_lock_release>
 80056b0:	230c      	movs	r3, #12
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	e7ee      	b.n	8005694 <__sfp+0x60>
 80056b6:	bf00      	nop
 80056b8:	08007a48 	.word	0x08007a48
 80056bc:	ffff0001 	.word	0xffff0001

080056c0 <_fwalk_reent>:
 80056c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	4606      	mov	r6, r0
 80056c6:	4688      	mov	r8, r1
 80056c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056cc:	2700      	movs	r7, #0
 80056ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056d2:	f1b9 0901 	subs.w	r9, r9, #1
 80056d6:	d505      	bpl.n	80056e4 <_fwalk_reent+0x24>
 80056d8:	6824      	ldr	r4, [r4, #0]
 80056da:	2c00      	cmp	r4, #0
 80056dc:	d1f7      	bne.n	80056ce <_fwalk_reent+0xe>
 80056de:	4638      	mov	r0, r7
 80056e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e4:	89ab      	ldrh	r3, [r5, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d907      	bls.n	80056fa <_fwalk_reent+0x3a>
 80056ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ee:	3301      	adds	r3, #1
 80056f0:	d003      	beq.n	80056fa <_fwalk_reent+0x3a>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	47c0      	blx	r8
 80056f8:	4307      	orrs	r7, r0
 80056fa:	3568      	adds	r5, #104	; 0x68
 80056fc:	e7e9      	b.n	80056d2 <_fwalk_reent+0x12>
	...

08005700 <_localeconv_r>:
 8005700:	4800      	ldr	r0, [pc, #0]	; (8005704 <_localeconv_r+0x4>)
 8005702:	4770      	bx	lr
 8005704:	200001a8 	.word	0x200001a8

08005708 <__retarget_lock_init_recursive>:
 8005708:	4770      	bx	lr

0800570a <__retarget_lock_acquire_recursive>:
 800570a:	4770      	bx	lr

0800570c <__retarget_lock_release_recursive>:
 800570c:	4770      	bx	lr
	...

08005710 <malloc>:
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <malloc+0xc>)
 8005712:	4601      	mov	r1, r0
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	f000 bc17 	b.w	8005f48 <_malloc_r>
 800571a:	bf00      	nop
 800571c:	20000054 	.word	0x20000054

08005720 <memcpy>:
 8005720:	440a      	add	r2, r1
 8005722:	4291      	cmp	r1, r2
 8005724:	f100 33ff 	add.w	r3, r0, #4294967295
 8005728:	d100      	bne.n	800572c <memcpy+0xc>
 800572a:	4770      	bx	lr
 800572c:	b510      	push	{r4, lr}
 800572e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005736:	4291      	cmp	r1, r2
 8005738:	d1f9      	bne.n	800572e <memcpy+0xe>
 800573a:	bd10      	pop	{r4, pc}

0800573c <_Balloc>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005740:	4604      	mov	r4, r0
 8005742:	460d      	mov	r5, r1
 8005744:	b976      	cbnz	r6, 8005764 <_Balloc+0x28>
 8005746:	2010      	movs	r0, #16
 8005748:	f7ff ffe2 	bl	8005710 <malloc>
 800574c:	4602      	mov	r2, r0
 800574e:	6260      	str	r0, [r4, #36]	; 0x24
 8005750:	b920      	cbnz	r0, 800575c <_Balloc+0x20>
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <_Balloc+0x78>)
 8005754:	4818      	ldr	r0, [pc, #96]	; (80057b8 <_Balloc+0x7c>)
 8005756:	2166      	movs	r1, #102	; 0x66
 8005758:	f000 feea 	bl	8006530 <__assert_func>
 800575c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005760:	6006      	str	r6, [r0, #0]
 8005762:	60c6      	str	r6, [r0, #12]
 8005764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005766:	68f3      	ldr	r3, [r6, #12]
 8005768:	b183      	cbz	r3, 800578c <_Balloc+0x50>
 800576a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005772:	b9b8      	cbnz	r0, 80057a4 <_Balloc+0x68>
 8005774:	2101      	movs	r1, #1
 8005776:	fa01 f605 	lsl.w	r6, r1, r5
 800577a:	1d72      	adds	r2, r6, #5
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	4620      	mov	r0, r4
 8005780:	f000 fb60 	bl	8005e44 <_calloc_r>
 8005784:	b160      	cbz	r0, 80057a0 <_Balloc+0x64>
 8005786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800578a:	e00e      	b.n	80057aa <_Balloc+0x6e>
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	2104      	movs	r1, #4
 8005790:	4620      	mov	r0, r4
 8005792:	f000 fb57 	bl	8005e44 <_calloc_r>
 8005796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005798:	60f0      	str	r0, [r6, #12]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e4      	bne.n	800576a <_Balloc+0x2e>
 80057a0:	2000      	movs	r0, #0
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	6802      	ldr	r2, [r0, #0]
 80057a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057aa:	2300      	movs	r3, #0
 80057ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057b0:	e7f7      	b.n	80057a2 <_Balloc+0x66>
 80057b2:	bf00      	nop
 80057b4:	08007a8d 	.word	0x08007a8d
 80057b8:	08007b70 	.word	0x08007b70

080057bc <_Bfree>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057c0:	4605      	mov	r5, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	b976      	cbnz	r6, 80057e4 <_Bfree+0x28>
 80057c6:	2010      	movs	r0, #16
 80057c8:	f7ff ffa2 	bl	8005710 <malloc>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6268      	str	r0, [r5, #36]	; 0x24
 80057d0:	b920      	cbnz	r0, 80057dc <_Bfree+0x20>
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <_Bfree+0x3c>)
 80057d4:	4809      	ldr	r0, [pc, #36]	; (80057fc <_Bfree+0x40>)
 80057d6:	218a      	movs	r1, #138	; 0x8a
 80057d8:	f000 feaa 	bl	8006530 <__assert_func>
 80057dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057e0:	6006      	str	r6, [r0, #0]
 80057e2:	60c6      	str	r6, [r0, #12]
 80057e4:	b13c      	cbz	r4, 80057f6 <_Bfree+0x3a>
 80057e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057e8:	6862      	ldr	r2, [r4, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057f0:	6021      	str	r1, [r4, #0]
 80057f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	08007a8d 	.word	0x08007a8d
 80057fc:	08007b70 	.word	0x08007b70

08005800 <__multadd>:
 8005800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005804:	690d      	ldr	r5, [r1, #16]
 8005806:	4607      	mov	r7, r0
 8005808:	460c      	mov	r4, r1
 800580a:	461e      	mov	r6, r3
 800580c:	f101 0c14 	add.w	ip, r1, #20
 8005810:	2000      	movs	r0, #0
 8005812:	f8dc 3000 	ldr.w	r3, [ip]
 8005816:	b299      	uxth	r1, r3
 8005818:	fb02 6101 	mla	r1, r2, r1, r6
 800581c:	0c1e      	lsrs	r6, r3, #16
 800581e:	0c0b      	lsrs	r3, r1, #16
 8005820:	fb02 3306 	mla	r3, r2, r6, r3
 8005824:	b289      	uxth	r1, r1
 8005826:	3001      	adds	r0, #1
 8005828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800582c:	4285      	cmp	r5, r0
 800582e:	f84c 1b04 	str.w	r1, [ip], #4
 8005832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005836:	dcec      	bgt.n	8005812 <__multadd+0x12>
 8005838:	b30e      	cbz	r6, 800587e <__multadd+0x7e>
 800583a:	68a3      	ldr	r3, [r4, #8]
 800583c:	42ab      	cmp	r3, r5
 800583e:	dc19      	bgt.n	8005874 <__multadd+0x74>
 8005840:	6861      	ldr	r1, [r4, #4]
 8005842:	4638      	mov	r0, r7
 8005844:	3101      	adds	r1, #1
 8005846:	f7ff ff79 	bl	800573c <_Balloc>
 800584a:	4680      	mov	r8, r0
 800584c:	b928      	cbnz	r0, 800585a <__multadd+0x5a>
 800584e:	4602      	mov	r2, r0
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <__multadd+0x84>)
 8005852:	480d      	ldr	r0, [pc, #52]	; (8005888 <__multadd+0x88>)
 8005854:	21b5      	movs	r1, #181	; 0xb5
 8005856:	f000 fe6b 	bl	8006530 <__assert_func>
 800585a:	6922      	ldr	r2, [r4, #16]
 800585c:	3202      	adds	r2, #2
 800585e:	f104 010c 	add.w	r1, r4, #12
 8005862:	0092      	lsls	r2, r2, #2
 8005864:	300c      	adds	r0, #12
 8005866:	f7ff ff5b 	bl	8005720 <memcpy>
 800586a:	4621      	mov	r1, r4
 800586c:	4638      	mov	r0, r7
 800586e:	f7ff ffa5 	bl	80057bc <_Bfree>
 8005872:	4644      	mov	r4, r8
 8005874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005878:	3501      	adds	r5, #1
 800587a:	615e      	str	r6, [r3, #20]
 800587c:	6125      	str	r5, [r4, #16]
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005884:	08007aff 	.word	0x08007aff
 8005888:	08007b70 	.word	0x08007b70

0800588c <__hi0bits>:
 800588c:	0c03      	lsrs	r3, r0, #16
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	b9d3      	cbnz	r3, 80058c8 <__hi0bits+0x3c>
 8005892:	0400      	lsls	r0, r0, #16
 8005894:	2310      	movs	r3, #16
 8005896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800589a:	bf04      	itt	eq
 800589c:	0200      	lsleq	r0, r0, #8
 800589e:	3308      	addeq	r3, #8
 80058a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80058a4:	bf04      	itt	eq
 80058a6:	0100      	lsleq	r0, r0, #4
 80058a8:	3304      	addeq	r3, #4
 80058aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80058ae:	bf04      	itt	eq
 80058b0:	0080      	lsleq	r0, r0, #2
 80058b2:	3302      	addeq	r3, #2
 80058b4:	2800      	cmp	r0, #0
 80058b6:	db05      	blt.n	80058c4 <__hi0bits+0x38>
 80058b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80058bc:	f103 0301 	add.w	r3, r3, #1
 80058c0:	bf08      	it	eq
 80058c2:	2320      	moveq	r3, #32
 80058c4:	4618      	mov	r0, r3
 80058c6:	4770      	bx	lr
 80058c8:	2300      	movs	r3, #0
 80058ca:	e7e4      	b.n	8005896 <__hi0bits+0xa>

080058cc <__lo0bits>:
 80058cc:	6803      	ldr	r3, [r0, #0]
 80058ce:	f013 0207 	ands.w	r2, r3, #7
 80058d2:	4601      	mov	r1, r0
 80058d4:	d00b      	beq.n	80058ee <__lo0bits+0x22>
 80058d6:	07da      	lsls	r2, r3, #31
 80058d8:	d423      	bmi.n	8005922 <__lo0bits+0x56>
 80058da:	0798      	lsls	r0, r3, #30
 80058dc:	bf49      	itett	mi
 80058de:	085b      	lsrmi	r3, r3, #1
 80058e0:	089b      	lsrpl	r3, r3, #2
 80058e2:	2001      	movmi	r0, #1
 80058e4:	600b      	strmi	r3, [r1, #0]
 80058e6:	bf5c      	itt	pl
 80058e8:	600b      	strpl	r3, [r1, #0]
 80058ea:	2002      	movpl	r0, #2
 80058ec:	4770      	bx	lr
 80058ee:	b298      	uxth	r0, r3
 80058f0:	b9a8      	cbnz	r0, 800591e <__lo0bits+0x52>
 80058f2:	0c1b      	lsrs	r3, r3, #16
 80058f4:	2010      	movs	r0, #16
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	b90a      	cbnz	r2, 80058fe <__lo0bits+0x32>
 80058fa:	3008      	adds	r0, #8
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	071a      	lsls	r2, r3, #28
 8005900:	bf04      	itt	eq
 8005902:	091b      	lsreq	r3, r3, #4
 8005904:	3004      	addeq	r0, #4
 8005906:	079a      	lsls	r2, r3, #30
 8005908:	bf04      	itt	eq
 800590a:	089b      	lsreq	r3, r3, #2
 800590c:	3002      	addeq	r0, #2
 800590e:	07da      	lsls	r2, r3, #31
 8005910:	d403      	bmi.n	800591a <__lo0bits+0x4e>
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	f100 0001 	add.w	r0, r0, #1
 8005918:	d005      	beq.n	8005926 <__lo0bits+0x5a>
 800591a:	600b      	str	r3, [r1, #0]
 800591c:	4770      	bx	lr
 800591e:	4610      	mov	r0, r2
 8005920:	e7e9      	b.n	80058f6 <__lo0bits+0x2a>
 8005922:	2000      	movs	r0, #0
 8005924:	4770      	bx	lr
 8005926:	2020      	movs	r0, #32
 8005928:	4770      	bx	lr
	...

0800592c <__i2b>:
 800592c:	b510      	push	{r4, lr}
 800592e:	460c      	mov	r4, r1
 8005930:	2101      	movs	r1, #1
 8005932:	f7ff ff03 	bl	800573c <_Balloc>
 8005936:	4602      	mov	r2, r0
 8005938:	b928      	cbnz	r0, 8005946 <__i2b+0x1a>
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <__i2b+0x24>)
 800593c:	4805      	ldr	r0, [pc, #20]	; (8005954 <__i2b+0x28>)
 800593e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005942:	f000 fdf5 	bl	8006530 <__assert_func>
 8005946:	2301      	movs	r3, #1
 8005948:	6144      	str	r4, [r0, #20]
 800594a:	6103      	str	r3, [r0, #16]
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	08007aff 	.word	0x08007aff
 8005954:	08007b70 	.word	0x08007b70

08005958 <__multiply>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	4691      	mov	r9, r2
 800595e:	690a      	ldr	r2, [r1, #16]
 8005960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	bfb8      	it	lt
 8005968:	460b      	movlt	r3, r1
 800596a:	460c      	mov	r4, r1
 800596c:	bfbc      	itt	lt
 800596e:	464c      	movlt	r4, r9
 8005970:	4699      	movlt	r9, r3
 8005972:	6927      	ldr	r7, [r4, #16]
 8005974:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005978:	68a3      	ldr	r3, [r4, #8]
 800597a:	6861      	ldr	r1, [r4, #4]
 800597c:	eb07 060a 	add.w	r6, r7, sl
 8005980:	42b3      	cmp	r3, r6
 8005982:	b085      	sub	sp, #20
 8005984:	bfb8      	it	lt
 8005986:	3101      	addlt	r1, #1
 8005988:	f7ff fed8 	bl	800573c <_Balloc>
 800598c:	b930      	cbnz	r0, 800599c <__multiply+0x44>
 800598e:	4602      	mov	r2, r0
 8005990:	4b44      	ldr	r3, [pc, #272]	; (8005aa4 <__multiply+0x14c>)
 8005992:	4845      	ldr	r0, [pc, #276]	; (8005aa8 <__multiply+0x150>)
 8005994:	f240 115d 	movw	r1, #349	; 0x15d
 8005998:	f000 fdca 	bl	8006530 <__assert_func>
 800599c:	f100 0514 	add.w	r5, r0, #20
 80059a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059a4:	462b      	mov	r3, r5
 80059a6:	2200      	movs	r2, #0
 80059a8:	4543      	cmp	r3, r8
 80059aa:	d321      	bcc.n	80059f0 <__multiply+0x98>
 80059ac:	f104 0314 	add.w	r3, r4, #20
 80059b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80059b4:	f109 0314 	add.w	r3, r9, #20
 80059b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80059bc:	9202      	str	r2, [sp, #8]
 80059be:	1b3a      	subs	r2, r7, r4
 80059c0:	3a15      	subs	r2, #21
 80059c2:	f022 0203 	bic.w	r2, r2, #3
 80059c6:	3204      	adds	r2, #4
 80059c8:	f104 0115 	add.w	r1, r4, #21
 80059cc:	428f      	cmp	r7, r1
 80059ce:	bf38      	it	cc
 80059d0:	2204      	movcc	r2, #4
 80059d2:	9201      	str	r2, [sp, #4]
 80059d4:	9a02      	ldr	r2, [sp, #8]
 80059d6:	9303      	str	r3, [sp, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d80c      	bhi.n	80059f6 <__multiply+0x9e>
 80059dc:	2e00      	cmp	r6, #0
 80059de:	dd03      	ble.n	80059e8 <__multiply+0x90>
 80059e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d05a      	beq.n	8005a9e <__multiply+0x146>
 80059e8:	6106      	str	r6, [r0, #16]
 80059ea:	b005      	add	sp, #20
 80059ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f0:	f843 2b04 	str.w	r2, [r3], #4
 80059f4:	e7d8      	b.n	80059a8 <__multiply+0x50>
 80059f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80059fa:	f1ba 0f00 	cmp.w	sl, #0
 80059fe:	d024      	beq.n	8005a4a <__multiply+0xf2>
 8005a00:	f104 0e14 	add.w	lr, r4, #20
 8005a04:	46a9      	mov	r9, r5
 8005a06:	f04f 0c00 	mov.w	ip, #0
 8005a0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005a0e:	f8d9 1000 	ldr.w	r1, [r9]
 8005a12:	fa1f fb82 	uxth.w	fp, r2
 8005a16:	b289      	uxth	r1, r1
 8005a18:	fb0a 110b 	mla	r1, sl, fp, r1
 8005a1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005a20:	f8d9 2000 	ldr.w	r2, [r9]
 8005a24:	4461      	add	r1, ip
 8005a26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005a2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a32:	b289      	uxth	r1, r1
 8005a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a38:	4577      	cmp	r7, lr
 8005a3a:	f849 1b04 	str.w	r1, [r9], #4
 8005a3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a42:	d8e2      	bhi.n	8005a0a <__multiply+0xb2>
 8005a44:	9a01      	ldr	r2, [sp, #4]
 8005a46:	f845 c002 	str.w	ip, [r5, r2]
 8005a4a:	9a03      	ldr	r2, [sp, #12]
 8005a4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a50:	3304      	adds	r3, #4
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	d020      	beq.n	8005a9a <__multiply+0x142>
 8005a58:	6829      	ldr	r1, [r5, #0]
 8005a5a:	f104 0c14 	add.w	ip, r4, #20
 8005a5e:	46ae      	mov	lr, r5
 8005a60:	f04f 0a00 	mov.w	sl, #0
 8005a64:	f8bc b000 	ldrh.w	fp, [ip]
 8005a68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005a6c:	fb09 220b 	mla	r2, r9, fp, r2
 8005a70:	4492      	add	sl, r2
 8005a72:	b289      	uxth	r1, r1
 8005a74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005a78:	f84e 1b04 	str.w	r1, [lr], #4
 8005a7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005a80:	f8be 1000 	ldrh.w	r1, [lr]
 8005a84:	0c12      	lsrs	r2, r2, #16
 8005a86:	fb09 1102 	mla	r1, r9, r2, r1
 8005a8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005a8e:	4567      	cmp	r7, ip
 8005a90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a94:	d8e6      	bhi.n	8005a64 <__multiply+0x10c>
 8005a96:	9a01      	ldr	r2, [sp, #4]
 8005a98:	50a9      	str	r1, [r5, r2]
 8005a9a:	3504      	adds	r5, #4
 8005a9c:	e79a      	b.n	80059d4 <__multiply+0x7c>
 8005a9e:	3e01      	subs	r6, #1
 8005aa0:	e79c      	b.n	80059dc <__multiply+0x84>
 8005aa2:	bf00      	nop
 8005aa4:	08007aff 	.word	0x08007aff
 8005aa8:	08007b70 	.word	0x08007b70

08005aac <__pow5mult>:
 8005aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab0:	4615      	mov	r5, r2
 8005ab2:	f012 0203 	ands.w	r2, r2, #3
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	460f      	mov	r7, r1
 8005aba:	d007      	beq.n	8005acc <__pow5mult+0x20>
 8005abc:	4c25      	ldr	r4, [pc, #148]	; (8005b54 <__pow5mult+0xa8>)
 8005abe:	3a01      	subs	r2, #1
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ac6:	f7ff fe9b 	bl	8005800 <__multadd>
 8005aca:	4607      	mov	r7, r0
 8005acc:	10ad      	asrs	r5, r5, #2
 8005ace:	d03d      	beq.n	8005b4c <__pow5mult+0xa0>
 8005ad0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ad2:	b97c      	cbnz	r4, 8005af4 <__pow5mult+0x48>
 8005ad4:	2010      	movs	r0, #16
 8005ad6:	f7ff fe1b 	bl	8005710 <malloc>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6270      	str	r0, [r6, #36]	; 0x24
 8005ade:	b928      	cbnz	r0, 8005aec <__pow5mult+0x40>
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <__pow5mult+0xac>)
 8005ae2:	481e      	ldr	r0, [pc, #120]	; (8005b5c <__pow5mult+0xb0>)
 8005ae4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ae8:	f000 fd22 	bl	8006530 <__assert_func>
 8005aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005af0:	6004      	str	r4, [r0, #0]
 8005af2:	60c4      	str	r4, [r0, #12]
 8005af4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005afc:	b94c      	cbnz	r4, 8005b12 <__pow5mult+0x66>
 8005afe:	f240 2171 	movw	r1, #625	; 0x271
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff ff12 	bl	800592c <__i2b>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b0e:	4604      	mov	r4, r0
 8005b10:	6003      	str	r3, [r0, #0]
 8005b12:	f04f 0900 	mov.w	r9, #0
 8005b16:	07eb      	lsls	r3, r5, #31
 8005b18:	d50a      	bpl.n	8005b30 <__pow5mult+0x84>
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ff1a 	bl	8005958 <__multiply>
 8005b24:	4639      	mov	r1, r7
 8005b26:	4680      	mov	r8, r0
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7ff fe47 	bl	80057bc <_Bfree>
 8005b2e:	4647      	mov	r7, r8
 8005b30:	106d      	asrs	r5, r5, #1
 8005b32:	d00b      	beq.n	8005b4c <__pow5mult+0xa0>
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	b938      	cbnz	r0, 8005b48 <__pow5mult+0x9c>
 8005b38:	4622      	mov	r2, r4
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7ff ff0b 	bl	8005958 <__multiply>
 8005b42:	6020      	str	r0, [r4, #0]
 8005b44:	f8c0 9000 	str.w	r9, [r0]
 8005b48:	4604      	mov	r4, r0
 8005b4a:	e7e4      	b.n	8005b16 <__pow5mult+0x6a>
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b52:	bf00      	nop
 8005b54:	08007cc0 	.word	0x08007cc0
 8005b58:	08007a8d 	.word	0x08007a8d
 8005b5c:	08007b70 	.word	0x08007b70

08005b60 <__lshift>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	460c      	mov	r4, r1
 8005b66:	6849      	ldr	r1, [r1, #4]
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	4607      	mov	r7, r0
 8005b72:	4691      	mov	r9, r2
 8005b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b78:	f108 0601 	add.w	r6, r8, #1
 8005b7c:	42b3      	cmp	r3, r6
 8005b7e:	db0b      	blt.n	8005b98 <__lshift+0x38>
 8005b80:	4638      	mov	r0, r7
 8005b82:	f7ff fddb 	bl	800573c <_Balloc>
 8005b86:	4605      	mov	r5, r0
 8005b88:	b948      	cbnz	r0, 8005b9e <__lshift+0x3e>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <__lshift+0xd8>)
 8005b8e:	482b      	ldr	r0, [pc, #172]	; (8005c3c <__lshift+0xdc>)
 8005b90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b94:	f000 fccc 	bl	8006530 <__assert_func>
 8005b98:	3101      	adds	r1, #1
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	e7ee      	b.n	8005b7c <__lshift+0x1c>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f100 0114 	add.w	r1, r0, #20
 8005ba4:	f100 0210 	add.w	r2, r0, #16
 8005ba8:	4618      	mov	r0, r3
 8005baa:	4553      	cmp	r3, sl
 8005bac:	db37      	blt.n	8005c1e <__lshift+0xbe>
 8005bae:	6920      	ldr	r0, [r4, #16]
 8005bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bb4:	f104 0314 	add.w	r3, r4, #20
 8005bb8:	f019 091f 	ands.w	r9, r9, #31
 8005bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005bc4:	d02f      	beq.n	8005c26 <__lshift+0xc6>
 8005bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8005bca:	468a      	mov	sl, r1
 8005bcc:	f04f 0c00 	mov.w	ip, #0
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	fa02 f209 	lsl.w	r2, r2, r9
 8005bd6:	ea42 020c 	orr.w	r2, r2, ip
 8005bda:	f84a 2b04 	str.w	r2, [sl], #4
 8005bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be2:	4298      	cmp	r0, r3
 8005be4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005be8:	d8f2      	bhi.n	8005bd0 <__lshift+0x70>
 8005bea:	1b03      	subs	r3, r0, r4
 8005bec:	3b15      	subs	r3, #21
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	f104 0215 	add.w	r2, r4, #21
 8005bf8:	4290      	cmp	r0, r2
 8005bfa:	bf38      	it	cc
 8005bfc:	2304      	movcc	r3, #4
 8005bfe:	f841 c003 	str.w	ip, [r1, r3]
 8005c02:	f1bc 0f00 	cmp.w	ip, #0
 8005c06:	d001      	beq.n	8005c0c <__lshift+0xac>
 8005c08:	f108 0602 	add.w	r6, r8, #2
 8005c0c:	3e01      	subs	r6, #1
 8005c0e:	4638      	mov	r0, r7
 8005c10:	612e      	str	r6, [r5, #16]
 8005c12:	4621      	mov	r1, r4
 8005c14:	f7ff fdd2 	bl	80057bc <_Bfree>
 8005c18:	4628      	mov	r0, r5
 8005c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c22:	3301      	adds	r3, #1
 8005c24:	e7c1      	b.n	8005baa <__lshift+0x4a>
 8005c26:	3904      	subs	r1, #4
 8005c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c30:	4298      	cmp	r0, r3
 8005c32:	d8f9      	bhi.n	8005c28 <__lshift+0xc8>
 8005c34:	e7ea      	b.n	8005c0c <__lshift+0xac>
 8005c36:	bf00      	nop
 8005c38:	08007aff 	.word	0x08007aff
 8005c3c:	08007b70 	.word	0x08007b70

08005c40 <__mcmp>:
 8005c40:	b530      	push	{r4, r5, lr}
 8005c42:	6902      	ldr	r2, [r0, #16]
 8005c44:	690c      	ldr	r4, [r1, #16]
 8005c46:	1b12      	subs	r2, r2, r4
 8005c48:	d10e      	bne.n	8005c68 <__mcmp+0x28>
 8005c4a:	f100 0314 	add.w	r3, r0, #20
 8005c4e:	3114      	adds	r1, #20
 8005c50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005c54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005c5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005c60:	42a5      	cmp	r5, r4
 8005c62:	d003      	beq.n	8005c6c <__mcmp+0x2c>
 8005c64:	d305      	bcc.n	8005c72 <__mcmp+0x32>
 8005c66:	2201      	movs	r2, #1
 8005c68:	4610      	mov	r0, r2
 8005c6a:	bd30      	pop	{r4, r5, pc}
 8005c6c:	4283      	cmp	r3, r0
 8005c6e:	d3f3      	bcc.n	8005c58 <__mcmp+0x18>
 8005c70:	e7fa      	b.n	8005c68 <__mcmp+0x28>
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295
 8005c76:	e7f7      	b.n	8005c68 <__mcmp+0x28>

08005c78 <__mdiff>:
 8005c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	4606      	mov	r6, r0
 8005c80:	4611      	mov	r1, r2
 8005c82:	4620      	mov	r0, r4
 8005c84:	4690      	mov	r8, r2
 8005c86:	f7ff ffdb 	bl	8005c40 <__mcmp>
 8005c8a:	1e05      	subs	r5, r0, #0
 8005c8c:	d110      	bne.n	8005cb0 <__mdiff+0x38>
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff fd53 	bl	800573c <_Balloc>
 8005c96:	b930      	cbnz	r0, 8005ca6 <__mdiff+0x2e>
 8005c98:	4b3a      	ldr	r3, [pc, #232]	; (8005d84 <__mdiff+0x10c>)
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	f240 2132 	movw	r1, #562	; 0x232
 8005ca0:	4839      	ldr	r0, [pc, #228]	; (8005d88 <__mdiff+0x110>)
 8005ca2:	f000 fc45 	bl	8006530 <__assert_func>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	bfa4      	itt	ge
 8005cb2:	4643      	movge	r3, r8
 8005cb4:	46a0      	movge	r8, r4
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cbc:	bfa6      	itte	ge
 8005cbe:	461c      	movge	r4, r3
 8005cc0:	2500      	movge	r5, #0
 8005cc2:	2501      	movlt	r5, #1
 8005cc4:	f7ff fd3a 	bl	800573c <_Balloc>
 8005cc8:	b920      	cbnz	r0, 8005cd4 <__mdiff+0x5c>
 8005cca:	4b2e      	ldr	r3, [pc, #184]	; (8005d84 <__mdiff+0x10c>)
 8005ccc:	4602      	mov	r2, r0
 8005cce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005cd2:	e7e5      	b.n	8005ca0 <__mdiff+0x28>
 8005cd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005cd8:	6926      	ldr	r6, [r4, #16]
 8005cda:	60c5      	str	r5, [r0, #12]
 8005cdc:	f104 0914 	add.w	r9, r4, #20
 8005ce0:	f108 0514 	add.w	r5, r8, #20
 8005ce4:	f100 0e14 	add.w	lr, r0, #20
 8005ce8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005cec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005cf0:	f108 0210 	add.w	r2, r8, #16
 8005cf4:	46f2      	mov	sl, lr
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005cfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d00:	fa1f f883 	uxth.w	r8, r3
 8005d04:	fa11 f18b 	uxtah	r1, r1, fp
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	eba1 0808 	sub.w	r8, r1, r8
 8005d0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d16:	fa1f f888 	uxth.w	r8, r8
 8005d1a:	1419      	asrs	r1, r3, #16
 8005d1c:	454e      	cmp	r6, r9
 8005d1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d22:	f84a 3b04 	str.w	r3, [sl], #4
 8005d26:	d8e7      	bhi.n	8005cf8 <__mdiff+0x80>
 8005d28:	1b33      	subs	r3, r6, r4
 8005d2a:	3b15      	subs	r3, #21
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	3304      	adds	r3, #4
 8005d32:	3415      	adds	r4, #21
 8005d34:	42a6      	cmp	r6, r4
 8005d36:	bf38      	it	cc
 8005d38:	2304      	movcc	r3, #4
 8005d3a:	441d      	add	r5, r3
 8005d3c:	4473      	add	r3, lr
 8005d3e:	469e      	mov	lr, r3
 8005d40:	462e      	mov	r6, r5
 8005d42:	4566      	cmp	r6, ip
 8005d44:	d30e      	bcc.n	8005d64 <__mdiff+0xec>
 8005d46:	f10c 0203 	add.w	r2, ip, #3
 8005d4a:	1b52      	subs	r2, r2, r5
 8005d4c:	f022 0203 	bic.w	r2, r2, #3
 8005d50:	3d03      	subs	r5, #3
 8005d52:	45ac      	cmp	ip, r5
 8005d54:	bf38      	it	cc
 8005d56:	2200      	movcc	r2, #0
 8005d58:	441a      	add	r2, r3
 8005d5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005d5e:	b17b      	cbz	r3, 8005d80 <__mdiff+0x108>
 8005d60:	6107      	str	r7, [r0, #16]
 8005d62:	e7a3      	b.n	8005cac <__mdiff+0x34>
 8005d64:	f856 8b04 	ldr.w	r8, [r6], #4
 8005d68:	fa11 f288 	uxtah	r2, r1, r8
 8005d6c:	1414      	asrs	r4, r2, #16
 8005d6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005d72:	b292      	uxth	r2, r2
 8005d74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005d78:	f84e 2b04 	str.w	r2, [lr], #4
 8005d7c:	1421      	asrs	r1, r4, #16
 8005d7e:	e7e0      	b.n	8005d42 <__mdiff+0xca>
 8005d80:	3f01      	subs	r7, #1
 8005d82:	e7ea      	b.n	8005d5a <__mdiff+0xe2>
 8005d84:	08007aff 	.word	0x08007aff
 8005d88:	08007b70 	.word	0x08007b70

08005d8c <__d2b>:
 8005d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d90:	4689      	mov	r9, r1
 8005d92:	2101      	movs	r1, #1
 8005d94:	ec57 6b10 	vmov	r6, r7, d0
 8005d98:	4690      	mov	r8, r2
 8005d9a:	f7ff fccf 	bl	800573c <_Balloc>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	b930      	cbnz	r0, 8005db0 <__d2b+0x24>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <__d2b+0xb0>)
 8005da6:	4826      	ldr	r0, [pc, #152]	; (8005e40 <__d2b+0xb4>)
 8005da8:	f240 310a 	movw	r1, #778	; 0x30a
 8005dac:	f000 fbc0 	bl	8006530 <__assert_func>
 8005db0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005db4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005db8:	bb35      	cbnz	r5, 8005e08 <__d2b+0x7c>
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	d028      	beq.n	8005e12 <__d2b+0x86>
 8005dc0:	4668      	mov	r0, sp
 8005dc2:	9600      	str	r6, [sp, #0]
 8005dc4:	f7ff fd82 	bl	80058cc <__lo0bits>
 8005dc8:	9900      	ldr	r1, [sp, #0]
 8005dca:	b300      	cbz	r0, 8005e0e <__d2b+0x82>
 8005dcc:	9a01      	ldr	r2, [sp, #4]
 8005dce:	f1c0 0320 	rsb	r3, r0, #32
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	40c2      	lsrs	r2, r0
 8005dda:	6163      	str	r3, [r4, #20]
 8005ddc:	9201      	str	r2, [sp, #4]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	61a3      	str	r3, [r4, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bf14      	ite	ne
 8005de6:	2202      	movne	r2, #2
 8005de8:	2201      	moveq	r2, #1
 8005dea:	6122      	str	r2, [r4, #16]
 8005dec:	b1d5      	cbz	r5, 8005e24 <__d2b+0x98>
 8005dee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005df2:	4405      	add	r5, r0
 8005df4:	f8c9 5000 	str.w	r5, [r9]
 8005df8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005dfc:	f8c8 0000 	str.w	r0, [r8]
 8005e00:	4620      	mov	r0, r4
 8005e02:	b003      	add	sp, #12
 8005e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e0c:	e7d5      	b.n	8005dba <__d2b+0x2e>
 8005e0e:	6161      	str	r1, [r4, #20]
 8005e10:	e7e5      	b.n	8005dde <__d2b+0x52>
 8005e12:	a801      	add	r0, sp, #4
 8005e14:	f7ff fd5a 	bl	80058cc <__lo0bits>
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	6163      	str	r3, [r4, #20]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	6122      	str	r2, [r4, #16]
 8005e20:	3020      	adds	r0, #32
 8005e22:	e7e3      	b.n	8005dec <__d2b+0x60>
 8005e24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e2c:	f8c9 0000 	str.w	r0, [r9]
 8005e30:	6918      	ldr	r0, [r3, #16]
 8005e32:	f7ff fd2b 	bl	800588c <__hi0bits>
 8005e36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e3a:	e7df      	b.n	8005dfc <__d2b+0x70>
 8005e3c:	08007aff 	.word	0x08007aff
 8005e40:	08007b70 	.word	0x08007b70

08005e44 <_calloc_r>:
 8005e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e46:	fba1 2402 	umull	r2, r4, r1, r2
 8005e4a:	b94c      	cbnz	r4, 8005e60 <_calloc_r+0x1c>
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	9201      	str	r2, [sp, #4]
 8005e50:	f000 f87a 	bl	8005f48 <_malloc_r>
 8005e54:	9a01      	ldr	r2, [sp, #4]
 8005e56:	4605      	mov	r5, r0
 8005e58:	b930      	cbnz	r0, 8005e68 <_calloc_r+0x24>
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	b003      	add	sp, #12
 8005e5e:	bd30      	pop	{r4, r5, pc}
 8005e60:	220c      	movs	r2, #12
 8005e62:	6002      	str	r2, [r0, #0]
 8005e64:	2500      	movs	r5, #0
 8005e66:	e7f8      	b.n	8005e5a <_calloc_r+0x16>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	f7fe f84d 	bl	8003f08 <memset>
 8005e6e:	e7f4      	b.n	8005e5a <_calloc_r+0x16>

08005e70 <_free_r>:
 8005e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e72:	2900      	cmp	r1, #0
 8005e74:	d044      	beq.n	8005f00 <_free_r+0x90>
 8005e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7a:	9001      	str	r0, [sp, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e82:	bfb8      	it	lt
 8005e84:	18e4      	addlt	r4, r4, r3
 8005e86:	f000 fcdf 	bl	8006848 <__malloc_lock>
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <_free_r+0x94>)
 8005e8c:	9801      	ldr	r0, [sp, #4]
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	b933      	cbnz	r3, 8005ea0 <_free_r+0x30>
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	6014      	str	r4, [r2, #0]
 8005e96:	b003      	add	sp, #12
 8005e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e9c:	f000 bcda 	b.w	8006854 <__malloc_unlock>
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d908      	bls.n	8005eb6 <_free_r+0x46>
 8005ea4:	6825      	ldr	r5, [r4, #0]
 8005ea6:	1961      	adds	r1, r4, r5
 8005ea8:	428b      	cmp	r3, r1
 8005eaa:	bf01      	itttt	eq
 8005eac:	6819      	ldreq	r1, [r3, #0]
 8005eae:	685b      	ldreq	r3, [r3, #4]
 8005eb0:	1949      	addeq	r1, r1, r5
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	e7ed      	b.n	8005e92 <_free_r+0x22>
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b10b      	cbz	r3, 8005ec0 <_free_r+0x50>
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d9fa      	bls.n	8005eb6 <_free_r+0x46>
 8005ec0:	6811      	ldr	r1, [r2, #0]
 8005ec2:	1855      	adds	r5, r2, r1
 8005ec4:	42a5      	cmp	r5, r4
 8005ec6:	d10b      	bne.n	8005ee0 <_free_r+0x70>
 8005ec8:	6824      	ldr	r4, [r4, #0]
 8005eca:	4421      	add	r1, r4
 8005ecc:	1854      	adds	r4, r2, r1
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	d1e0      	bne.n	8005e96 <_free_r+0x26>
 8005ed4:	681c      	ldr	r4, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	6053      	str	r3, [r2, #4]
 8005eda:	4421      	add	r1, r4
 8005edc:	6011      	str	r1, [r2, #0]
 8005ede:	e7da      	b.n	8005e96 <_free_r+0x26>
 8005ee0:	d902      	bls.n	8005ee8 <_free_r+0x78>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	6003      	str	r3, [r0, #0]
 8005ee6:	e7d6      	b.n	8005e96 <_free_r+0x26>
 8005ee8:	6825      	ldr	r5, [r4, #0]
 8005eea:	1961      	adds	r1, r4, r5
 8005eec:	428b      	cmp	r3, r1
 8005eee:	bf04      	itt	eq
 8005ef0:	6819      	ldreq	r1, [r3, #0]
 8005ef2:	685b      	ldreq	r3, [r3, #4]
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	bf04      	itt	eq
 8005ef8:	1949      	addeq	r1, r1, r5
 8005efa:	6021      	streq	r1, [r4, #0]
 8005efc:	6054      	str	r4, [r2, #4]
 8005efe:	e7ca      	b.n	8005e96 <_free_r+0x26>
 8005f00:	b003      	add	sp, #12
 8005f02:	bd30      	pop	{r4, r5, pc}
 8005f04:	20000398 	.word	0x20000398

08005f08 <sbrk_aligned>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4e0e      	ldr	r6, [pc, #56]	; (8005f44 <sbrk_aligned+0x3c>)
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	6831      	ldr	r1, [r6, #0]
 8005f10:	4605      	mov	r5, r0
 8005f12:	b911      	cbnz	r1, 8005f1a <sbrk_aligned+0x12>
 8005f14:	f000 f9e6 	bl	80062e4 <_sbrk_r>
 8005f18:	6030      	str	r0, [r6, #0]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 f9e1 	bl	80062e4 <_sbrk_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d00a      	beq.n	8005f3c <sbrk_aligned+0x34>
 8005f26:	1cc4      	adds	r4, r0, #3
 8005f28:	f024 0403 	bic.w	r4, r4, #3
 8005f2c:	42a0      	cmp	r0, r4
 8005f2e:	d007      	beq.n	8005f40 <sbrk_aligned+0x38>
 8005f30:	1a21      	subs	r1, r4, r0
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f9d6 	bl	80062e4 <_sbrk_r>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d101      	bne.n	8005f40 <sbrk_aligned+0x38>
 8005f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f40:	4620      	mov	r0, r4
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	2000039c 	.word	0x2000039c

08005f48 <_malloc_r>:
 8005f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4c:	1ccd      	adds	r5, r1, #3
 8005f4e:	f025 0503 	bic.w	r5, r5, #3
 8005f52:	3508      	adds	r5, #8
 8005f54:	2d0c      	cmp	r5, #12
 8005f56:	bf38      	it	cc
 8005f58:	250c      	movcc	r5, #12
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	db01      	blt.n	8005f64 <_malloc_r+0x1c>
 8005f60:	42a9      	cmp	r1, r5
 8005f62:	d905      	bls.n	8005f70 <_malloc_r+0x28>
 8005f64:	230c      	movs	r3, #12
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	2600      	movs	r6, #0
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f70:	4e2e      	ldr	r6, [pc, #184]	; (800602c <_malloc_r+0xe4>)
 8005f72:	f000 fc69 	bl	8006848 <__malloc_lock>
 8005f76:	6833      	ldr	r3, [r6, #0]
 8005f78:	461c      	mov	r4, r3
 8005f7a:	bb34      	cbnz	r4, 8005fca <_malloc_r+0x82>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4638      	mov	r0, r7
 8005f80:	f7ff ffc2 	bl	8005f08 <sbrk_aligned>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	4604      	mov	r4, r0
 8005f88:	d14d      	bne.n	8006026 <_malloc_r+0xde>
 8005f8a:	6834      	ldr	r4, [r6, #0]
 8005f8c:	4626      	mov	r6, r4
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	d140      	bne.n	8006014 <_malloc_r+0xcc>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	4631      	mov	r1, r6
 8005f96:	4638      	mov	r0, r7
 8005f98:	eb04 0803 	add.w	r8, r4, r3
 8005f9c:	f000 f9a2 	bl	80062e4 <_sbrk_r>
 8005fa0:	4580      	cmp	r8, r0
 8005fa2:	d13a      	bne.n	800601a <_malloc_r+0xd2>
 8005fa4:	6821      	ldr	r1, [r4, #0]
 8005fa6:	3503      	adds	r5, #3
 8005fa8:	1a6d      	subs	r5, r5, r1
 8005faa:	f025 0503 	bic.w	r5, r5, #3
 8005fae:	3508      	adds	r5, #8
 8005fb0:	2d0c      	cmp	r5, #12
 8005fb2:	bf38      	it	cc
 8005fb4:	250c      	movcc	r5, #12
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f7ff ffa5 	bl	8005f08 <sbrk_aligned>
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d02b      	beq.n	800601a <_malloc_r+0xd2>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	442b      	add	r3, r5
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	e00e      	b.n	8005fe8 <_malloc_r+0xa0>
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	1b52      	subs	r2, r2, r5
 8005fce:	d41e      	bmi.n	800600e <_malloc_r+0xc6>
 8005fd0:	2a0b      	cmp	r2, #11
 8005fd2:	d916      	bls.n	8006002 <_malloc_r+0xba>
 8005fd4:	1961      	adds	r1, r4, r5
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	6025      	str	r5, [r4, #0]
 8005fda:	bf18      	it	ne
 8005fdc:	6059      	strne	r1, [r3, #4]
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	bf08      	it	eq
 8005fe2:	6031      	streq	r1, [r6, #0]
 8005fe4:	5162      	str	r2, [r4, r5]
 8005fe6:	604b      	str	r3, [r1, #4]
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f104 060b 	add.w	r6, r4, #11
 8005fee:	f000 fc31 	bl	8006854 <__malloc_unlock>
 8005ff2:	f026 0607 	bic.w	r6, r6, #7
 8005ff6:	1d23      	adds	r3, r4, #4
 8005ff8:	1af2      	subs	r2, r6, r3
 8005ffa:	d0b6      	beq.n	8005f6a <_malloc_r+0x22>
 8005ffc:	1b9b      	subs	r3, r3, r6
 8005ffe:	50a3      	str	r3, [r4, r2]
 8006000:	e7b3      	b.n	8005f6a <_malloc_r+0x22>
 8006002:	6862      	ldr	r2, [r4, #4]
 8006004:	42a3      	cmp	r3, r4
 8006006:	bf0c      	ite	eq
 8006008:	6032      	streq	r2, [r6, #0]
 800600a:	605a      	strne	r2, [r3, #4]
 800600c:	e7ec      	b.n	8005fe8 <_malloc_r+0xa0>
 800600e:	4623      	mov	r3, r4
 8006010:	6864      	ldr	r4, [r4, #4]
 8006012:	e7b2      	b.n	8005f7a <_malloc_r+0x32>
 8006014:	4634      	mov	r4, r6
 8006016:	6876      	ldr	r6, [r6, #4]
 8006018:	e7b9      	b.n	8005f8e <_malloc_r+0x46>
 800601a:	230c      	movs	r3, #12
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4638      	mov	r0, r7
 8006020:	f000 fc18 	bl	8006854 <__malloc_unlock>
 8006024:	e7a1      	b.n	8005f6a <_malloc_r+0x22>
 8006026:	6025      	str	r5, [r4, #0]
 8006028:	e7de      	b.n	8005fe8 <_malloc_r+0xa0>
 800602a:	bf00      	nop
 800602c:	20000398 	.word	0x20000398

08006030 <__sfputc_r>:
 8006030:	6893      	ldr	r3, [r2, #8]
 8006032:	3b01      	subs	r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	b410      	push	{r4}
 8006038:	6093      	str	r3, [r2, #8]
 800603a:	da08      	bge.n	800604e <__sfputc_r+0x1e>
 800603c:	6994      	ldr	r4, [r2, #24]
 800603e:	42a3      	cmp	r3, r4
 8006040:	db01      	blt.n	8006046 <__sfputc_r+0x16>
 8006042:	290a      	cmp	r1, #10
 8006044:	d103      	bne.n	800604e <__sfputc_r+0x1e>
 8006046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800604a:	f000 b99f 	b.w	800638c <__swbuf_r>
 800604e:	6813      	ldr	r3, [r2, #0]
 8006050:	1c58      	adds	r0, r3, #1
 8006052:	6010      	str	r0, [r2, #0]
 8006054:	7019      	strb	r1, [r3, #0]
 8006056:	4608      	mov	r0, r1
 8006058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800605c:	4770      	bx	lr

0800605e <__sfputs_r>:
 800605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006060:	4606      	mov	r6, r0
 8006062:	460f      	mov	r7, r1
 8006064:	4614      	mov	r4, r2
 8006066:	18d5      	adds	r5, r2, r3
 8006068:	42ac      	cmp	r4, r5
 800606a:	d101      	bne.n	8006070 <__sfputs_r+0x12>
 800606c:	2000      	movs	r0, #0
 800606e:	e007      	b.n	8006080 <__sfputs_r+0x22>
 8006070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006074:	463a      	mov	r2, r7
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ffda 	bl	8006030 <__sfputc_r>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d1f3      	bne.n	8006068 <__sfputs_r+0xa>
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006084 <_vfiprintf_r>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	460d      	mov	r5, r1
 800608a:	b09d      	sub	sp, #116	; 0x74
 800608c:	4614      	mov	r4, r2
 800608e:	4698      	mov	r8, r3
 8006090:	4606      	mov	r6, r0
 8006092:	b118      	cbz	r0, 800609c <_vfiprintf_r+0x18>
 8006094:	6983      	ldr	r3, [r0, #24]
 8006096:	b90b      	cbnz	r3, 800609c <_vfiprintf_r+0x18>
 8006098:	f7ff fa94 	bl	80055c4 <__sinit>
 800609c:	4b89      	ldr	r3, [pc, #548]	; (80062c4 <_vfiprintf_r+0x240>)
 800609e:	429d      	cmp	r5, r3
 80060a0:	d11b      	bne.n	80060da <_vfiprintf_r+0x56>
 80060a2:	6875      	ldr	r5, [r6, #4]
 80060a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060a6:	07d9      	lsls	r1, r3, #31
 80060a8:	d405      	bmi.n	80060b6 <_vfiprintf_r+0x32>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	059a      	lsls	r2, r3, #22
 80060ae:	d402      	bmi.n	80060b6 <_vfiprintf_r+0x32>
 80060b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b2:	f7ff fb2a 	bl	800570a <__retarget_lock_acquire_recursive>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	071b      	lsls	r3, r3, #28
 80060ba:	d501      	bpl.n	80060c0 <_vfiprintf_r+0x3c>
 80060bc:	692b      	ldr	r3, [r5, #16]
 80060be:	b9eb      	cbnz	r3, 80060fc <_vfiprintf_r+0x78>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 f9c6 	bl	8006454 <__swsetup_r>
 80060c8:	b1c0      	cbz	r0, 80060fc <_vfiprintf_r+0x78>
 80060ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060cc:	07dc      	lsls	r4, r3, #31
 80060ce:	d50e      	bpl.n	80060ee <_vfiprintf_r+0x6a>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	b01d      	add	sp, #116	; 0x74
 80060d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060da:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <_vfiprintf_r+0x244>)
 80060dc:	429d      	cmp	r5, r3
 80060de:	d101      	bne.n	80060e4 <_vfiprintf_r+0x60>
 80060e0:	68b5      	ldr	r5, [r6, #8]
 80060e2:	e7df      	b.n	80060a4 <_vfiprintf_r+0x20>
 80060e4:	4b79      	ldr	r3, [pc, #484]	; (80062cc <_vfiprintf_r+0x248>)
 80060e6:	429d      	cmp	r5, r3
 80060e8:	bf08      	it	eq
 80060ea:	68f5      	ldreq	r5, [r6, #12]
 80060ec:	e7da      	b.n	80060a4 <_vfiprintf_r+0x20>
 80060ee:	89ab      	ldrh	r3, [r5, #12]
 80060f0:	0598      	lsls	r0, r3, #22
 80060f2:	d4ed      	bmi.n	80060d0 <_vfiprintf_r+0x4c>
 80060f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060f6:	f7ff fb09 	bl	800570c <__retarget_lock_release_recursive>
 80060fa:	e7e9      	b.n	80060d0 <_vfiprintf_r+0x4c>
 80060fc:	2300      	movs	r3, #0
 80060fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006100:	2320      	movs	r3, #32
 8006102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006106:	f8cd 800c 	str.w	r8, [sp, #12]
 800610a:	2330      	movs	r3, #48	; 0x30
 800610c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062d0 <_vfiprintf_r+0x24c>
 8006110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006114:	f04f 0901 	mov.w	r9, #1
 8006118:	4623      	mov	r3, r4
 800611a:	469a      	mov	sl, r3
 800611c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006120:	b10a      	cbz	r2, 8006126 <_vfiprintf_r+0xa2>
 8006122:	2a25      	cmp	r2, #37	; 0x25
 8006124:	d1f9      	bne.n	800611a <_vfiprintf_r+0x96>
 8006126:	ebba 0b04 	subs.w	fp, sl, r4
 800612a:	d00b      	beq.n	8006144 <_vfiprintf_r+0xc0>
 800612c:	465b      	mov	r3, fp
 800612e:	4622      	mov	r2, r4
 8006130:	4629      	mov	r1, r5
 8006132:	4630      	mov	r0, r6
 8006134:	f7ff ff93 	bl	800605e <__sfputs_r>
 8006138:	3001      	adds	r0, #1
 800613a:	f000 80aa 	beq.w	8006292 <_vfiprintf_r+0x20e>
 800613e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006140:	445a      	add	r2, fp
 8006142:	9209      	str	r2, [sp, #36]	; 0x24
 8006144:	f89a 3000 	ldrb.w	r3, [sl]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80a2 	beq.w	8006292 <_vfiprintf_r+0x20e>
 800614e:	2300      	movs	r3, #0
 8006150:	f04f 32ff 	mov.w	r2, #4294967295
 8006154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006158:	f10a 0a01 	add.w	sl, sl, #1
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006164:	931a      	str	r3, [sp, #104]	; 0x68
 8006166:	4654      	mov	r4, sl
 8006168:	2205      	movs	r2, #5
 800616a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616e:	4858      	ldr	r0, [pc, #352]	; (80062d0 <_vfiprintf_r+0x24c>)
 8006170:	f7fa f836 	bl	80001e0 <memchr>
 8006174:	9a04      	ldr	r2, [sp, #16]
 8006176:	b9d8      	cbnz	r0, 80061b0 <_vfiprintf_r+0x12c>
 8006178:	06d1      	lsls	r1, r2, #27
 800617a:	bf44      	itt	mi
 800617c:	2320      	movmi	r3, #32
 800617e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006182:	0713      	lsls	r3, r2, #28
 8006184:	bf44      	itt	mi
 8006186:	232b      	movmi	r3, #43	; 0x2b
 8006188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800618c:	f89a 3000 	ldrb.w	r3, [sl]
 8006190:	2b2a      	cmp	r3, #42	; 0x2a
 8006192:	d015      	beq.n	80061c0 <_vfiprintf_r+0x13c>
 8006194:	9a07      	ldr	r2, [sp, #28]
 8006196:	4654      	mov	r4, sl
 8006198:	2000      	movs	r0, #0
 800619a:	f04f 0c0a 	mov.w	ip, #10
 800619e:	4621      	mov	r1, r4
 80061a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a4:	3b30      	subs	r3, #48	; 0x30
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d94e      	bls.n	8006248 <_vfiprintf_r+0x1c4>
 80061aa:	b1b0      	cbz	r0, 80061da <_vfiprintf_r+0x156>
 80061ac:	9207      	str	r2, [sp, #28]
 80061ae:	e014      	b.n	80061da <_vfiprintf_r+0x156>
 80061b0:	eba0 0308 	sub.w	r3, r0, r8
 80061b4:	fa09 f303 	lsl.w	r3, r9, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	46a2      	mov	sl, r4
 80061be:	e7d2      	b.n	8006166 <_vfiprintf_r+0xe2>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	1d19      	adds	r1, r3, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	9103      	str	r1, [sp, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfbb      	ittet	lt
 80061cc:	425b      	neglt	r3, r3
 80061ce:	f042 0202 	orrlt.w	r2, r2, #2
 80061d2:	9307      	strge	r3, [sp, #28]
 80061d4:	9307      	strlt	r3, [sp, #28]
 80061d6:	bfb8      	it	lt
 80061d8:	9204      	strlt	r2, [sp, #16]
 80061da:	7823      	ldrb	r3, [r4, #0]
 80061dc:	2b2e      	cmp	r3, #46	; 0x2e
 80061de:	d10c      	bne.n	80061fa <_vfiprintf_r+0x176>
 80061e0:	7863      	ldrb	r3, [r4, #1]
 80061e2:	2b2a      	cmp	r3, #42	; 0x2a
 80061e4:	d135      	bne.n	8006252 <_vfiprintf_r+0x1ce>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	9203      	str	r2, [sp, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfb8      	it	lt
 80061f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80061f6:	3402      	adds	r4, #2
 80061f8:	9305      	str	r3, [sp, #20]
 80061fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062e0 <_vfiprintf_r+0x25c>
 80061fe:	7821      	ldrb	r1, [r4, #0]
 8006200:	2203      	movs	r2, #3
 8006202:	4650      	mov	r0, sl
 8006204:	f7f9 ffec 	bl	80001e0 <memchr>
 8006208:	b140      	cbz	r0, 800621c <_vfiprintf_r+0x198>
 800620a:	2340      	movs	r3, #64	; 0x40
 800620c:	eba0 000a 	sub.w	r0, r0, sl
 8006210:	fa03 f000 	lsl.w	r0, r3, r0
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	4303      	orrs	r3, r0
 8006218:	3401      	adds	r4, #1
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006220:	482c      	ldr	r0, [pc, #176]	; (80062d4 <_vfiprintf_r+0x250>)
 8006222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006226:	2206      	movs	r2, #6
 8006228:	f7f9 ffda 	bl	80001e0 <memchr>
 800622c:	2800      	cmp	r0, #0
 800622e:	d03f      	beq.n	80062b0 <_vfiprintf_r+0x22c>
 8006230:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <_vfiprintf_r+0x254>)
 8006232:	bb1b      	cbnz	r3, 800627c <_vfiprintf_r+0x1f8>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	3307      	adds	r3, #7
 8006238:	f023 0307 	bic.w	r3, r3, #7
 800623c:	3308      	adds	r3, #8
 800623e:	9303      	str	r3, [sp, #12]
 8006240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006242:	443b      	add	r3, r7
 8006244:	9309      	str	r3, [sp, #36]	; 0x24
 8006246:	e767      	b.n	8006118 <_vfiprintf_r+0x94>
 8006248:	fb0c 3202 	mla	r2, ip, r2, r3
 800624c:	460c      	mov	r4, r1
 800624e:	2001      	movs	r0, #1
 8006250:	e7a5      	b.n	800619e <_vfiprintf_r+0x11a>
 8006252:	2300      	movs	r3, #0
 8006254:	3401      	adds	r4, #1
 8006256:	9305      	str	r3, [sp, #20]
 8006258:	4619      	mov	r1, r3
 800625a:	f04f 0c0a 	mov.w	ip, #10
 800625e:	4620      	mov	r0, r4
 8006260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006264:	3a30      	subs	r2, #48	; 0x30
 8006266:	2a09      	cmp	r2, #9
 8006268:	d903      	bls.n	8006272 <_vfiprintf_r+0x1ee>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0c5      	beq.n	80061fa <_vfiprintf_r+0x176>
 800626e:	9105      	str	r1, [sp, #20]
 8006270:	e7c3      	b.n	80061fa <_vfiprintf_r+0x176>
 8006272:	fb0c 2101 	mla	r1, ip, r1, r2
 8006276:	4604      	mov	r4, r0
 8006278:	2301      	movs	r3, #1
 800627a:	e7f0      	b.n	800625e <_vfiprintf_r+0x1da>
 800627c:	ab03      	add	r3, sp, #12
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	462a      	mov	r2, r5
 8006282:	4b16      	ldr	r3, [pc, #88]	; (80062dc <_vfiprintf_r+0x258>)
 8006284:	a904      	add	r1, sp, #16
 8006286:	4630      	mov	r0, r6
 8006288:	f7fd fee6 	bl	8004058 <_printf_float>
 800628c:	4607      	mov	r7, r0
 800628e:	1c78      	adds	r0, r7, #1
 8006290:	d1d6      	bne.n	8006240 <_vfiprintf_r+0x1bc>
 8006292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006294:	07d9      	lsls	r1, r3, #31
 8006296:	d405      	bmi.n	80062a4 <_vfiprintf_r+0x220>
 8006298:	89ab      	ldrh	r3, [r5, #12]
 800629a:	059a      	lsls	r2, r3, #22
 800629c:	d402      	bmi.n	80062a4 <_vfiprintf_r+0x220>
 800629e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a0:	f7ff fa34 	bl	800570c <__retarget_lock_release_recursive>
 80062a4:	89ab      	ldrh	r3, [r5, #12]
 80062a6:	065b      	lsls	r3, r3, #25
 80062a8:	f53f af12 	bmi.w	80060d0 <_vfiprintf_r+0x4c>
 80062ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ae:	e711      	b.n	80060d4 <_vfiprintf_r+0x50>
 80062b0:	ab03      	add	r3, sp, #12
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	462a      	mov	r2, r5
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <_vfiprintf_r+0x258>)
 80062b8:	a904      	add	r1, sp, #16
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7fe f970 	bl	80045a0 <_printf_i>
 80062c0:	e7e4      	b.n	800628c <_vfiprintf_r+0x208>
 80062c2:	bf00      	nop
 80062c4:	08007b30 	.word	0x08007b30
 80062c8:	08007b50 	.word	0x08007b50
 80062cc:	08007b10 	.word	0x08007b10
 80062d0:	08007ccc 	.word	0x08007ccc
 80062d4:	08007cd6 	.word	0x08007cd6
 80062d8:	08004059 	.word	0x08004059
 80062dc:	0800605f 	.word	0x0800605f
 80062e0:	08007cd2 	.word	0x08007cd2

080062e4 <_sbrk_r>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4d06      	ldr	r5, [pc, #24]	; (8006300 <_sbrk_r+0x1c>)
 80062e8:	2300      	movs	r3, #0
 80062ea:	4604      	mov	r4, r0
 80062ec:	4608      	mov	r0, r1
 80062ee:	602b      	str	r3, [r5, #0]
 80062f0:	f7fb fbde 	bl	8001ab0 <_sbrk>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_sbrk_r+0x1a>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_sbrk_r+0x1a>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	200003a0 	.word	0x200003a0

08006304 <__sread>:
 8006304:	b510      	push	{r4, lr}
 8006306:	460c      	mov	r4, r1
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	f000 faa8 	bl	8006860 <_read_r>
 8006310:	2800      	cmp	r0, #0
 8006312:	bfab      	itete	ge
 8006314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006316:	89a3      	ldrhlt	r3, [r4, #12]
 8006318:	181b      	addge	r3, r3, r0
 800631a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800631e:	bfac      	ite	ge
 8006320:	6563      	strge	r3, [r4, #84]	; 0x54
 8006322:	81a3      	strhlt	r3, [r4, #12]
 8006324:	bd10      	pop	{r4, pc}

08006326 <__swrite>:
 8006326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	461f      	mov	r7, r3
 800632c:	898b      	ldrh	r3, [r1, #12]
 800632e:	05db      	lsls	r3, r3, #23
 8006330:	4605      	mov	r5, r0
 8006332:	460c      	mov	r4, r1
 8006334:	4616      	mov	r6, r2
 8006336:	d505      	bpl.n	8006344 <__swrite+0x1e>
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	2302      	movs	r3, #2
 800633e:	2200      	movs	r2, #0
 8006340:	f000 f9f8 	bl	8006734 <_lseek_r>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800634a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	4632      	mov	r2, r6
 8006352:	463b      	mov	r3, r7
 8006354:	4628      	mov	r0, r5
 8006356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800635a:	f000 b869 	b.w	8006430 <_write_r>

0800635e <__sseek>:
 800635e:	b510      	push	{r4, lr}
 8006360:	460c      	mov	r4, r1
 8006362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006366:	f000 f9e5 	bl	8006734 <_lseek_r>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	bf15      	itete	ne
 8006370:	6560      	strne	r0, [r4, #84]	; 0x54
 8006372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800637a:	81a3      	strheq	r3, [r4, #12]
 800637c:	bf18      	it	ne
 800637e:	81a3      	strhne	r3, [r4, #12]
 8006380:	bd10      	pop	{r4, pc}

08006382 <__sclose>:
 8006382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006386:	f000 b8f1 	b.w	800656c <_close_r>
	...

0800638c <__swbuf_r>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	460e      	mov	r6, r1
 8006390:	4614      	mov	r4, r2
 8006392:	4605      	mov	r5, r0
 8006394:	b118      	cbz	r0, 800639e <__swbuf_r+0x12>
 8006396:	6983      	ldr	r3, [r0, #24]
 8006398:	b90b      	cbnz	r3, 800639e <__swbuf_r+0x12>
 800639a:	f7ff f913 	bl	80055c4 <__sinit>
 800639e:	4b21      	ldr	r3, [pc, #132]	; (8006424 <__swbuf_r+0x98>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	d12b      	bne.n	80063fc <__swbuf_r+0x70>
 80063a4:	686c      	ldr	r4, [r5, #4]
 80063a6:	69a3      	ldr	r3, [r4, #24]
 80063a8:	60a3      	str	r3, [r4, #8]
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	071a      	lsls	r2, r3, #28
 80063ae:	d52f      	bpl.n	8006410 <__swbuf_r+0x84>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	b36b      	cbz	r3, 8006410 <__swbuf_r+0x84>
 80063b4:	6923      	ldr	r3, [r4, #16]
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	1ac0      	subs	r0, r0, r3
 80063ba:	6963      	ldr	r3, [r4, #20]
 80063bc:	b2f6      	uxtb	r6, r6
 80063be:	4283      	cmp	r3, r0
 80063c0:	4637      	mov	r7, r6
 80063c2:	dc04      	bgt.n	80063ce <__swbuf_r+0x42>
 80063c4:	4621      	mov	r1, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 f966 	bl	8006698 <_fflush_r>
 80063cc:	bb30      	cbnz	r0, 800641c <__swbuf_r+0x90>
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	6022      	str	r2, [r4, #0]
 80063da:	701e      	strb	r6, [r3, #0]
 80063dc:	6963      	ldr	r3, [r4, #20]
 80063de:	3001      	adds	r0, #1
 80063e0:	4283      	cmp	r3, r0
 80063e2:	d004      	beq.n	80063ee <__swbuf_r+0x62>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	07db      	lsls	r3, r3, #31
 80063e8:	d506      	bpl.n	80063f8 <__swbuf_r+0x6c>
 80063ea:	2e0a      	cmp	r6, #10
 80063ec:	d104      	bne.n	80063f8 <__swbuf_r+0x6c>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f951 	bl	8006698 <_fflush_r>
 80063f6:	b988      	cbnz	r0, 800641c <__swbuf_r+0x90>
 80063f8:	4638      	mov	r0, r7
 80063fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <__swbuf_r+0x9c>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d101      	bne.n	8006406 <__swbuf_r+0x7a>
 8006402:	68ac      	ldr	r4, [r5, #8]
 8006404:	e7cf      	b.n	80063a6 <__swbuf_r+0x1a>
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <__swbuf_r+0xa0>)
 8006408:	429c      	cmp	r4, r3
 800640a:	bf08      	it	eq
 800640c:	68ec      	ldreq	r4, [r5, #12]
 800640e:	e7ca      	b.n	80063a6 <__swbuf_r+0x1a>
 8006410:	4621      	mov	r1, r4
 8006412:	4628      	mov	r0, r5
 8006414:	f000 f81e 	bl	8006454 <__swsetup_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	d0cb      	beq.n	80063b4 <__swbuf_r+0x28>
 800641c:	f04f 37ff 	mov.w	r7, #4294967295
 8006420:	e7ea      	b.n	80063f8 <__swbuf_r+0x6c>
 8006422:	bf00      	nop
 8006424:	08007b30 	.word	0x08007b30
 8006428:	08007b50 	.word	0x08007b50
 800642c:	08007b10 	.word	0x08007b10

08006430 <_write_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_write_r+0x20>)
 8006434:	4604      	mov	r4, r0
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	2200      	movs	r2, #0
 800643c:	602a      	str	r2, [r5, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	f7fb fae5 	bl	8001a0e <_write>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_write_r+0x1e>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_write_r+0x1e>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	200003a0 	.word	0x200003a0

08006454 <__swsetup_r>:
 8006454:	4b32      	ldr	r3, [pc, #200]	; (8006520 <__swsetup_r+0xcc>)
 8006456:	b570      	push	{r4, r5, r6, lr}
 8006458:	681d      	ldr	r5, [r3, #0]
 800645a:	4606      	mov	r6, r0
 800645c:	460c      	mov	r4, r1
 800645e:	b125      	cbz	r5, 800646a <__swsetup_r+0x16>
 8006460:	69ab      	ldr	r3, [r5, #24]
 8006462:	b913      	cbnz	r3, 800646a <__swsetup_r+0x16>
 8006464:	4628      	mov	r0, r5
 8006466:	f7ff f8ad 	bl	80055c4 <__sinit>
 800646a:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <__swsetup_r+0xd0>)
 800646c:	429c      	cmp	r4, r3
 800646e:	d10f      	bne.n	8006490 <__swsetup_r+0x3c>
 8006470:	686c      	ldr	r4, [r5, #4]
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006478:	0719      	lsls	r1, r3, #28
 800647a:	d42c      	bmi.n	80064d6 <__swsetup_r+0x82>
 800647c:	06dd      	lsls	r5, r3, #27
 800647e:	d411      	bmi.n	80064a4 <__swsetup_r+0x50>
 8006480:	2309      	movs	r3, #9
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	f04f 30ff 	mov.w	r0, #4294967295
 800648e:	e03e      	b.n	800650e <__swsetup_r+0xba>
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <__swsetup_r+0xd4>)
 8006492:	429c      	cmp	r4, r3
 8006494:	d101      	bne.n	800649a <__swsetup_r+0x46>
 8006496:	68ac      	ldr	r4, [r5, #8]
 8006498:	e7eb      	b.n	8006472 <__swsetup_r+0x1e>
 800649a:	4b24      	ldr	r3, [pc, #144]	; (800652c <__swsetup_r+0xd8>)
 800649c:	429c      	cmp	r4, r3
 800649e:	bf08      	it	eq
 80064a0:	68ec      	ldreq	r4, [r5, #12]
 80064a2:	e7e6      	b.n	8006472 <__swsetup_r+0x1e>
 80064a4:	0758      	lsls	r0, r3, #29
 80064a6:	d512      	bpl.n	80064ce <__swsetup_r+0x7a>
 80064a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064aa:	b141      	cbz	r1, 80064be <__swsetup_r+0x6a>
 80064ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d002      	beq.n	80064ba <__swsetup_r+0x66>
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff fcdb 	bl	8005e70 <_free_r>
 80064ba:	2300      	movs	r3, #0
 80064bc:	6363      	str	r3, [r4, #52]	; 0x34
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	2300      	movs	r3, #0
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	b94b      	cbnz	r3, 80064ee <__swsetup_r+0x9a>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e4:	d003      	beq.n	80064ee <__swsetup_r+0x9a>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 f95b 	bl	80067a4 <__smakebuf_r>
 80064ee:	89a0      	ldrh	r0, [r4, #12]
 80064f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064f4:	f010 0301 	ands.w	r3, r0, #1
 80064f8:	d00a      	beq.n	8006510 <__swsetup_r+0xbc>
 80064fa:	2300      	movs	r3, #0
 80064fc:	60a3      	str	r3, [r4, #8]
 80064fe:	6963      	ldr	r3, [r4, #20]
 8006500:	425b      	negs	r3, r3
 8006502:	61a3      	str	r3, [r4, #24]
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	b943      	cbnz	r3, 800651a <__swsetup_r+0xc6>
 8006508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800650c:	d1ba      	bne.n	8006484 <__swsetup_r+0x30>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	0781      	lsls	r1, r0, #30
 8006512:	bf58      	it	pl
 8006514:	6963      	ldrpl	r3, [r4, #20]
 8006516:	60a3      	str	r3, [r4, #8]
 8006518:	e7f4      	b.n	8006504 <__swsetup_r+0xb0>
 800651a:	2000      	movs	r0, #0
 800651c:	e7f7      	b.n	800650e <__swsetup_r+0xba>
 800651e:	bf00      	nop
 8006520:	20000054 	.word	0x20000054
 8006524:	08007b30 	.word	0x08007b30
 8006528:	08007b50 	.word	0x08007b50
 800652c:	08007b10 	.word	0x08007b10

08006530 <__assert_func>:
 8006530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006532:	4614      	mov	r4, r2
 8006534:	461a      	mov	r2, r3
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <__assert_func+0x2c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4605      	mov	r5, r0
 800653c:	68d8      	ldr	r0, [r3, #12]
 800653e:	b14c      	cbz	r4, 8006554 <__assert_func+0x24>
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <__assert_func+0x30>)
 8006542:	9100      	str	r1, [sp, #0]
 8006544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006548:	4906      	ldr	r1, [pc, #24]	; (8006564 <__assert_func+0x34>)
 800654a:	462b      	mov	r3, r5
 800654c:	f000 f8e0 	bl	8006710 <fiprintf>
 8006550:	f000 f9a5 	bl	800689e <abort>
 8006554:	4b04      	ldr	r3, [pc, #16]	; (8006568 <__assert_func+0x38>)
 8006556:	461c      	mov	r4, r3
 8006558:	e7f3      	b.n	8006542 <__assert_func+0x12>
 800655a:	bf00      	nop
 800655c:	20000054 	.word	0x20000054
 8006560:	08007cdd 	.word	0x08007cdd
 8006564:	08007cea 	.word	0x08007cea
 8006568:	08007d18 	.word	0x08007d18

0800656c <_close_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d06      	ldr	r5, [pc, #24]	; (8006588 <_close_r+0x1c>)
 8006570:	2300      	movs	r3, #0
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	f7fb fa65 	bl	8001a46 <_close>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_close_r+0x1a>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_close_r+0x1a>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	200003a0 	.word	0x200003a0

0800658c <__sflush_r>:
 800658c:	898a      	ldrh	r2, [r1, #12]
 800658e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	4605      	mov	r5, r0
 8006594:	0710      	lsls	r0, r2, #28
 8006596:	460c      	mov	r4, r1
 8006598:	d458      	bmi.n	800664c <__sflush_r+0xc0>
 800659a:	684b      	ldr	r3, [r1, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dc05      	bgt.n	80065ac <__sflush_r+0x20>
 80065a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dc02      	bgt.n	80065ac <__sflush_r+0x20>
 80065a6:	2000      	movs	r0, #0
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065ae:	2e00      	cmp	r6, #0
 80065b0:	d0f9      	beq.n	80065a6 <__sflush_r+0x1a>
 80065b2:	2300      	movs	r3, #0
 80065b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065b8:	682f      	ldr	r7, [r5, #0]
 80065ba:	602b      	str	r3, [r5, #0]
 80065bc:	d032      	beq.n	8006624 <__sflush_r+0x98>
 80065be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	075a      	lsls	r2, r3, #29
 80065c4:	d505      	bpl.n	80065d2 <__sflush_r+0x46>
 80065c6:	6863      	ldr	r3, [r4, #4]
 80065c8:	1ac0      	subs	r0, r0, r3
 80065ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065cc:	b10b      	cbz	r3, 80065d2 <__sflush_r+0x46>
 80065ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065d0:	1ac0      	subs	r0, r0, r3
 80065d2:	2300      	movs	r3, #0
 80065d4:	4602      	mov	r2, r0
 80065d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065d8:	6a21      	ldr	r1, [r4, #32]
 80065da:	4628      	mov	r0, r5
 80065dc:	47b0      	blx	r6
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	d106      	bne.n	80065f2 <__sflush_r+0x66>
 80065e4:	6829      	ldr	r1, [r5, #0]
 80065e6:	291d      	cmp	r1, #29
 80065e8:	d82c      	bhi.n	8006644 <__sflush_r+0xb8>
 80065ea:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <__sflush_r+0x108>)
 80065ec:	40ca      	lsrs	r2, r1
 80065ee:	07d6      	lsls	r6, r2, #31
 80065f0:	d528      	bpl.n	8006644 <__sflush_r+0xb8>
 80065f2:	2200      	movs	r2, #0
 80065f4:	6062      	str	r2, [r4, #4]
 80065f6:	04d9      	lsls	r1, r3, #19
 80065f8:	6922      	ldr	r2, [r4, #16]
 80065fa:	6022      	str	r2, [r4, #0]
 80065fc:	d504      	bpl.n	8006608 <__sflush_r+0x7c>
 80065fe:	1c42      	adds	r2, r0, #1
 8006600:	d101      	bne.n	8006606 <__sflush_r+0x7a>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b903      	cbnz	r3, 8006608 <__sflush_r+0x7c>
 8006606:	6560      	str	r0, [r4, #84]	; 0x54
 8006608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800660a:	602f      	str	r7, [r5, #0]
 800660c:	2900      	cmp	r1, #0
 800660e:	d0ca      	beq.n	80065a6 <__sflush_r+0x1a>
 8006610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006614:	4299      	cmp	r1, r3
 8006616:	d002      	beq.n	800661e <__sflush_r+0x92>
 8006618:	4628      	mov	r0, r5
 800661a:	f7ff fc29 	bl	8005e70 <_free_r>
 800661e:	2000      	movs	r0, #0
 8006620:	6360      	str	r0, [r4, #52]	; 0x34
 8006622:	e7c1      	b.n	80065a8 <__sflush_r+0x1c>
 8006624:	6a21      	ldr	r1, [r4, #32]
 8006626:	2301      	movs	r3, #1
 8006628:	4628      	mov	r0, r5
 800662a:	47b0      	blx	r6
 800662c:	1c41      	adds	r1, r0, #1
 800662e:	d1c7      	bne.n	80065c0 <__sflush_r+0x34>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0c4      	beq.n	80065c0 <__sflush_r+0x34>
 8006636:	2b1d      	cmp	r3, #29
 8006638:	d001      	beq.n	800663e <__sflush_r+0xb2>
 800663a:	2b16      	cmp	r3, #22
 800663c:	d101      	bne.n	8006642 <__sflush_r+0xb6>
 800663e:	602f      	str	r7, [r5, #0]
 8006640:	e7b1      	b.n	80065a6 <__sflush_r+0x1a>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	e7ad      	b.n	80065a8 <__sflush_r+0x1c>
 800664c:	690f      	ldr	r7, [r1, #16]
 800664e:	2f00      	cmp	r7, #0
 8006650:	d0a9      	beq.n	80065a6 <__sflush_r+0x1a>
 8006652:	0793      	lsls	r3, r2, #30
 8006654:	680e      	ldr	r6, [r1, #0]
 8006656:	bf08      	it	eq
 8006658:	694b      	ldreq	r3, [r1, #20]
 800665a:	600f      	str	r7, [r1, #0]
 800665c:	bf18      	it	ne
 800665e:	2300      	movne	r3, #0
 8006660:	eba6 0807 	sub.w	r8, r6, r7
 8006664:	608b      	str	r3, [r1, #8]
 8006666:	f1b8 0f00 	cmp.w	r8, #0
 800666a:	dd9c      	ble.n	80065a6 <__sflush_r+0x1a>
 800666c:	6a21      	ldr	r1, [r4, #32]
 800666e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006670:	4643      	mov	r3, r8
 8006672:	463a      	mov	r2, r7
 8006674:	4628      	mov	r0, r5
 8006676:	47b0      	blx	r6
 8006678:	2800      	cmp	r0, #0
 800667a:	dc06      	bgt.n	800668a <__sflush_r+0xfe>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	e78e      	b.n	80065a8 <__sflush_r+0x1c>
 800668a:	4407      	add	r7, r0
 800668c:	eba8 0800 	sub.w	r8, r8, r0
 8006690:	e7e9      	b.n	8006666 <__sflush_r+0xda>
 8006692:	bf00      	nop
 8006694:	20400001 	.word	0x20400001

08006698 <_fflush_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	4605      	mov	r5, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	b913      	cbnz	r3, 80066a8 <_fflush_r+0x10>
 80066a2:	2500      	movs	r5, #0
 80066a4:	4628      	mov	r0, r5
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	b118      	cbz	r0, 80066b2 <_fflush_r+0x1a>
 80066aa:	6983      	ldr	r3, [r0, #24]
 80066ac:	b90b      	cbnz	r3, 80066b2 <_fflush_r+0x1a>
 80066ae:	f7fe ff89 	bl	80055c4 <__sinit>
 80066b2:	4b14      	ldr	r3, [pc, #80]	; (8006704 <_fflush_r+0x6c>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	d11b      	bne.n	80066f0 <_fflush_r+0x58>
 80066b8:	686c      	ldr	r4, [r5, #4]
 80066ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0ef      	beq.n	80066a2 <_fflush_r+0xa>
 80066c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066c4:	07d0      	lsls	r0, r2, #31
 80066c6:	d404      	bmi.n	80066d2 <_fflush_r+0x3a>
 80066c8:	0599      	lsls	r1, r3, #22
 80066ca:	d402      	bmi.n	80066d2 <_fflush_r+0x3a>
 80066cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ce:	f7ff f81c 	bl	800570a <__retarget_lock_acquire_recursive>
 80066d2:	4628      	mov	r0, r5
 80066d4:	4621      	mov	r1, r4
 80066d6:	f7ff ff59 	bl	800658c <__sflush_r>
 80066da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066dc:	07da      	lsls	r2, r3, #31
 80066de:	4605      	mov	r5, r0
 80066e0:	d4e0      	bmi.n	80066a4 <_fflush_r+0xc>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	059b      	lsls	r3, r3, #22
 80066e6:	d4dd      	bmi.n	80066a4 <_fflush_r+0xc>
 80066e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ea:	f7ff f80f 	bl	800570c <__retarget_lock_release_recursive>
 80066ee:	e7d9      	b.n	80066a4 <_fflush_r+0xc>
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <_fflush_r+0x70>)
 80066f2:	429c      	cmp	r4, r3
 80066f4:	d101      	bne.n	80066fa <_fflush_r+0x62>
 80066f6:	68ac      	ldr	r4, [r5, #8]
 80066f8:	e7df      	b.n	80066ba <_fflush_r+0x22>
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <_fflush_r+0x74>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	bf08      	it	eq
 8006700:	68ec      	ldreq	r4, [r5, #12]
 8006702:	e7da      	b.n	80066ba <_fflush_r+0x22>
 8006704:	08007b30 	.word	0x08007b30
 8006708:	08007b50 	.word	0x08007b50
 800670c:	08007b10 	.word	0x08007b10

08006710 <fiprintf>:
 8006710:	b40e      	push	{r1, r2, r3}
 8006712:	b503      	push	{r0, r1, lr}
 8006714:	4601      	mov	r1, r0
 8006716:	ab03      	add	r3, sp, #12
 8006718:	4805      	ldr	r0, [pc, #20]	; (8006730 <fiprintf+0x20>)
 800671a:	f853 2b04 	ldr.w	r2, [r3], #4
 800671e:	6800      	ldr	r0, [r0, #0]
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	f7ff fcaf 	bl	8006084 <_vfiprintf_r>
 8006726:	b002      	add	sp, #8
 8006728:	f85d eb04 	ldr.w	lr, [sp], #4
 800672c:	b003      	add	sp, #12
 800672e:	4770      	bx	lr
 8006730:	20000054 	.word	0x20000054

08006734 <_lseek_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	; (8006754 <_lseek_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fb f9a6 	bl	8001a94 <_lseek>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_lseek_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_lseek_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	200003a0 	.word	0x200003a0

08006758 <__swhatbuf_r>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	460e      	mov	r6, r1
 800675c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006760:	2900      	cmp	r1, #0
 8006762:	b096      	sub	sp, #88	; 0x58
 8006764:	4614      	mov	r4, r2
 8006766:	461d      	mov	r5, r3
 8006768:	da08      	bge.n	800677c <__swhatbuf_r+0x24>
 800676a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	061a      	lsls	r2, r3, #24
 8006774:	d410      	bmi.n	8006798 <__swhatbuf_r+0x40>
 8006776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800677a:	e00e      	b.n	800679a <__swhatbuf_r+0x42>
 800677c:	466a      	mov	r2, sp
 800677e:	f000 f895 	bl	80068ac <_fstat_r>
 8006782:	2800      	cmp	r0, #0
 8006784:	dbf1      	blt.n	800676a <__swhatbuf_r+0x12>
 8006786:	9a01      	ldr	r2, [sp, #4]
 8006788:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800678c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006790:	425a      	negs	r2, r3
 8006792:	415a      	adcs	r2, r3
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	e7ee      	b.n	8006776 <__swhatbuf_r+0x1e>
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	2000      	movs	r0, #0
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	b016      	add	sp, #88	; 0x58
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080067a4 <__smakebuf_r>:
 80067a4:	898b      	ldrh	r3, [r1, #12]
 80067a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067a8:	079d      	lsls	r5, r3, #30
 80067aa:	4606      	mov	r6, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	d507      	bpl.n	80067c0 <__smakebuf_r+0x1c>
 80067b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	2301      	movs	r3, #1
 80067ba:	6163      	str	r3, [r4, #20]
 80067bc:	b002      	add	sp, #8
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	ab01      	add	r3, sp, #4
 80067c2:	466a      	mov	r2, sp
 80067c4:	f7ff ffc8 	bl	8006758 <__swhatbuf_r>
 80067c8:	9900      	ldr	r1, [sp, #0]
 80067ca:	4605      	mov	r5, r0
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff fbbb 	bl	8005f48 <_malloc_r>
 80067d2:	b948      	cbnz	r0, 80067e8 <__smakebuf_r+0x44>
 80067d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d8:	059a      	lsls	r2, r3, #22
 80067da:	d4ef      	bmi.n	80067bc <__smakebuf_r+0x18>
 80067dc:	f023 0303 	bic.w	r3, r3, #3
 80067e0:	f043 0302 	orr.w	r3, r3, #2
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	e7e3      	b.n	80067b0 <__smakebuf_r+0xc>
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <__smakebuf_r+0x7c>)
 80067ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	6020      	str	r0, [r4, #0]
 80067f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	6163      	str	r3, [r4, #20]
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	6120      	str	r0, [r4, #16]
 80067fe:	b15b      	cbz	r3, 8006818 <__smakebuf_r+0x74>
 8006800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f863 	bl	80068d0 <_isatty_r>
 800680a:	b128      	cbz	r0, 8006818 <__smakebuf_r+0x74>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	89a0      	ldrh	r0, [r4, #12]
 800681a:	4305      	orrs	r5, r0
 800681c:	81a5      	strh	r5, [r4, #12]
 800681e:	e7cd      	b.n	80067bc <__smakebuf_r+0x18>
 8006820:	0800555d 	.word	0x0800555d

08006824 <__ascii_mbtowc>:
 8006824:	b082      	sub	sp, #8
 8006826:	b901      	cbnz	r1, 800682a <__ascii_mbtowc+0x6>
 8006828:	a901      	add	r1, sp, #4
 800682a:	b142      	cbz	r2, 800683e <__ascii_mbtowc+0x1a>
 800682c:	b14b      	cbz	r3, 8006842 <__ascii_mbtowc+0x1e>
 800682e:	7813      	ldrb	r3, [r2, #0]
 8006830:	600b      	str	r3, [r1, #0]
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	1e10      	subs	r0, r2, #0
 8006836:	bf18      	it	ne
 8006838:	2001      	movne	r0, #1
 800683a:	b002      	add	sp, #8
 800683c:	4770      	bx	lr
 800683e:	4610      	mov	r0, r2
 8006840:	e7fb      	b.n	800683a <__ascii_mbtowc+0x16>
 8006842:	f06f 0001 	mvn.w	r0, #1
 8006846:	e7f8      	b.n	800683a <__ascii_mbtowc+0x16>

08006848 <__malloc_lock>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__malloc_lock+0x8>)
 800684a:	f7fe bf5e 	b.w	800570a <__retarget_lock_acquire_recursive>
 800684e:	bf00      	nop
 8006850:	20000394 	.word	0x20000394

08006854 <__malloc_unlock>:
 8006854:	4801      	ldr	r0, [pc, #4]	; (800685c <__malloc_unlock+0x8>)
 8006856:	f7fe bf59 	b.w	800570c <__retarget_lock_release_recursive>
 800685a:	bf00      	nop
 800685c:	20000394 	.word	0x20000394

08006860 <_read_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d07      	ldr	r5, [pc, #28]	; (8006880 <_read_r+0x20>)
 8006864:	4604      	mov	r4, r0
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	2200      	movs	r2, #0
 800686c:	602a      	str	r2, [r5, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f7fb f8b0 	bl	80019d4 <_read>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_read_r+0x1e>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_read_r+0x1e>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	200003a0 	.word	0x200003a0

08006884 <__ascii_wctomb>:
 8006884:	b149      	cbz	r1, 800689a <__ascii_wctomb+0x16>
 8006886:	2aff      	cmp	r2, #255	; 0xff
 8006888:	bf85      	ittet	hi
 800688a:	238a      	movhi	r3, #138	; 0x8a
 800688c:	6003      	strhi	r3, [r0, #0]
 800688e:	700a      	strbls	r2, [r1, #0]
 8006890:	f04f 30ff 	movhi.w	r0, #4294967295
 8006894:	bf98      	it	ls
 8006896:	2001      	movls	r0, #1
 8006898:	4770      	bx	lr
 800689a:	4608      	mov	r0, r1
 800689c:	4770      	bx	lr

0800689e <abort>:
 800689e:	b508      	push	{r3, lr}
 80068a0:	2006      	movs	r0, #6
 80068a2:	f000 f84d 	bl	8006940 <raise>
 80068a6:	2001      	movs	r0, #1
 80068a8:	f7fb f88a 	bl	80019c0 <_exit>

080068ac <_fstat_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d07      	ldr	r5, [pc, #28]	; (80068cc <_fstat_r+0x20>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	4611      	mov	r1, r2
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	f7fb f8d0 	bl	8001a5e <_fstat>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d102      	bne.n	80068c8 <_fstat_r+0x1c>
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	b103      	cbz	r3, 80068c8 <_fstat_r+0x1c>
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	200003a0 	.word	0x200003a0

080068d0 <_isatty_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4d06      	ldr	r5, [pc, #24]	; (80068ec <_isatty_r+0x1c>)
 80068d4:	2300      	movs	r3, #0
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fb f8cf 	bl	8001a7e <_isatty>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_isatty_r+0x1a>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_isatty_r+0x1a>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	200003a0 	.word	0x200003a0

080068f0 <_raise_r>:
 80068f0:	291f      	cmp	r1, #31
 80068f2:	b538      	push	{r3, r4, r5, lr}
 80068f4:	4604      	mov	r4, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	d904      	bls.n	8006904 <_raise_r+0x14>
 80068fa:	2316      	movs	r3, #22
 80068fc:	6003      	str	r3, [r0, #0]
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006906:	b112      	cbz	r2, 800690e <_raise_r+0x1e>
 8006908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800690c:	b94b      	cbnz	r3, 8006922 <_raise_r+0x32>
 800690e:	4620      	mov	r0, r4
 8006910:	f000 f830 	bl	8006974 <_getpid_r>
 8006914:	462a      	mov	r2, r5
 8006916:	4601      	mov	r1, r0
 8006918:	4620      	mov	r0, r4
 800691a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800691e:	f000 b817 	b.w	8006950 <_kill_r>
 8006922:	2b01      	cmp	r3, #1
 8006924:	d00a      	beq.n	800693c <_raise_r+0x4c>
 8006926:	1c59      	adds	r1, r3, #1
 8006928:	d103      	bne.n	8006932 <_raise_r+0x42>
 800692a:	2316      	movs	r3, #22
 800692c:	6003      	str	r3, [r0, #0]
 800692e:	2001      	movs	r0, #1
 8006930:	e7e7      	b.n	8006902 <_raise_r+0x12>
 8006932:	2400      	movs	r4, #0
 8006934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006938:	4628      	mov	r0, r5
 800693a:	4798      	blx	r3
 800693c:	2000      	movs	r0, #0
 800693e:	e7e0      	b.n	8006902 <_raise_r+0x12>

08006940 <raise>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <raise+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f7ff bfd3 	b.w	80068f0 <_raise_r>
 800694a:	bf00      	nop
 800694c:	20000054 	.word	0x20000054

08006950 <_kill_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d07      	ldr	r5, [pc, #28]	; (8006970 <_kill_r+0x20>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	4611      	mov	r1, r2
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	f7fb f81f 	bl	80019a0 <_kill>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d102      	bne.n	800696c <_kill_r+0x1c>
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	b103      	cbz	r3, 800696c <_kill_r+0x1c>
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	bd38      	pop	{r3, r4, r5, pc}
 800696e:	bf00      	nop
 8006970:	200003a0 	.word	0x200003a0

08006974 <_getpid_r>:
 8006974:	f7fb b80c 	b.w	8001990 <_getpid>

08006978 <sin>:
 8006978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800697a:	ec53 2b10 	vmov	r2, r3, d0
 800697e:	4828      	ldr	r0, [pc, #160]	; (8006a20 <sin+0xa8>)
 8006980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006984:	4281      	cmp	r1, r0
 8006986:	dc07      	bgt.n	8006998 <sin+0x20>
 8006988:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006a18 <sin+0xa0>
 800698c:	2000      	movs	r0, #0
 800698e:	b005      	add	sp, #20
 8006990:	f85d eb04 	ldr.w	lr, [sp], #4
 8006994:	f000 be6c 	b.w	8007670 <__kernel_sin>
 8006998:	4822      	ldr	r0, [pc, #136]	; (8006a24 <sin+0xac>)
 800699a:	4281      	cmp	r1, r0
 800699c:	dd09      	ble.n	80069b2 <sin+0x3a>
 800699e:	ee10 0a10 	vmov	r0, s0
 80069a2:	4619      	mov	r1, r3
 80069a4:	f7f9 fc70 	bl	8000288 <__aeabi_dsub>
 80069a8:	ec41 0b10 	vmov	d0, r0, r1
 80069ac:	b005      	add	sp, #20
 80069ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80069b2:	4668      	mov	r0, sp
 80069b4:	f000 f838 	bl	8006a28 <__ieee754_rem_pio2>
 80069b8:	f000 0003 	and.w	r0, r0, #3
 80069bc:	2801      	cmp	r0, #1
 80069be:	d00c      	beq.n	80069da <sin+0x62>
 80069c0:	2802      	cmp	r0, #2
 80069c2:	d011      	beq.n	80069e8 <sin+0x70>
 80069c4:	b9f0      	cbnz	r0, 8006a04 <sin+0x8c>
 80069c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069ca:	ed9d 0b00 	vldr	d0, [sp]
 80069ce:	2001      	movs	r0, #1
 80069d0:	f000 fe4e 	bl	8007670 <__kernel_sin>
 80069d4:	ec51 0b10 	vmov	r0, r1, d0
 80069d8:	e7e6      	b.n	80069a8 <sin+0x30>
 80069da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069de:	ed9d 0b00 	vldr	d0, [sp]
 80069e2:	f000 fa2d 	bl	8006e40 <__kernel_cos>
 80069e6:	e7f5      	b.n	80069d4 <sin+0x5c>
 80069e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069ec:	ed9d 0b00 	vldr	d0, [sp]
 80069f0:	2001      	movs	r0, #1
 80069f2:	f000 fe3d 	bl	8007670 <__kernel_sin>
 80069f6:	ec53 2b10 	vmov	r2, r3, d0
 80069fa:	ee10 0a10 	vmov	r0, s0
 80069fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a02:	e7d1      	b.n	80069a8 <sin+0x30>
 8006a04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a08:	ed9d 0b00 	vldr	d0, [sp]
 8006a0c:	f000 fa18 	bl	8006e40 <__kernel_cos>
 8006a10:	e7f1      	b.n	80069f6 <sin+0x7e>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
	...
 8006a20:	3fe921fb 	.word	0x3fe921fb
 8006a24:	7fefffff 	.word	0x7fefffff

08006a28 <__ieee754_rem_pio2>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	ed2d 8b02 	vpush	{d8}
 8006a30:	ec55 4b10 	vmov	r4, r5, d0
 8006a34:	4bca      	ldr	r3, [pc, #808]	; (8006d60 <__ieee754_rem_pio2+0x338>)
 8006a36:	b08b      	sub	sp, #44	; 0x2c
 8006a38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006a3c:	4598      	cmp	r8, r3
 8006a3e:	4682      	mov	sl, r0
 8006a40:	9502      	str	r5, [sp, #8]
 8006a42:	dc08      	bgt.n	8006a56 <__ieee754_rem_pio2+0x2e>
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	ed80 0b00 	vstr	d0, [r0]
 8006a4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a50:	f04f 0b00 	mov.w	fp, #0
 8006a54:	e028      	b.n	8006aa8 <__ieee754_rem_pio2+0x80>
 8006a56:	4bc3      	ldr	r3, [pc, #780]	; (8006d64 <__ieee754_rem_pio2+0x33c>)
 8006a58:	4598      	cmp	r8, r3
 8006a5a:	dc78      	bgt.n	8006b4e <__ieee754_rem_pio2+0x126>
 8006a5c:	9b02      	ldr	r3, [sp, #8]
 8006a5e:	4ec2      	ldr	r6, [pc, #776]	; (8006d68 <__ieee754_rem_pio2+0x340>)
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	ee10 0a10 	vmov	r0, s0
 8006a66:	a3b0      	add	r3, pc, #704	; (adr r3, 8006d28 <__ieee754_rem_pio2+0x300>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	dd39      	ble.n	8006ae4 <__ieee754_rem_pio2+0xbc>
 8006a70:	f7f9 fc0a 	bl	8000288 <__aeabi_dsub>
 8006a74:	45b0      	cmp	r8, r6
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	d01b      	beq.n	8006ab4 <__ieee754_rem_pio2+0x8c>
 8006a7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x308>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fc01 	bl	8000288 <__aeabi_dsub>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	e9ca 2300 	strd	r2, r3, [sl]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7f9 fbf9 	bl	8000288 <__aeabi_dsub>
 8006a96:	a3a6      	add	r3, pc, #664	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x308>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fbf4 	bl	8000288 <__aeabi_dsub>
 8006aa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006aa4:	f04f 0b01 	mov.w	fp, #1
 8006aa8:	4658      	mov	r0, fp
 8006aaa:	b00b      	add	sp, #44	; 0x2c
 8006aac:	ecbd 8b02 	vpop	{d8}
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x310>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fbe5 	bl	8000288 <__aeabi_dsub>
 8006abe:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x318>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	f7f9 fbde 	bl	8000288 <__aeabi_dsub>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	e9ca 2300 	strd	r2, r3, [sl]
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7f9 fbd6 	bl	8000288 <__aeabi_dsub>
 8006adc:	a398      	add	r3, pc, #608	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x318>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	e7db      	b.n	8006a9c <__ieee754_rem_pio2+0x74>
 8006ae4:	f7f9 fbd2 	bl	800028c <__adddf3>
 8006ae8:	45b0      	cmp	r8, r6
 8006aea:	4604      	mov	r4, r0
 8006aec:	460d      	mov	r5, r1
 8006aee:	d016      	beq.n	8006b1e <__ieee754_rem_pio2+0xf6>
 8006af0:	a38f      	add	r3, pc, #572	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x308>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 fbc9 	bl	800028c <__adddf3>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	e9ca 2300 	strd	r2, r3, [sl]
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 fbbf 	bl	8000288 <__aeabi_dsub>
 8006b0a:	a389      	add	r3, pc, #548	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x308>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fbbc 	bl	800028c <__adddf3>
 8006b14:	f04f 3bff 	mov.w	fp, #4294967295
 8006b18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b1c:	e7c4      	b.n	8006aa8 <__ieee754_rem_pio2+0x80>
 8006b1e:	a386      	add	r3, pc, #536	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x310>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fbb2 	bl	800028c <__adddf3>
 8006b28:	a385      	add	r3, pc, #532	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x318>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	f7f9 fbab 	bl	800028c <__adddf3>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	e9ca 2300 	strd	r2, r3, [sl]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 fba1 	bl	8000288 <__aeabi_dsub>
 8006b46:	a37e      	add	r3, pc, #504	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x318>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	e7e0      	b.n	8006b10 <__ieee754_rem_pio2+0xe8>
 8006b4e:	4b87      	ldr	r3, [pc, #540]	; (8006d6c <__ieee754_rem_pio2+0x344>)
 8006b50:	4598      	cmp	r8, r3
 8006b52:	f300 80d9 	bgt.w	8006d08 <__ieee754_rem_pio2+0x2e0>
 8006b56:	f000 fe49 	bl	80077ec <fabs>
 8006b5a:	ec55 4b10 	vmov	r4, r5, d0
 8006b5e:	ee10 0a10 	vmov	r0, s0
 8006b62:	a379      	add	r3, pc, #484	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x320>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	4629      	mov	r1, r5
 8006b6a:	f7f9 fd45 	bl	80005f8 <__aeabi_dmul>
 8006b6e:	4b80      	ldr	r3, [pc, #512]	; (8006d70 <__ieee754_rem_pio2+0x348>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	f7f9 ffef 	bl	8000b58 <__aeabi_d2iz>
 8006b7a:	4683      	mov	fp, r0
 8006b7c:	f7f9 fcd2 	bl	8000524 <__aeabi_i2d>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	ec43 2b18 	vmov	d8, r2, r3
 8006b88:	a367      	add	r3, pc, #412	; (adr r3, 8006d28 <__ieee754_rem_pio2+0x300>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fd33 	bl	80005f8 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 fb75 	bl	8000288 <__aeabi_dsub>
 8006b9e:	a364      	add	r3, pc, #400	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x308>)
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	ec51 0b18 	vmov	r0, r1, d8
 8006bac:	f7f9 fd24 	bl	80005f8 <__aeabi_dmul>
 8006bb0:	f1bb 0f1f 	cmp.w	fp, #31
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	dc0d      	bgt.n	8006bd6 <__ieee754_rem_pio2+0x1ae>
 8006bba:	4b6e      	ldr	r3, [pc, #440]	; (8006d74 <__ieee754_rem_pio2+0x34c>)
 8006bbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	d006      	beq.n	8006bd6 <__ieee754_rem_pio2+0x1ae>
 8006bc8:	4622      	mov	r2, r4
 8006bca:	462b      	mov	r3, r5
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 fb5a 	bl	8000288 <__aeabi_dsub>
 8006bd4:	e00f      	b.n	8006bf6 <__ieee754_rem_pio2+0x1ce>
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4630      	mov	r0, r6
 8006bdc:	4639      	mov	r1, r7
 8006bde:	f7f9 fb53 	bl	8000288 <__aeabi_dsub>
 8006be2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006bec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006bf0:	f1b8 0f10 	cmp.w	r8, #16
 8006bf4:	dc02      	bgt.n	8006bfc <__ieee754_rem_pio2+0x1d4>
 8006bf6:	e9ca 0100 	strd	r0, r1, [sl]
 8006bfa:	e039      	b.n	8006c70 <__ieee754_rem_pio2+0x248>
 8006bfc:	a34e      	add	r3, pc, #312	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x310>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	ec51 0b18 	vmov	r0, r1, d8
 8006c06:	f7f9 fcf7 	bl	80005f8 <__aeabi_dmul>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7f9 fb37 	bl	8000288 <__aeabi_dsub>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4680      	mov	r8, r0
 8006c20:	4689      	mov	r9, r1
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 fb2f 	bl	8000288 <__aeabi_dsub>
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	f7f9 fb2b 	bl	8000288 <__aeabi_dsub>
 8006c32:	a343      	add	r3, pc, #268	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x318>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	4604      	mov	r4, r0
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	ec51 0b18 	vmov	r0, r1, d8
 8006c40:	f7f9 fcda 	bl	80005f8 <__aeabi_dmul>
 8006c44:	4622      	mov	r2, r4
 8006c46:	462b      	mov	r3, r5
 8006c48:	f7f9 fb1e 	bl	8000288 <__aeabi_dsub>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	4640      	mov	r0, r8
 8006c56:	4649      	mov	r1, r9
 8006c58:	f7f9 fb16 	bl	8000288 <__aeabi_dsub>
 8006c5c:	9a03      	ldr	r2, [sp, #12]
 8006c5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b31      	cmp	r3, #49	; 0x31
 8006c66:	dc24      	bgt.n	8006cb2 <__ieee754_rem_pio2+0x28a>
 8006c68:	e9ca 0100 	strd	r0, r1, [sl]
 8006c6c:	4646      	mov	r6, r8
 8006c6e:	464f      	mov	r7, r9
 8006c70:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c74:	4630      	mov	r0, r6
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 fb04 	bl	8000288 <__aeabi_dsub>
 8006c80:	462b      	mov	r3, r5
 8006c82:	4622      	mov	r2, r4
 8006c84:	f7f9 fb00 	bl	8000288 <__aeabi_dsub>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c90:	f6bf af0a 	bge.w	8006aa8 <__ieee754_rem_pio2+0x80>
 8006c94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c98:	f8ca 3004 	str.w	r3, [sl, #4]
 8006c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ca0:	f8ca 8000 	str.w	r8, [sl]
 8006ca4:	f8ca 0008 	str.w	r0, [sl, #8]
 8006ca8:	f8ca 300c 	str.w	r3, [sl, #12]
 8006cac:	f1cb 0b00 	rsb	fp, fp, #0
 8006cb0:	e6fa      	b.n	8006aa8 <__ieee754_rem_pio2+0x80>
 8006cb2:	a327      	add	r3, pc, #156	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x328>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	ec51 0b18 	vmov	r0, r1, d8
 8006cbc:	f7f9 fc9c 	bl	80005f8 <__aeabi_dmul>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 fadc 	bl	8000288 <__aeabi_dsub>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fad4 	bl	8000288 <__aeabi_dsub>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	f7f9 fad0 	bl	8000288 <__aeabi_dsub>
 8006ce8:	a31b      	add	r3, pc, #108	; (adr r3, 8006d58 <__ieee754_rem_pio2+0x330>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	4604      	mov	r4, r0
 8006cf0:	460d      	mov	r5, r1
 8006cf2:	ec51 0b18 	vmov	r0, r1, d8
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	4622      	mov	r2, r4
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	f7f9 fac3 	bl	8000288 <__aeabi_dsub>
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	e75f      	b.n	8006bc8 <__ieee754_rem_pio2+0x1a0>
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <__ieee754_rem_pio2+0x350>)
 8006d0a:	4598      	cmp	r8, r3
 8006d0c:	dd36      	ble.n	8006d7c <__ieee754_rem_pio2+0x354>
 8006d0e:	ee10 2a10 	vmov	r2, s0
 8006d12:	462b      	mov	r3, r5
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fab6 	bl	8000288 <__aeabi_dsub>
 8006d1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d20:	e9ca 0100 	strd	r0, r1, [sl]
 8006d24:	e694      	b.n	8006a50 <__ieee754_rem_pio2+0x28>
 8006d26:	bf00      	nop
 8006d28:	54400000 	.word	0x54400000
 8006d2c:	3ff921fb 	.word	0x3ff921fb
 8006d30:	1a626331 	.word	0x1a626331
 8006d34:	3dd0b461 	.word	0x3dd0b461
 8006d38:	1a600000 	.word	0x1a600000
 8006d3c:	3dd0b461 	.word	0x3dd0b461
 8006d40:	2e037073 	.word	0x2e037073
 8006d44:	3ba3198a 	.word	0x3ba3198a
 8006d48:	6dc9c883 	.word	0x6dc9c883
 8006d4c:	3fe45f30 	.word	0x3fe45f30
 8006d50:	2e000000 	.word	0x2e000000
 8006d54:	3ba3198a 	.word	0x3ba3198a
 8006d58:	252049c1 	.word	0x252049c1
 8006d5c:	397b839a 	.word	0x397b839a
 8006d60:	3fe921fb 	.word	0x3fe921fb
 8006d64:	4002d97b 	.word	0x4002d97b
 8006d68:	3ff921fb 	.word	0x3ff921fb
 8006d6c:	413921fb 	.word	0x413921fb
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	08007e24 	.word	0x08007e24
 8006d78:	7fefffff 	.word	0x7fefffff
 8006d7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006d80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006d84:	ee10 0a10 	vmov	r0, s0
 8006d88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006d8c:	ee10 6a10 	vmov	r6, s0
 8006d90:	460f      	mov	r7, r1
 8006d92:	f7f9 fee1 	bl	8000b58 <__aeabi_d2iz>
 8006d96:	f7f9 fbc5 	bl	8000524 <__aeabi_i2d>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da6:	f7f9 fa6f 	bl	8000288 <__aeabi_dsub>
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <__ieee754_rem_pio2+0x410>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	f7f9 fc23 	bl	80005f8 <__aeabi_dmul>
 8006db2:	460f      	mov	r7, r1
 8006db4:	4606      	mov	r6, r0
 8006db6:	f7f9 fecf 	bl	8000b58 <__aeabi_d2iz>
 8006dba:	f7f9 fbb3 	bl	8000524 <__aeabi_i2d>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dca:	f7f9 fa5d 	bl	8000288 <__aeabi_dsub>
 8006dce:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <__ieee754_rem_pio2+0x410>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 fc11 	bl	80005f8 <__aeabi_dmul>
 8006dd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006dda:	ad04      	add	r5, sp, #16
 8006ddc:	f04f 0803 	mov.w	r8, #3
 8006de0:	46a9      	mov	r9, r5
 8006de2:	2600      	movs	r6, #0
 8006de4:	2700      	movs	r7, #0
 8006de6:	4632      	mov	r2, r6
 8006de8:	463b      	mov	r3, r7
 8006dea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006dee:	46c3      	mov	fp, r8
 8006df0:	3d08      	subs	r5, #8
 8006df2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006df6:	f7f9 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d1f3      	bne.n	8006de6 <__ieee754_rem_pio2+0x3be>
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <__ieee754_rem_pio2+0x414>)
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	2302      	movs	r3, #2
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	4622      	mov	r2, r4
 8006e08:	465b      	mov	r3, fp
 8006e0a:	4651      	mov	r1, sl
 8006e0c:	4648      	mov	r0, r9
 8006e0e:	f000 f8df 	bl	8006fd0 <__kernel_rem_pio2>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	4683      	mov	fp, r0
 8006e18:	f6bf ae46 	bge.w	8006aa8 <__ieee754_rem_pio2+0x80>
 8006e1c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e24:	e9ca 2300 	strd	r2, r3, [sl]
 8006e28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006e34:	e73a      	b.n	8006cac <__ieee754_rem_pio2+0x284>
 8006e36:	bf00      	nop
 8006e38:	41700000 	.word	0x41700000
 8006e3c:	08007ea4 	.word	0x08007ea4

08006e40 <__kernel_cos>:
 8006e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	ec57 6b10 	vmov	r6, r7, d0
 8006e48:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006e4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006e50:	ed8d 1b00 	vstr	d1, [sp]
 8006e54:	da07      	bge.n	8006e66 <__kernel_cos+0x26>
 8006e56:	ee10 0a10 	vmov	r0, s0
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	f7f9 fe7c 	bl	8000b58 <__aeabi_d2iz>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f000 8088 	beq.w	8006f76 <__kernel_cos+0x136>
 8006e66:	4632      	mov	r2, r6
 8006e68:	463b      	mov	r3, r7
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	4b51      	ldr	r3, [pc, #324]	; (8006fb8 <__kernel_cos+0x178>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	460d      	mov	r5, r1
 8006e7a:	f7f9 fbbd 	bl	80005f8 <__aeabi_dmul>
 8006e7e:	a340      	add	r3, pc, #256	; (adr r3, 8006f80 <__kernel_cos+0x140>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	4682      	mov	sl, r0
 8006e86:	468b      	mov	fp, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	a33d      	add	r3, pc, #244	; (adr r3, 8006f88 <__kernel_cos+0x148>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f9f9 	bl	800028c <__adddf3>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	f7f9 fbab 	bl	80005f8 <__aeabi_dmul>
 8006ea2:	a33b      	add	r3, pc, #236	; (adr r3, 8006f90 <__kernel_cos+0x150>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f9ee 	bl	8000288 <__aeabi_dsub>
 8006eac:	4622      	mov	r2, r4
 8006eae:	462b      	mov	r3, r5
 8006eb0:	f7f9 fba2 	bl	80005f8 <__aeabi_dmul>
 8006eb4:	a338      	add	r3, pc, #224	; (adr r3, 8006f98 <__kernel_cos+0x158>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f7f9 f9e7 	bl	800028c <__adddf3>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	a336      	add	r3, pc, #216	; (adr r3, 8006fa0 <__kernel_cos+0x160>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f9dc 	bl	8000288 <__aeabi_dsub>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	f7f9 fb90 	bl	80005f8 <__aeabi_dmul>
 8006ed8:	a333      	add	r3, pc, #204	; (adr r3, 8006fa8 <__kernel_cos+0x168>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 f9d5 	bl	800028c <__adddf3>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	f7f9 fb87 	bl	80005f8 <__aeabi_dmul>
 8006eea:	4622      	mov	r2, r4
 8006eec:	462b      	mov	r3, r5
 8006eee:	f7f9 fb83 	bl	80005f8 <__aeabi_dmul>
 8006ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	460d      	mov	r5, r1
 8006efa:	4630      	mov	r0, r6
 8006efc:	4639      	mov	r1, r7
 8006efe:	f7f9 fb7b 	bl	80005f8 <__aeabi_dmul>
 8006f02:	460b      	mov	r3, r1
 8006f04:	4602      	mov	r2, r0
 8006f06:	4629      	mov	r1, r5
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7f9 f9bd 	bl	8000288 <__aeabi_dsub>
 8006f0e:	4b2b      	ldr	r3, [pc, #172]	; (8006fbc <__kernel_cos+0x17c>)
 8006f10:	4598      	cmp	r8, r3
 8006f12:	4606      	mov	r6, r0
 8006f14:	460f      	mov	r7, r1
 8006f16:	dc10      	bgt.n	8006f3a <__kernel_cos+0xfa>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f7f9 f9b2 	bl	8000288 <__aeabi_dsub>
 8006f24:	460b      	mov	r3, r1
 8006f26:	4926      	ldr	r1, [pc, #152]	; (8006fc0 <__kernel_cos+0x180>)
 8006f28:	4602      	mov	r2, r0
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f7f9 f9ac 	bl	8000288 <__aeabi_dsub>
 8006f30:	ec41 0b10 	vmov	d0, r0, r1
 8006f34:	b003      	add	sp, #12
 8006f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3a:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <__kernel_cos+0x184>)
 8006f3c:	4920      	ldr	r1, [pc, #128]	; (8006fc0 <__kernel_cos+0x180>)
 8006f3e:	4598      	cmp	r8, r3
 8006f40:	bfcc      	ite	gt
 8006f42:	4d21      	ldrgt	r5, [pc, #132]	; (8006fc8 <__kernel_cos+0x188>)
 8006f44:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006f48:	2400      	movs	r4, #0
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f7f9 f99a 	bl	8000288 <__aeabi_dsub>
 8006f54:	4622      	mov	r2, r4
 8006f56:	4680      	mov	r8, r0
 8006f58:	4689      	mov	r9, r1
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	4650      	mov	r0, sl
 8006f5e:	4659      	mov	r1, fp
 8006f60:	f7f9 f992 	bl	8000288 <__aeabi_dsub>
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	f7f9 f98e 	bl	8000288 <__aeabi_dsub>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4640      	mov	r0, r8
 8006f72:	4649      	mov	r1, r9
 8006f74:	e7da      	b.n	8006f2c <__kernel_cos+0xec>
 8006f76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006fb0 <__kernel_cos+0x170>
 8006f7a:	e7db      	b.n	8006f34 <__kernel_cos+0xf4>
 8006f7c:	f3af 8000 	nop.w
 8006f80:	be8838d4 	.word	0xbe8838d4
 8006f84:	bda8fae9 	.word	0xbda8fae9
 8006f88:	bdb4b1c4 	.word	0xbdb4b1c4
 8006f8c:	3e21ee9e 	.word	0x3e21ee9e
 8006f90:	809c52ad 	.word	0x809c52ad
 8006f94:	3e927e4f 	.word	0x3e927e4f
 8006f98:	19cb1590 	.word	0x19cb1590
 8006f9c:	3efa01a0 	.word	0x3efa01a0
 8006fa0:	16c15177 	.word	0x16c15177
 8006fa4:	3f56c16c 	.word	0x3f56c16c
 8006fa8:	5555554c 	.word	0x5555554c
 8006fac:	3fa55555 	.word	0x3fa55555
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	3ff00000 	.word	0x3ff00000
 8006fb8:	3fe00000 	.word	0x3fe00000
 8006fbc:	3fd33332 	.word	0x3fd33332
 8006fc0:	3ff00000 	.word	0x3ff00000
 8006fc4:	3fe90000 	.word	0x3fe90000
 8006fc8:	3fd20000 	.word	0x3fd20000
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <__kernel_rem_pio2>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ed2d 8b02 	vpush	{d8}
 8006fd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006fdc:	f112 0f14 	cmn.w	r2, #20
 8006fe0:	9308      	str	r3, [sp, #32]
 8006fe2:	9101      	str	r1, [sp, #4]
 8006fe4:	4bc4      	ldr	r3, [pc, #784]	; (80072f8 <__kernel_rem_pio2+0x328>)
 8006fe6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006fe8:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fee:	9302      	str	r3, [sp, #8]
 8006ff0:	9b08      	ldr	r3, [sp, #32]
 8006ff2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ff6:	bfa8      	it	ge
 8006ff8:	1ed4      	subge	r4, r2, #3
 8006ffa:	9306      	str	r3, [sp, #24]
 8006ffc:	bfb2      	itee	lt
 8006ffe:	2400      	movlt	r4, #0
 8007000:	2318      	movge	r3, #24
 8007002:	fb94 f4f3 	sdivge	r4, r4, r3
 8007006:	f06f 0317 	mvn.w	r3, #23
 800700a:	fb04 3303 	mla	r3, r4, r3, r3
 800700e:	eb03 0a02 	add.w	sl, r3, r2
 8007012:	9b02      	ldr	r3, [sp, #8]
 8007014:	9a06      	ldr	r2, [sp, #24]
 8007016:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80072e8 <__kernel_rem_pio2+0x318>
 800701a:	eb03 0802 	add.w	r8, r3, r2
 800701e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007020:	1aa7      	subs	r7, r4, r2
 8007022:	ae22      	add	r6, sp, #136	; 0x88
 8007024:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007028:	2500      	movs	r5, #0
 800702a:	4545      	cmp	r5, r8
 800702c:	dd13      	ble.n	8007056 <__kernel_rem_pio2+0x86>
 800702e:	9b08      	ldr	r3, [sp, #32]
 8007030:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80072e8 <__kernel_rem_pio2+0x318>
 8007034:	aa22      	add	r2, sp, #136	; 0x88
 8007036:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800703a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800703e:	f04f 0800 	mov.w	r8, #0
 8007042:	9b02      	ldr	r3, [sp, #8]
 8007044:	4598      	cmp	r8, r3
 8007046:	dc2f      	bgt.n	80070a8 <__kernel_rem_pio2+0xd8>
 8007048:	ed8d 8b04 	vstr	d8, [sp, #16]
 800704c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007050:	462f      	mov	r7, r5
 8007052:	2600      	movs	r6, #0
 8007054:	e01b      	b.n	800708e <__kernel_rem_pio2+0xbe>
 8007056:	42ef      	cmn	r7, r5
 8007058:	d407      	bmi.n	800706a <__kernel_rem_pio2+0x9a>
 800705a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800705e:	f7f9 fa61 	bl	8000524 <__aeabi_i2d>
 8007062:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007066:	3501      	adds	r5, #1
 8007068:	e7df      	b.n	800702a <__kernel_rem_pio2+0x5a>
 800706a:	ec51 0b18 	vmov	r0, r1, d8
 800706e:	e7f8      	b.n	8007062 <__kernel_rem_pio2+0x92>
 8007070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007074:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007078:	f7f9 fabe 	bl	80005f8 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007084:	f7f9 f902 	bl	800028c <__adddf3>
 8007088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800708c:	3601      	adds	r6, #1
 800708e:	9b06      	ldr	r3, [sp, #24]
 8007090:	429e      	cmp	r6, r3
 8007092:	f1a7 0708 	sub.w	r7, r7, #8
 8007096:	ddeb      	ble.n	8007070 <__kernel_rem_pio2+0xa0>
 8007098:	ed9d 7b04 	vldr	d7, [sp, #16]
 800709c:	f108 0801 	add.w	r8, r8, #1
 80070a0:	ecab 7b02 	vstmia	fp!, {d7}
 80070a4:	3508      	adds	r5, #8
 80070a6:	e7cc      	b.n	8007042 <__kernel_rem_pio2+0x72>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	aa0e      	add	r2, sp, #56	; 0x38
 80070ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070b0:	930d      	str	r3, [sp, #52]	; 0x34
 80070b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80070b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80070b8:	9c02      	ldr	r4, [sp, #8]
 80070ba:	930c      	str	r3, [sp, #48]	; 0x30
 80070bc:	00e3      	lsls	r3, r4, #3
 80070be:	930a      	str	r3, [sp, #40]	; 0x28
 80070c0:	ab9a      	add	r3, sp, #616	; 0x268
 80070c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80070ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80070ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80070d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80070d4:	46c3      	mov	fp, r8
 80070d6:	46a1      	mov	r9, r4
 80070d8:	f1b9 0f00 	cmp.w	r9, #0
 80070dc:	f1a5 0508 	sub.w	r5, r5, #8
 80070e0:	dc77      	bgt.n	80071d2 <__kernel_rem_pio2+0x202>
 80070e2:	ec47 6b10 	vmov	d0, r6, r7
 80070e6:	4650      	mov	r0, sl
 80070e8:	f000 fc0a 	bl	8007900 <scalbn>
 80070ec:	ec57 6b10 	vmov	r6, r7, d0
 80070f0:	2200      	movs	r2, #0
 80070f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80070f6:	ee10 0a10 	vmov	r0, s0
 80070fa:	4639      	mov	r1, r7
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	ec41 0b10 	vmov	d0, r0, r1
 8007104:	f000 fb7c 	bl	8007800 <floor>
 8007108:	4b7c      	ldr	r3, [pc, #496]	; (80072fc <__kernel_rem_pio2+0x32c>)
 800710a:	ec51 0b10 	vmov	r0, r1, d0
 800710e:	2200      	movs	r2, #0
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 f8b4 	bl	8000288 <__aeabi_dsub>
 8007120:	460f      	mov	r7, r1
 8007122:	4606      	mov	r6, r0
 8007124:	f7f9 fd18 	bl	8000b58 <__aeabi_d2iz>
 8007128:	9004      	str	r0, [sp, #16]
 800712a:	f7f9 f9fb 	bl	8000524 <__aeabi_i2d>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	f7f9 f8a7 	bl	8000288 <__aeabi_dsub>
 800713a:	f1ba 0f00 	cmp.w	sl, #0
 800713e:	4606      	mov	r6, r0
 8007140:	460f      	mov	r7, r1
 8007142:	dd6d      	ble.n	8007220 <__kernel_rem_pio2+0x250>
 8007144:	1e62      	subs	r2, r4, #1
 8007146:	ab0e      	add	r3, sp, #56	; 0x38
 8007148:	9d04      	ldr	r5, [sp, #16]
 800714a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800714e:	f1ca 0118 	rsb	r1, sl, #24
 8007152:	fa40 f301 	asr.w	r3, r0, r1
 8007156:	441d      	add	r5, r3
 8007158:	408b      	lsls	r3, r1
 800715a:	1ac0      	subs	r0, r0, r3
 800715c:	ab0e      	add	r3, sp, #56	; 0x38
 800715e:	9504      	str	r5, [sp, #16]
 8007160:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007164:	f1ca 0317 	rsb	r3, sl, #23
 8007168:	fa40 fb03 	asr.w	fp, r0, r3
 800716c:	f1bb 0f00 	cmp.w	fp, #0
 8007170:	dd65      	ble.n	800723e <__kernel_rem_pio2+0x26e>
 8007172:	9b04      	ldr	r3, [sp, #16]
 8007174:	2200      	movs	r2, #0
 8007176:	3301      	adds	r3, #1
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	4615      	mov	r5, r2
 800717c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007180:	4294      	cmp	r4, r2
 8007182:	f300 809c 	bgt.w	80072be <__kernel_rem_pio2+0x2ee>
 8007186:	f1ba 0f00 	cmp.w	sl, #0
 800718a:	dd07      	ble.n	800719c <__kernel_rem_pio2+0x1cc>
 800718c:	f1ba 0f01 	cmp.w	sl, #1
 8007190:	f000 80c0 	beq.w	8007314 <__kernel_rem_pio2+0x344>
 8007194:	f1ba 0f02 	cmp.w	sl, #2
 8007198:	f000 80c6 	beq.w	8007328 <__kernel_rem_pio2+0x358>
 800719c:	f1bb 0f02 	cmp.w	fp, #2
 80071a0:	d14d      	bne.n	800723e <__kernel_rem_pio2+0x26e>
 80071a2:	4632      	mov	r2, r6
 80071a4:	463b      	mov	r3, r7
 80071a6:	4956      	ldr	r1, [pc, #344]	; (8007300 <__kernel_rem_pio2+0x330>)
 80071a8:	2000      	movs	r0, #0
 80071aa:	f7f9 f86d 	bl	8000288 <__aeabi_dsub>
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	d043      	beq.n	800723e <__kernel_rem_pio2+0x26e>
 80071b6:	4650      	mov	r0, sl
 80071b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80072f0 <__kernel_rem_pio2+0x320>
 80071bc:	f000 fba0 	bl	8007900 <scalbn>
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	ec53 2b10 	vmov	r2, r3, d0
 80071c8:	f7f9 f85e 	bl	8000288 <__aeabi_dsub>
 80071cc:	4606      	mov	r6, r0
 80071ce:	460f      	mov	r7, r1
 80071d0:	e035      	b.n	800723e <__kernel_rem_pio2+0x26e>
 80071d2:	4b4c      	ldr	r3, [pc, #304]	; (8007304 <__kernel_rem_pio2+0x334>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	4630      	mov	r0, r6
 80071d8:	4639      	mov	r1, r7
 80071da:	f7f9 fa0d 	bl	80005f8 <__aeabi_dmul>
 80071de:	f7f9 fcbb 	bl	8000b58 <__aeabi_d2iz>
 80071e2:	f7f9 f99f 	bl	8000524 <__aeabi_i2d>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	ec43 2b18 	vmov	d8, r2, r3
 80071ee:	4b46      	ldr	r3, [pc, #280]	; (8007308 <__kernel_rem_pio2+0x338>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	f7f9 fa01 	bl	80005f8 <__aeabi_dmul>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 f843 	bl	8000288 <__aeabi_dsub>
 8007202:	f7f9 fca9 	bl	8000b58 <__aeabi_d2iz>
 8007206:	e9d5 2300 	ldrd	r2, r3, [r5]
 800720a:	f84b 0b04 	str.w	r0, [fp], #4
 800720e:	ec51 0b18 	vmov	r0, r1, d8
 8007212:	f7f9 f83b 	bl	800028c <__adddf3>
 8007216:	f109 39ff 	add.w	r9, r9, #4294967295
 800721a:	4606      	mov	r6, r0
 800721c:	460f      	mov	r7, r1
 800721e:	e75b      	b.n	80070d8 <__kernel_rem_pio2+0x108>
 8007220:	d106      	bne.n	8007230 <__kernel_rem_pio2+0x260>
 8007222:	1e63      	subs	r3, r4, #1
 8007224:	aa0e      	add	r2, sp, #56	; 0x38
 8007226:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800722a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800722e:	e79d      	b.n	800716c <__kernel_rem_pio2+0x19c>
 8007230:	4b36      	ldr	r3, [pc, #216]	; (800730c <__kernel_rem_pio2+0x33c>)
 8007232:	2200      	movs	r2, #0
 8007234:	f7f9 fc66 	bl	8000b04 <__aeabi_dcmpge>
 8007238:	2800      	cmp	r0, #0
 800723a:	d13d      	bne.n	80072b8 <__kernel_rem_pio2+0x2e8>
 800723c:	4683      	mov	fp, r0
 800723e:	2200      	movs	r2, #0
 8007240:	2300      	movs	r3, #0
 8007242:	4630      	mov	r0, r6
 8007244:	4639      	mov	r1, r7
 8007246:	f7f9 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800724a:	2800      	cmp	r0, #0
 800724c:	f000 80c0 	beq.w	80073d0 <__kernel_rem_pio2+0x400>
 8007250:	1e65      	subs	r5, r4, #1
 8007252:	462b      	mov	r3, r5
 8007254:	2200      	movs	r2, #0
 8007256:	9902      	ldr	r1, [sp, #8]
 8007258:	428b      	cmp	r3, r1
 800725a:	da6c      	bge.n	8007336 <__kernel_rem_pio2+0x366>
 800725c:	2a00      	cmp	r2, #0
 800725e:	f000 8089 	beq.w	8007374 <__kernel_rem_pio2+0x3a4>
 8007262:	ab0e      	add	r3, sp, #56	; 0x38
 8007264:	f1aa 0a18 	sub.w	sl, sl, #24
 8007268:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80ad 	beq.w	80073cc <__kernel_rem_pio2+0x3fc>
 8007272:	4650      	mov	r0, sl
 8007274:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80072f0 <__kernel_rem_pio2+0x320>
 8007278:	f000 fb42 	bl	8007900 <scalbn>
 800727c:	ab9a      	add	r3, sp, #616	; 0x268
 800727e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007282:	ec57 6b10 	vmov	r6, r7, d0
 8007286:	00ec      	lsls	r4, r5, #3
 8007288:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800728c:	46aa      	mov	sl, r5
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	f280 80d6 	bge.w	8007442 <__kernel_rem_pio2+0x472>
 8007296:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80072e8 <__kernel_rem_pio2+0x318>
 800729a:	462e      	mov	r6, r5
 800729c:	2e00      	cmp	r6, #0
 800729e:	f2c0 8104 	blt.w	80074aa <__kernel_rem_pio2+0x4da>
 80072a2:	ab72      	add	r3, sp, #456	; 0x1c8
 80072a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80072a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007310 <__kernel_rem_pio2+0x340>
 80072ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80072b0:	f04f 0800 	mov.w	r8, #0
 80072b4:	1baf      	subs	r7, r5, r6
 80072b6:	e0ea      	b.n	800748e <__kernel_rem_pio2+0x4be>
 80072b8:	f04f 0b02 	mov.w	fp, #2
 80072bc:	e759      	b.n	8007172 <__kernel_rem_pio2+0x1a2>
 80072be:	f8d8 3000 	ldr.w	r3, [r8]
 80072c2:	b955      	cbnz	r5, 80072da <__kernel_rem_pio2+0x30a>
 80072c4:	b123      	cbz	r3, 80072d0 <__kernel_rem_pio2+0x300>
 80072c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80072ca:	f8c8 3000 	str.w	r3, [r8]
 80072ce:	2301      	movs	r3, #1
 80072d0:	3201      	adds	r2, #1
 80072d2:	f108 0804 	add.w	r8, r8, #4
 80072d6:	461d      	mov	r5, r3
 80072d8:	e752      	b.n	8007180 <__kernel_rem_pio2+0x1b0>
 80072da:	1acb      	subs	r3, r1, r3
 80072dc:	f8c8 3000 	str.w	r3, [r8]
 80072e0:	462b      	mov	r3, r5
 80072e2:	e7f5      	b.n	80072d0 <__kernel_rem_pio2+0x300>
 80072e4:	f3af 8000 	nop.w
	...
 80072f4:	3ff00000 	.word	0x3ff00000
 80072f8:	08007ff0 	.word	0x08007ff0
 80072fc:	40200000 	.word	0x40200000
 8007300:	3ff00000 	.word	0x3ff00000
 8007304:	3e700000 	.word	0x3e700000
 8007308:	41700000 	.word	0x41700000
 800730c:	3fe00000 	.word	0x3fe00000
 8007310:	08007fb0 	.word	0x08007fb0
 8007314:	1e62      	subs	r2, r4, #1
 8007316:	ab0e      	add	r3, sp, #56	; 0x38
 8007318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007320:	a90e      	add	r1, sp, #56	; 0x38
 8007322:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007326:	e739      	b.n	800719c <__kernel_rem_pio2+0x1cc>
 8007328:	1e62      	subs	r2, r4, #1
 800732a:	ab0e      	add	r3, sp, #56	; 0x38
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007334:	e7f4      	b.n	8007320 <__kernel_rem_pio2+0x350>
 8007336:	a90e      	add	r1, sp, #56	; 0x38
 8007338:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800733c:	3b01      	subs	r3, #1
 800733e:	430a      	orrs	r2, r1
 8007340:	e789      	b.n	8007256 <__kernel_rem_pio2+0x286>
 8007342:	3301      	adds	r3, #1
 8007344:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007348:	2900      	cmp	r1, #0
 800734a:	d0fa      	beq.n	8007342 <__kernel_rem_pio2+0x372>
 800734c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800734e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007352:	446a      	add	r2, sp
 8007354:	3a98      	subs	r2, #152	; 0x98
 8007356:	920a      	str	r2, [sp, #40]	; 0x28
 8007358:	9a08      	ldr	r2, [sp, #32]
 800735a:	18e3      	adds	r3, r4, r3
 800735c:	18a5      	adds	r5, r4, r2
 800735e:	aa22      	add	r2, sp, #136	; 0x88
 8007360:	f104 0801 	add.w	r8, r4, #1
 8007364:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	4543      	cmp	r3, r8
 800736e:	da04      	bge.n	800737a <__kernel_rem_pio2+0x3aa>
 8007370:	461c      	mov	r4, r3
 8007372:	e6a3      	b.n	80070bc <__kernel_rem_pio2+0xec>
 8007374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007376:	2301      	movs	r3, #1
 8007378:	e7e4      	b.n	8007344 <__kernel_rem_pio2+0x374>
 800737a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800737c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007380:	f7f9 f8d0 	bl	8000524 <__aeabi_i2d>
 8007384:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738a:	46ab      	mov	fp, r5
 800738c:	461c      	mov	r4, r3
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	2600      	movs	r6, #0
 8007394:	2700      	movs	r7, #0
 8007396:	9b06      	ldr	r3, [sp, #24]
 8007398:	4599      	cmp	r9, r3
 800739a:	dd06      	ble.n	80073aa <__kernel_rem_pio2+0x3da>
 800739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739e:	e8e3 6702 	strd	r6, r7, [r3], #8
 80073a2:	f108 0801 	add.w	r8, r8, #1
 80073a6:	930a      	str	r3, [sp, #40]	; 0x28
 80073a8:	e7df      	b.n	800736a <__kernel_rem_pio2+0x39a>
 80073aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80073ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80073b2:	f7f9 f921 	bl	80005f8 <__aeabi_dmul>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4630      	mov	r0, r6
 80073bc:	4639      	mov	r1, r7
 80073be:	f7f8 ff65 	bl	800028c <__adddf3>
 80073c2:	f109 0901 	add.w	r9, r9, #1
 80073c6:	4606      	mov	r6, r0
 80073c8:	460f      	mov	r7, r1
 80073ca:	e7e4      	b.n	8007396 <__kernel_rem_pio2+0x3c6>
 80073cc:	3d01      	subs	r5, #1
 80073ce:	e748      	b.n	8007262 <__kernel_rem_pio2+0x292>
 80073d0:	ec47 6b10 	vmov	d0, r6, r7
 80073d4:	f1ca 0000 	rsb	r0, sl, #0
 80073d8:	f000 fa92 	bl	8007900 <scalbn>
 80073dc:	ec57 6b10 	vmov	r6, r7, d0
 80073e0:	4ba0      	ldr	r3, [pc, #640]	; (8007664 <__kernel_rem_pio2+0x694>)
 80073e2:	ee10 0a10 	vmov	r0, s0
 80073e6:	2200      	movs	r2, #0
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f9 fb8b 	bl	8000b04 <__aeabi_dcmpge>
 80073ee:	b1f8      	cbz	r0, 8007430 <__kernel_rem_pio2+0x460>
 80073f0:	4b9d      	ldr	r3, [pc, #628]	; (8007668 <__kernel_rem_pio2+0x698>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	4630      	mov	r0, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 f8fe 	bl	80005f8 <__aeabi_dmul>
 80073fc:	f7f9 fbac 	bl	8000b58 <__aeabi_d2iz>
 8007400:	4680      	mov	r8, r0
 8007402:	f7f9 f88f 	bl	8000524 <__aeabi_i2d>
 8007406:	4b97      	ldr	r3, [pc, #604]	; (8007664 <__kernel_rem_pio2+0x694>)
 8007408:	2200      	movs	r2, #0
 800740a:	f7f9 f8f5 	bl	80005f8 <__aeabi_dmul>
 800740e:	460b      	mov	r3, r1
 8007410:	4602      	mov	r2, r0
 8007412:	4639      	mov	r1, r7
 8007414:	4630      	mov	r0, r6
 8007416:	f7f8 ff37 	bl	8000288 <__aeabi_dsub>
 800741a:	f7f9 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800741e:	1c65      	adds	r5, r4, #1
 8007420:	ab0e      	add	r3, sp, #56	; 0x38
 8007422:	f10a 0a18 	add.w	sl, sl, #24
 8007426:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800742a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800742e:	e720      	b.n	8007272 <__kernel_rem_pio2+0x2a2>
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 fb90 	bl	8000b58 <__aeabi_d2iz>
 8007438:	ab0e      	add	r3, sp, #56	; 0x38
 800743a:	4625      	mov	r5, r4
 800743c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007440:	e717      	b.n	8007272 <__kernel_rem_pio2+0x2a2>
 8007442:	ab0e      	add	r3, sp, #56	; 0x38
 8007444:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007448:	f7f9 f86c 	bl	8000524 <__aeabi_i2d>
 800744c:	4632      	mov	r2, r6
 800744e:	463b      	mov	r3, r7
 8007450:	f7f9 f8d2 	bl	80005f8 <__aeabi_dmul>
 8007454:	4b84      	ldr	r3, [pc, #528]	; (8007668 <__kernel_rem_pio2+0x698>)
 8007456:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800745a:	2200      	movs	r2, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f9 f8ca 	bl	80005f8 <__aeabi_dmul>
 8007464:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	e70f      	b.n	800728e <__kernel_rem_pio2+0x2be>
 800746e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007472:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007476:	f7f9 f8bf 	bl	80005f8 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007482:	f7f8 ff03 	bl	800028c <__adddf3>
 8007486:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800748a:	f108 0801 	add.w	r8, r8, #1
 800748e:	9b02      	ldr	r3, [sp, #8]
 8007490:	4598      	cmp	r8, r3
 8007492:	dc01      	bgt.n	8007498 <__kernel_rem_pio2+0x4c8>
 8007494:	45b8      	cmp	r8, r7
 8007496:	ddea      	ble.n	800746e <__kernel_rem_pio2+0x49e>
 8007498:	ed9d 7b06 	vldr	d7, [sp, #24]
 800749c:	ab4a      	add	r3, sp, #296	; 0x128
 800749e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074a2:	ed87 7b00 	vstr	d7, [r7]
 80074a6:	3e01      	subs	r6, #1
 80074a8:	e6f8      	b.n	800729c <__kernel_rem_pio2+0x2cc>
 80074aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	dc0b      	bgt.n	80074c8 <__kernel_rem_pio2+0x4f8>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dc35      	bgt.n	8007520 <__kernel_rem_pio2+0x550>
 80074b4:	d059      	beq.n	800756a <__kernel_rem_pio2+0x59a>
 80074b6:	9b04      	ldr	r3, [sp, #16]
 80074b8:	f003 0007 	and.w	r0, r3, #7
 80074bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80074c0:	ecbd 8b02 	vpop	{d8}
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d1f3      	bne.n	80074b6 <__kernel_rem_pio2+0x4e6>
 80074ce:	ab4a      	add	r3, sp, #296	; 0x128
 80074d0:	4423      	add	r3, r4
 80074d2:	9306      	str	r3, [sp, #24]
 80074d4:	461c      	mov	r4, r3
 80074d6:	469a      	mov	sl, r3
 80074d8:	9502      	str	r5, [sp, #8]
 80074da:	9b02      	ldr	r3, [sp, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f1aa 0a08 	sub.w	sl, sl, #8
 80074e2:	dc6b      	bgt.n	80075bc <__kernel_rem_pio2+0x5ec>
 80074e4:	46aa      	mov	sl, r5
 80074e6:	f1ba 0f01 	cmp.w	sl, #1
 80074ea:	f1a4 0408 	sub.w	r4, r4, #8
 80074ee:	f300 8085 	bgt.w	80075fc <__kernel_rem_pio2+0x62c>
 80074f2:	9c06      	ldr	r4, [sp, #24]
 80074f4:	2000      	movs	r0, #0
 80074f6:	3408      	adds	r4, #8
 80074f8:	2100      	movs	r1, #0
 80074fa:	2d01      	cmp	r5, #1
 80074fc:	f300 809d 	bgt.w	800763a <__kernel_rem_pio2+0x66a>
 8007500:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007504:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007508:	f1bb 0f00 	cmp.w	fp, #0
 800750c:	f040 809b 	bne.w	8007646 <__kernel_rem_pio2+0x676>
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	e9c3 5600 	strd	r5, r6, [r3]
 8007516:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800751a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800751e:	e7ca      	b.n	80074b6 <__kernel_rem_pio2+0x4e6>
 8007520:	3408      	adds	r4, #8
 8007522:	ab4a      	add	r3, sp, #296	; 0x128
 8007524:	441c      	add	r4, r3
 8007526:	462e      	mov	r6, r5
 8007528:	2000      	movs	r0, #0
 800752a:	2100      	movs	r1, #0
 800752c:	2e00      	cmp	r6, #0
 800752e:	da36      	bge.n	800759e <__kernel_rem_pio2+0x5ce>
 8007530:	f1bb 0f00 	cmp.w	fp, #0
 8007534:	d039      	beq.n	80075aa <__kernel_rem_pio2+0x5da>
 8007536:	4602      	mov	r2, r0
 8007538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800753c:	9c01      	ldr	r4, [sp, #4]
 800753e:	e9c4 2300 	strd	r2, r3, [r4]
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800754a:	f7f8 fe9d 	bl	8000288 <__aeabi_dsub>
 800754e:	ae4c      	add	r6, sp, #304	; 0x130
 8007550:	2401      	movs	r4, #1
 8007552:	42a5      	cmp	r5, r4
 8007554:	da2c      	bge.n	80075b0 <__kernel_rem_pio2+0x5e0>
 8007556:	f1bb 0f00 	cmp.w	fp, #0
 800755a:	d002      	beq.n	8007562 <__kernel_rem_pio2+0x592>
 800755c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007560:	4619      	mov	r1, r3
 8007562:	9b01      	ldr	r3, [sp, #4]
 8007564:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007568:	e7a5      	b.n	80074b6 <__kernel_rem_pio2+0x4e6>
 800756a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800756e:	eb0d 0403 	add.w	r4, sp, r3
 8007572:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007576:	2000      	movs	r0, #0
 8007578:	2100      	movs	r1, #0
 800757a:	2d00      	cmp	r5, #0
 800757c:	da09      	bge.n	8007592 <__kernel_rem_pio2+0x5c2>
 800757e:	f1bb 0f00 	cmp.w	fp, #0
 8007582:	d002      	beq.n	800758a <__kernel_rem_pio2+0x5ba>
 8007584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007588:	4619      	mov	r1, r3
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	e9c3 0100 	strd	r0, r1, [r3]
 8007590:	e791      	b.n	80074b6 <__kernel_rem_pio2+0x4e6>
 8007592:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007596:	f7f8 fe79 	bl	800028c <__adddf3>
 800759a:	3d01      	subs	r5, #1
 800759c:	e7ed      	b.n	800757a <__kernel_rem_pio2+0x5aa>
 800759e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075a2:	f7f8 fe73 	bl	800028c <__adddf3>
 80075a6:	3e01      	subs	r6, #1
 80075a8:	e7c0      	b.n	800752c <__kernel_rem_pio2+0x55c>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	e7c5      	b.n	800753c <__kernel_rem_pio2+0x56c>
 80075b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80075b4:	f7f8 fe6a 	bl	800028c <__adddf3>
 80075b8:	3401      	adds	r4, #1
 80075ba:	e7ca      	b.n	8007552 <__kernel_rem_pio2+0x582>
 80075bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80075c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	4632      	mov	r2, r6
 80075cc:	463b      	mov	r3, r7
 80075ce:	4640      	mov	r0, r8
 80075d0:	4649      	mov	r1, r9
 80075d2:	f7f8 fe5b 	bl	800028c <__adddf3>
 80075d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f8 fe51 	bl	8000288 <__aeabi_dsub>
 80075e6:	4632      	mov	r2, r6
 80075e8:	463b      	mov	r3, r7
 80075ea:	f7f8 fe4f 	bl	800028c <__adddf3>
 80075ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80075f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075f6:	ed8a 7b00 	vstr	d7, [sl]
 80075fa:	e76e      	b.n	80074da <__kernel_rem_pio2+0x50a>
 80075fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007600:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007604:	4640      	mov	r0, r8
 8007606:	4632      	mov	r2, r6
 8007608:	463b      	mov	r3, r7
 800760a:	4649      	mov	r1, r9
 800760c:	f7f8 fe3e 	bl	800028c <__adddf3>
 8007610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4640      	mov	r0, r8
 800761a:	4649      	mov	r1, r9
 800761c:	f7f8 fe34 	bl	8000288 <__aeabi_dsub>
 8007620:	4632      	mov	r2, r6
 8007622:	463b      	mov	r3, r7
 8007624:	f7f8 fe32 	bl	800028c <__adddf3>
 8007628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800762c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007630:	ed84 7b00 	vstr	d7, [r4]
 8007634:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007638:	e755      	b.n	80074e6 <__kernel_rem_pio2+0x516>
 800763a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800763e:	f7f8 fe25 	bl	800028c <__adddf3>
 8007642:	3d01      	subs	r5, #1
 8007644:	e759      	b.n	80074fa <__kernel_rem_pio2+0x52a>
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	9a01      	ldr	r2, [sp, #4]
 800764a:	601d      	str	r5, [r3, #0]
 800764c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007650:	605c      	str	r4, [r3, #4]
 8007652:	609f      	str	r7, [r3, #8]
 8007654:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007658:	60d3      	str	r3, [r2, #12]
 800765a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800765e:	6110      	str	r0, [r2, #16]
 8007660:	6153      	str	r3, [r2, #20]
 8007662:	e728      	b.n	80074b6 <__kernel_rem_pio2+0x4e6>
 8007664:	41700000 	.word	0x41700000
 8007668:	3e700000 	.word	0x3e700000
 800766c:	00000000 	.word	0x00000000

08007670 <__kernel_sin>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	ed2d 8b04 	vpush	{d8-d9}
 8007678:	eeb0 8a41 	vmov.f32	s16, s2
 800767c:	eef0 8a61 	vmov.f32	s17, s3
 8007680:	ec55 4b10 	vmov	r4, r5, d0
 8007684:	b083      	sub	sp, #12
 8007686:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800768a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800768e:	9001      	str	r0, [sp, #4]
 8007690:	da06      	bge.n	80076a0 <__kernel_sin+0x30>
 8007692:	ee10 0a10 	vmov	r0, s0
 8007696:	4629      	mov	r1, r5
 8007698:	f7f9 fa5e 	bl	8000b58 <__aeabi_d2iz>
 800769c:	2800      	cmp	r0, #0
 800769e:	d051      	beq.n	8007744 <__kernel_sin+0xd4>
 80076a0:	4622      	mov	r2, r4
 80076a2:	462b      	mov	r3, r5
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	4682      	mov	sl, r0
 80076ae:	468b      	mov	fp, r1
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	a341      	add	r3, pc, #260	; (adr r3, 80077c4 <__kernel_sin+0x154>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	4650      	mov	r0, sl
 80076c8:	4659      	mov	r1, fp
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	a33f      	add	r3, pc, #252	; (adr r3, 80077cc <__kernel_sin+0x15c>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 fdd8 	bl	8000288 <__aeabi_dsub>
 80076d8:	4652      	mov	r2, sl
 80076da:	465b      	mov	r3, fp
 80076dc:	f7f8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80076e0:	a33c      	add	r3, pc, #240	; (adr r3, 80077d4 <__kernel_sin+0x164>)
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f7f8 fdd1 	bl	800028c <__adddf3>
 80076ea:	4652      	mov	r2, sl
 80076ec:	465b      	mov	r3, fp
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	a33a      	add	r3, pc, #232	; (adr r3, 80077dc <__kernel_sin+0x16c>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f8 fdc6 	bl	8000288 <__aeabi_dsub>
 80076fc:	4652      	mov	r2, sl
 80076fe:	465b      	mov	r3, fp
 8007700:	f7f8 ff7a 	bl	80005f8 <__aeabi_dmul>
 8007704:	a337      	add	r3, pc, #220	; (adr r3, 80077e4 <__kernel_sin+0x174>)
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	f7f8 fdbf 	bl	800028c <__adddf3>
 800770e:	9b01      	ldr	r3, [sp, #4]
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	b9eb      	cbnz	r3, 8007752 <__kernel_sin+0xe2>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f8 ff6b 	bl	80005f8 <__aeabi_dmul>
 8007722:	a325      	add	r3, pc, #148	; (adr r3, 80077b8 <__kernel_sin+0x148>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 fdae 	bl	8000288 <__aeabi_dsub>
 800772c:	4642      	mov	r2, r8
 800772e:	464b      	mov	r3, r9
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4620      	mov	r0, r4
 800773a:	4629      	mov	r1, r5
 800773c:	f7f8 fda6 	bl	800028c <__adddf3>
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	ec45 4b10 	vmov	d0, r4, r5
 8007748:	b003      	add	sp, #12
 800774a:	ecbd 8b04 	vpop	{d8-d9}
 800774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007752:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <__kernel_sin+0x150>)
 8007754:	ec51 0b18 	vmov	r0, r1, d8
 8007758:	2200      	movs	r2, #0
 800775a:	f7f8 ff4d 	bl	80005f8 <__aeabi_dmul>
 800775e:	4632      	mov	r2, r6
 8007760:	ec41 0b19 	vmov	d9, r0, r1
 8007764:	463b      	mov	r3, r7
 8007766:	4640      	mov	r0, r8
 8007768:	4649      	mov	r1, r9
 800776a:	f7f8 ff45 	bl	80005f8 <__aeabi_dmul>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	ec51 0b19 	vmov	r0, r1, d9
 8007776:	f7f8 fd87 	bl	8000288 <__aeabi_dsub>
 800777a:	4652      	mov	r2, sl
 800777c:	465b      	mov	r3, fp
 800777e:	f7f8 ff3b 	bl	80005f8 <__aeabi_dmul>
 8007782:	ec53 2b18 	vmov	r2, r3, d8
 8007786:	f7f8 fd7f 	bl	8000288 <__aeabi_dsub>
 800778a:	a30b      	add	r3, pc, #44	; (adr r3, 80077b8 <__kernel_sin+0x148>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	4606      	mov	r6, r0
 8007792:	460f      	mov	r7, r1
 8007794:	4640      	mov	r0, r8
 8007796:	4649      	mov	r1, r9
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fd72 	bl	800028c <__adddf3>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4620      	mov	r0, r4
 80077ae:	4629      	mov	r1, r5
 80077b0:	f7f8 fd6a 	bl	8000288 <__aeabi_dsub>
 80077b4:	e7c4      	b.n	8007740 <__kernel_sin+0xd0>
 80077b6:	bf00      	nop
 80077b8:	55555549 	.word	0x55555549
 80077bc:	3fc55555 	.word	0x3fc55555
 80077c0:	3fe00000 	.word	0x3fe00000
 80077c4:	5acfd57c 	.word	0x5acfd57c
 80077c8:	3de5d93a 	.word	0x3de5d93a
 80077cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80077d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80077d4:	57b1fe7d 	.word	0x57b1fe7d
 80077d8:	3ec71de3 	.word	0x3ec71de3
 80077dc:	19c161d5 	.word	0x19c161d5
 80077e0:	3f2a01a0 	.word	0x3f2a01a0
 80077e4:	1110f8a6 	.word	0x1110f8a6
 80077e8:	3f811111 	.word	0x3f811111

080077ec <fabs>:
 80077ec:	ec51 0b10 	vmov	r0, r1, d0
 80077f0:	ee10 2a10 	vmov	r2, s0
 80077f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077f8:	ec43 2b10 	vmov	d0, r2, r3
 80077fc:	4770      	bx	lr
	...

08007800 <floor>:
 8007800:	ec51 0b10 	vmov	r0, r1, d0
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800780c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007810:	2e13      	cmp	r6, #19
 8007812:	ee10 5a10 	vmov	r5, s0
 8007816:	ee10 8a10 	vmov	r8, s0
 800781a:	460c      	mov	r4, r1
 800781c:	dc32      	bgt.n	8007884 <floor+0x84>
 800781e:	2e00      	cmp	r6, #0
 8007820:	da14      	bge.n	800784c <floor+0x4c>
 8007822:	a333      	add	r3, pc, #204	; (adr r3, 80078f0 <floor+0xf0>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fd30 	bl	800028c <__adddf3>
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	f7f9 f972 	bl	8000b18 <__aeabi_dcmpgt>
 8007834:	b138      	cbz	r0, 8007846 <floor+0x46>
 8007836:	2c00      	cmp	r4, #0
 8007838:	da57      	bge.n	80078ea <floor+0xea>
 800783a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800783e:	431d      	orrs	r5, r3
 8007840:	d001      	beq.n	8007846 <floor+0x46>
 8007842:	4c2d      	ldr	r4, [pc, #180]	; (80078f8 <floor+0xf8>)
 8007844:	2500      	movs	r5, #0
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	e025      	b.n	8007898 <floor+0x98>
 800784c:	4f2b      	ldr	r7, [pc, #172]	; (80078fc <floor+0xfc>)
 800784e:	4137      	asrs	r7, r6
 8007850:	ea01 0307 	and.w	r3, r1, r7
 8007854:	4303      	orrs	r3, r0
 8007856:	d01f      	beq.n	8007898 <floor+0x98>
 8007858:	a325      	add	r3, pc, #148	; (adr r3, 80078f0 <floor+0xf0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fd15 	bl	800028c <__adddf3>
 8007862:	2200      	movs	r2, #0
 8007864:	2300      	movs	r3, #0
 8007866:	f7f9 f957 	bl	8000b18 <__aeabi_dcmpgt>
 800786a:	2800      	cmp	r0, #0
 800786c:	d0eb      	beq.n	8007846 <floor+0x46>
 800786e:	2c00      	cmp	r4, #0
 8007870:	bfbe      	ittt	lt
 8007872:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007876:	fa43 f606 	asrlt.w	r6, r3, r6
 800787a:	19a4      	addlt	r4, r4, r6
 800787c:	ea24 0407 	bic.w	r4, r4, r7
 8007880:	2500      	movs	r5, #0
 8007882:	e7e0      	b.n	8007846 <floor+0x46>
 8007884:	2e33      	cmp	r6, #51	; 0x33
 8007886:	dd0b      	ble.n	80078a0 <floor+0xa0>
 8007888:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800788c:	d104      	bne.n	8007898 <floor+0x98>
 800788e:	ee10 2a10 	vmov	r2, s0
 8007892:	460b      	mov	r3, r1
 8007894:	f7f8 fcfa 	bl	800028c <__adddf3>
 8007898:	ec41 0b10 	vmov	d0, r0, r1
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	fa23 f707 	lsr.w	r7, r3, r7
 80078ac:	4207      	tst	r7, r0
 80078ae:	d0f3      	beq.n	8007898 <floor+0x98>
 80078b0:	a30f      	add	r3, pc, #60	; (adr r3, 80078f0 <floor+0xf0>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f8 fce9 	bl	800028c <__adddf3>
 80078ba:	2200      	movs	r2, #0
 80078bc:	2300      	movs	r3, #0
 80078be:	f7f9 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0bf      	beq.n	8007846 <floor+0x46>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	da02      	bge.n	80078d0 <floor+0xd0>
 80078ca:	2e14      	cmp	r6, #20
 80078cc:	d103      	bne.n	80078d6 <floor+0xd6>
 80078ce:	3401      	adds	r4, #1
 80078d0:	ea25 0507 	bic.w	r5, r5, r7
 80078d4:	e7b7      	b.n	8007846 <floor+0x46>
 80078d6:	2301      	movs	r3, #1
 80078d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80078dc:	fa03 f606 	lsl.w	r6, r3, r6
 80078e0:	4435      	add	r5, r6
 80078e2:	4545      	cmp	r5, r8
 80078e4:	bf38      	it	cc
 80078e6:	18e4      	addcc	r4, r4, r3
 80078e8:	e7f2      	b.n	80078d0 <floor+0xd0>
 80078ea:	2500      	movs	r5, #0
 80078ec:	462c      	mov	r4, r5
 80078ee:	e7aa      	b.n	8007846 <floor+0x46>
 80078f0:	8800759c 	.word	0x8800759c
 80078f4:	7e37e43c 	.word	0x7e37e43c
 80078f8:	bff00000 	.word	0xbff00000
 80078fc:	000fffff 	.word	0x000fffff

08007900 <scalbn>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	ec55 4b10 	vmov	r4, r5, d0
 8007906:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800790a:	4606      	mov	r6, r0
 800790c:	462b      	mov	r3, r5
 800790e:	b99a      	cbnz	r2, 8007938 <scalbn+0x38>
 8007910:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007914:	4323      	orrs	r3, r4
 8007916:	d036      	beq.n	8007986 <scalbn+0x86>
 8007918:	4b39      	ldr	r3, [pc, #228]	; (8007a00 <scalbn+0x100>)
 800791a:	4629      	mov	r1, r5
 800791c:	ee10 0a10 	vmov	r0, s0
 8007920:	2200      	movs	r2, #0
 8007922:	f7f8 fe69 	bl	80005f8 <__aeabi_dmul>
 8007926:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <scalbn+0x104>)
 8007928:	429e      	cmp	r6, r3
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	da10      	bge.n	8007952 <scalbn+0x52>
 8007930:	a32b      	add	r3, pc, #172	; (adr r3, 80079e0 <scalbn+0xe0>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	e03a      	b.n	80079ae <scalbn+0xae>
 8007938:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800793c:	428a      	cmp	r2, r1
 800793e:	d10c      	bne.n	800795a <scalbn+0x5a>
 8007940:	ee10 2a10 	vmov	r2, s0
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	4604      	mov	r4, r0
 800794e:	460d      	mov	r5, r1
 8007950:	e019      	b.n	8007986 <scalbn+0x86>
 8007952:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007956:	460b      	mov	r3, r1
 8007958:	3a36      	subs	r2, #54	; 0x36
 800795a:	4432      	add	r2, r6
 800795c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007960:	428a      	cmp	r2, r1
 8007962:	dd08      	ble.n	8007976 <scalbn+0x76>
 8007964:	2d00      	cmp	r5, #0
 8007966:	a120      	add	r1, pc, #128	; (adr r1, 80079e8 <scalbn+0xe8>)
 8007968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800796c:	da1c      	bge.n	80079a8 <scalbn+0xa8>
 800796e:	a120      	add	r1, pc, #128	; (adr r1, 80079f0 <scalbn+0xf0>)
 8007970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007974:	e018      	b.n	80079a8 <scalbn+0xa8>
 8007976:	2a00      	cmp	r2, #0
 8007978:	dd08      	ble.n	800798c <scalbn+0x8c>
 800797a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800797e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007982:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007986:	ec45 4b10 	vmov	d0, r4, r5
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007990:	da19      	bge.n	80079c6 <scalbn+0xc6>
 8007992:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007996:	429e      	cmp	r6, r3
 8007998:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800799c:	dd0a      	ble.n	80079b4 <scalbn+0xb4>
 800799e:	a112      	add	r1, pc, #72	; (adr r1, 80079e8 <scalbn+0xe8>)
 80079a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e2      	bne.n	800796e <scalbn+0x6e>
 80079a8:	a30f      	add	r3, pc, #60	; (adr r3, 80079e8 <scalbn+0xe8>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fe23 	bl	80005f8 <__aeabi_dmul>
 80079b2:	e7cb      	b.n	800794c <scalbn+0x4c>
 80079b4:	a10a      	add	r1, pc, #40	; (adr r1, 80079e0 <scalbn+0xe0>)
 80079b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0b8      	beq.n	8007930 <scalbn+0x30>
 80079be:	a10e      	add	r1, pc, #56	; (adr r1, 80079f8 <scalbn+0xf8>)
 80079c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c4:	e7b4      	b.n	8007930 <scalbn+0x30>
 80079c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079ca:	3236      	adds	r2, #54	; 0x36
 80079cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80079d4:	4620      	mov	r0, r4
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <scalbn+0x108>)
 80079d8:	2200      	movs	r2, #0
 80079da:	e7e8      	b.n	80079ae <scalbn+0xae>
 80079dc:	f3af 8000 	nop.w
 80079e0:	c2f8f359 	.word	0xc2f8f359
 80079e4:	01a56e1f 	.word	0x01a56e1f
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	7e37e43c 	.word	0x7e37e43c
 80079f0:	8800759c 	.word	0x8800759c
 80079f4:	fe37e43c 	.word	0xfe37e43c
 80079f8:	c2f8f359 	.word	0xc2f8f359
 80079fc:	81a56e1f 	.word	0x81a56e1f
 8007a00:	43500000 	.word	0x43500000
 8007a04:	ffff3cb0 	.word	0xffff3cb0
 8007a08:	3c900000 	.word	0x3c900000

08007a0c <_init>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr

08007a18 <_fini>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr
