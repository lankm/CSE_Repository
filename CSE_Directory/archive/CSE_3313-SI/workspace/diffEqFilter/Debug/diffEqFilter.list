
diffEqFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000791c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08007ab0  08007ab0  00017ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008090  08008090  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          00000180  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d834  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc6  00000000  00000000  0002da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc0  00000000  00000000  000302a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c6e  00000000  00000000  00030e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d939  00000000  00000000  00052ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd042  00000000  00000000  0006040f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d451  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000471c  00000000  00000000  0012d4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a94 	.word	0x08007a94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	08007a94 	.word	0x08007a94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fe66 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f814 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f932 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8000f5c:	f000 f87a 	bl	8001054 <MX_TIM5_Init>
  MX_TIM7_Init();
 8000f60:	f000 f8ce 	bl	8001100 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 f902 	bl	800116c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <main+0x2c>)
 8000f6a:	f001 fefb 	bl	8002d64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <main+0x30>)
 8000f70:	f001 fe90 	bl	8002c94 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0x28>
 8000f76:	bf00      	nop
 8000f78:	20000278 	.word	0x20000278
 8000f7c:	20000230 	.word	0x20000230

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	; 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 f800 	bl	8003f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <SystemClock_Config+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a27      	ldr	r2, [pc, #156]	; (800104c <SystemClock_Config+0xcc>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <SystemClock_Config+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <SystemClock_Config+0xd0>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ff4:	2332      	movs	r3, #50	; 0x32
 8000ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f95d 	bl	80022c4 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001010:	f000 fc09 	bl	8001826 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2101      	movs	r1, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fbbe 	bl	80027b4 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800103e:	f000 fbf2 	bl	8001826 <Error_Handler>
  }
}
 8001042:	bf00      	nop
 8001044:	3750      	adds	r7, #80	; 0x50
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_TIM5_Init+0xa8>)
 800107a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM5_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_TIM5_Init+0xa4>)
 800108a:	f04f 32ff 	mov.w	r2, #4294967295
 800108e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_TIM5_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <MX_TIM5_Init+0xa4>)
 800109e:	f001 fed1 	bl	8002e44 <HAL_TIM_OC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80010a8:	f000 fbbd 	bl	8001826 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4619      	mov	r1, r3
 80010ba:	480f      	ldr	r0, [pc, #60]	; (80010f8 <MX_TIM5_Init+0xa4>)
 80010bc:	f002 faee 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80010c6:	f000 fbae 	bl	8001826 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM5_Init+0xa4>)
 80010e2:	f002 f807 	bl	80030f4 <HAL_TIM_OC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb9b 	bl	8001826 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000230 	.word	0x20000230
 80010fc:	40000c00 	.word	0x40000c00

08001100 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM7_Init+0x64>)
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_TIM7_Init+0x68>)
 8001112:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_TIM7_Init+0x64>)
 8001116:	2209      	movs	r2, #9
 8001118:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_TIM7_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_TIM7_Init+0x64>)
 8001122:	f242 720f 	movw	r2, #9999	; 0x270f
 8001126:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_TIM7_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM7_Init+0x64>)
 8001130:	f001 fd60 	bl	8002bf4 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800113a:	f000 fb74 	bl	8001826 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM7_Init+0x64>)
 800114c:	f002 faa6 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001156:	f000 fb66 	bl	8001826 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000278 	.word	0x20000278
 8001168:	40001400 	.word	0x40001400

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f002 fb0a 	bl	80037bc <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 fb3a 	bl	8001826 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002c0 	.word	0x200002c0
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	4ba6      	ldr	r3, [pc, #664]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4aa5      	ldr	r2, [pc, #660]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4ba3      	ldr	r3, [pc, #652]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	4b9f      	ldr	r3, [pc, #636]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a9e      	ldr	r2, [pc, #632]	; (8001474 <MX_GPIO_Init+0x2b4>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b9c      	ldr	r3, [pc, #624]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b98      	ldr	r3, [pc, #608]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a97      	ldr	r2, [pc, #604]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b91      	ldr	r3, [pc, #580]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a90      	ldr	r2, [pc, #576]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b8e      	ldr	r3, [pc, #568]	; (8001474 <MX_GPIO_Init+0x2b4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b8a      	ldr	r3, [pc, #552]	; (8001474 <MX_GPIO_Init+0x2b4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a89      	ldr	r2, [pc, #548]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b87      	ldr	r3, [pc, #540]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b83      	ldr	r3, [pc, #524]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a82      	ldr	r2, [pc, #520]	; (8001474 <MX_GPIO_Init+0x2b4>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b80      	ldr	r3, [pc, #512]	; (8001474 <MX_GPIO_Init+0x2b4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	487d      	ldr	r0, [pc, #500]	; (8001478 <MX_GPIO_Init+0x2b8>)
 8001284:	f000 ffec 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2101      	movs	r1, #1
 800128c:	487b      	ldr	r0, [pc, #492]	; (800147c <MX_GPIO_Init+0x2bc>)
 800128e:	f000 ffe7 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001292:	2200      	movs	r2, #0
 8001294:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001298:	4879      	ldr	r0, [pc, #484]	; (8001480 <MX_GPIO_Init+0x2c0>)
 800129a:	f000 ffe1 	bl	8002260 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800129e:	2308      	movs	r3, #8
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4870      	ldr	r0, [pc, #448]	; (8001478 <MX_GPIO_Init+0x2b8>)
 80012b6:	f000 fe37 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	486a      	ldr	r0, [pc, #424]	; (800147c <MX_GPIO_Init+0x2bc>)
 80012d2:	f000 fe29 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012d6:	2308      	movs	r3, #8
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e6:	2305      	movs	r3, #5
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4862      	ldr	r0, [pc, #392]	; (800147c <MX_GPIO_Init+0x2bc>)
 80012f2:	f000 fe19 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	485e      	ldr	r0, [pc, #376]	; (8001484 <MX_GPIO_Init+0x2c4>)
 800130c:	f000 fe0c 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001310:	2310      	movs	r3, #16
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001320:	2306      	movs	r3, #6
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4856      	ldr	r0, [pc, #344]	; (8001484 <MX_GPIO_Init+0x2c4>)
 800132c:	f000 fdfc 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001330:	23e0      	movs	r3, #224	; 0xe0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001340:	2305      	movs	r3, #5
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	484e      	ldr	r0, [pc, #312]	; (8001484 <MX_GPIO_Init+0x2c4>)
 800134c:	f000 fdec 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001350:	2304      	movs	r3, #4
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4849      	ldr	r0, [pc, #292]	; (8001488 <MX_GPIO_Init+0x2c8>)
 8001364:	f000 fde0 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137a:	2305      	movs	r3, #5
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4840      	ldr	r0, [pc, #256]	; (8001488 <MX_GPIO_Init+0x2c8>)
 8001386:	f000 fdcf 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800138a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800138e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4837      	ldr	r0, [pc, #220]	; (8001480 <MX_GPIO_Init+0x2c0>)
 80013a4:	f000 fdc0 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013a8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ba:	2306      	movs	r3, #6
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	482d      	ldr	r0, [pc, #180]	; (800147c <MX_GPIO_Init+0x2bc>)
 80013c6:	f000 fdaf 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80013ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4829      	ldr	r0, [pc, #164]	; (8001484 <MX_GPIO_Init+0x2c4>)
 80013e0:	f000 fda2 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80013e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013f6:	230a      	movs	r3, #10
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4820      	ldr	r0, [pc, #128]	; (8001484 <MX_GPIO_Init+0x2c4>)
 8001402:	f000 fd91 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001406:	2320      	movs	r3, #32
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <MX_GPIO_Init+0x2c0>)
 800141a:	f000 fd85 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800141e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001430:	2304      	movs	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_GPIO_Init+0x2c8>)
 800143c:	f000 fd74 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001444:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <MX_GPIO_Init+0x2b8>)
 8001456:	f000 fd67 	bl	8001f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2006      	movs	r0, #6
 8001460:	f000 fd2b 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001464:	2006      	movs	r0, #6
 8001466:	f000 fd44 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40021000 	.word	0x40021000
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400

0800148c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001494:	1d39      	adds	r1, r7, #4
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	2201      	movs	r2, #1
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <__io_putchar+0x20>)
 800149e:	f002 f9da 	bl	8003856 <HAL_UART_Transmit>

  return ch;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200002c0 	.word	0x200002c0

080014b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
	// Toggle Filtering on and off using user button
	if(filt==0)
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x1a>
	{

		filt = 1;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
	}else{

		filt = 0;
	}
	//HAL_Delay(1);
}
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_EXTI_Callback+0x20>
		filt = 0;
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000360 	.word	0x20000360

080014e0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a8b      	ldr	r2, [pc, #556]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f040 810a 	bne.w	8001706 <HAL_TIM_PeriodElapsedCallback+0x226>
		{
			clk[1] = TIM5->CNT;
 80014f2:	4b8a      	ldr	r3, [pc, #552]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b89      	ldr	r3, [pc, #548]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014fa:	605a      	str	r2, [r3, #4]
			dc = (clk[1] - clk[0]);
 80014fc:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4b87      	ldr	r3, [pc, #540]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	461a      	mov	r2, r3
 8001508:	4b86      	ldr	r3, [pc, #536]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800150a:	601a      	str	r2, [r3, #0]
			dt = (tim5_rate)*((float)dc);
 800150c:	4b85      	ldr	r3, [pc, #532]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001518:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
			fs = 1/dt;
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	4b7e      	ldr	r3, [pc, #504]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001538:	edc3 7a00 	vstr	s15, [r3]
			clk[0] = clk[1];
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a77      	ldr	r2, [pc, #476]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001542:	6013      	str	r3, [r2, #0]


			count = count + dt;
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	4b77      	ldr	r3, [pc, #476]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
			//for(int i = 0; i < N; i++){
			//	x[i+1] = x[i];
			//	y[i+1] = y[i];
			//}

			input = (sin(2*3.14159*fc*count));
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_f2d>
 8001564:	a36a      	add	r3, pc, #424	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f845 	bl	80005f8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7ff f836 	bl	80005f8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	ec43 2b17 	vmov	d7, r2, r3
 8001594:	eeb0 0a47 	vmov.f32	s0, s14
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	f005 fa30 	bl	8006a00 <sin>
 80015a0:	ec53 2b10 	vmov	r2, r3, d0
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fafe 	bl	8000ba8 <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a63      	ldr	r2, [pc, #396]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015b0:	6013      	str	r3, [r2, #0]
			noise_value = 1*(sin(2*3.14159*fn*count));
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffc6 	bl	8000548 <__aeabi_f2d>
 80015bc:	a354      	add	r3, pc, #336	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f819 	bl	80005f8 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4614      	mov	r4, r2
 80015cc:	461d      	mov	r5, r3
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7ff f80a 	bl	80005f8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	ec43 2b17 	vmov	d7, r2, r3
 80015ec:	eeb0 0a47 	vmov.f32	s0, s14
 80015f0:	eef0 0a67 	vmov.f32	s1, s15
 80015f4:	f005 fa04 	bl	8006a00 <sin>
 80015f8:	ec53 2b10 	vmov	r2, r3, d0
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fad2 	bl	8000ba8 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001608:	6013      	str	r3, [r2, #0]
			input = input + noise_value;
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	4b48      	ldr	r3, [pc, #288]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800161c:	edc3 7a00 	vstr	s15, [r3]

			//Different Equation Implementation
			if(filt==0)
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d132      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x1ae>
			{

				for(int i = N; i > 0; i--){
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e018      	b.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x182>
					x[i] = x[i-1];
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3b01      	subs	r3, #1
 8001634:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4944      	ldr	r1, [pc, #272]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	601a      	str	r2, [r3, #0]
					y[i] = y[i-1];
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3b01      	subs	r3, #1
 800164a:	4a42      	ldr	r2, [pc, #264]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4940      	ldr	r1, [pc, #256]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	601a      	str	r2, [r3, #0]
				for(int i = N; i > 0; i--){
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dce3      	bgt.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x150>
				}

				x[0] = input;
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a38      	ldr	r2, [pc, #224]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800166e:	6013      	str	r3, [r2, #0]
				y[0] = IIRFilter(B, A, x, y, N);
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800167a:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800167c:	4837      	ldr	r0, [pc, #220]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800167e:	f000 f877 	bl	8001770 <IIRFilter>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
 800168c:	e031      	b.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x212>
				//out = y[0];
			}else{
				for(int i = N2; i > 0; i--){
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e018      	b.n	80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
					x[i] = x[i-1];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3b01      	subs	r3, #1
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	492b      	ldr	r1, [pc, #172]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	601a      	str	r2, [r3, #0]
					y[i] = y[i-1];
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4926      	ldr	r1, [pc, #152]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	601a      	str	r2, [r3, #0]
				for(int i = N2; i > 0; i--){
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dce3      	bgt.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x1b6>
				}

				x[0] = input;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016d4:	6013      	str	r3, [r2, #0]
				y[0] = IIRFilter(B2, A2, x, y, N2);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016e0:	4920      	ldr	r1, [pc, #128]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e2:	4821      	ldr	r0, [pc, #132]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016e4:	f000 f844 	bl	8001770 <IIRFilter>
 80016e8:	eef0 7a40 	vmov.f32	s15, s0
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
				//out = y[0];
			}

			// Print y[n] to USART (to MATLAB)
			printf("%0.2f\r\n", y[0]);
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001702:	f003 f8b9 	bl	8004878 <iprintf>

	//Print values to help with Debug
//	printf("%0.5f: %0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\r\n", count, y[0], y[1], y[2], x[0], x[1], x[2]);


}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	f01b866e 	.word	0xf01b866e
 8001714:	401921f9 	.word	0x401921f9
 8001718:	20000278 	.word	0x20000278
 800171c:	40000c00 	.word	0x40000c00
 8001720:	20000364 	.word	0x20000364
 8001724:	2000036c 	.word	0x2000036c
 8001728:	20000008 	.word	0x20000008
 800172c:	20000370 	.word	0x20000370
 8001730:	20000374 	.word	0x20000374
 8001734:	20000308 	.word	0x20000308
 8001738:	20000000 	.word	0x20000000
 800173c:	2000035c 	.word	0x2000035c
 8001740:	20000004 	.word	0x20000004
 8001744:	20000304 	.word	0x20000304
 8001748:	20000360 	.word	0x20000360
 800174c:	20000378 	.word	0x20000378
 8001750:	20000334 	.word	0x20000334
 8001754:	2000030c 	.word	0x2000030c
 8001758:	2000000c 	.word	0x2000000c
 800175c:	20000010 	.word	0x20000010
 8001760:	20000034 	.word	0x20000034
 8001764:	20000014 	.word	0x20000014
 8001768:	20000024 	.word	0x20000024
 800176c:	08007ab0 	.word	0x08007ab0

08001770 <IIRFilter>:

float IIRFilter(float Bf[], float Af[], float ins[], float outs[], uint32_t Nf)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
	float xtot = 0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i <= Nf; i++) {
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	e016      	b.n	80017b8 <IIRFilter+0x48>
		xtot += Bf[i] * ins[i];
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i <= Nf; i++) {
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	3301      	adds	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017bc:	429a      	cmp	r2, r3
 80017be:	d2e4      	bcs.n	800178a <IIRFilter+0x1a>
	}

	float ytot = 0;
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
	for(int i = 1; i <= Nf; i++) {
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	e016      	b.n	80017fa <IIRFilter+0x8a>
		ytot += Af[i] * outs[i];
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	4413      	add	r3, r2
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i = 1; i <= Nf; i++) {
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017fe:	429a      	cmp	r2, r3
 8001800:	d2e4      	bcs.n	80017cc <IIRFilter+0x5c>
	}

	float fout = xtot - ytot;
 8001802:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001806:	edd7 7a07 	vldr	s15, [r7, #28]
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	edc7 7a05 	vstr	s15, [r7, #20]

	return fout;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	ee07 3a90 	vmov	s15, r3
}
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	372c      	adds	r7, #44	; 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182a:	b672      	cpsid	i
}
 800182c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182e:	e7fe      	b.n	800182e <Error_Handler+0x8>

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_MspInit+0x4c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x4c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186e:	2007      	movs	r0, #7
 8001870:	f000 fb18 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_TIM_OC_MspInit+0x3c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10d      	bne.n	80018ae <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_TIM_OC_MspInit+0x40>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_TIM_OC_MspInit+0x40>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_TIM_OC_MspInit+0x40>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40000c00 	.word	0x40000c00
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_TIM_Base_MspInit+0x48>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d115      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_TIM_Base_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_TIM_Base_MspInit+0x4c>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_TIM_Base_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2037      	movs	r0, #55	; 0x37
 80018f8:	f000 fadf 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018fc:	2037      	movs	r0, #55	; 0x37
 80018fe:	f000 faf8 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40001400 	.word	0x40001400
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x84>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12b      	bne.n	800198e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_UART_MspInit+0x88>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_UART_MspInit+0x88>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_UART_MspInit+0x88>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_UART_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800196e:	230c      	movs	r3, #12
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x8c>)
 800198a:	f000 facd 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40004400 	.word	0x40004400
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f968 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 fc49 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM7_IRQHandler+0x10>)
 8001a0e:	f001 fa68 	bl	8002ee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000278 	.word	0x20000278

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a36:	f002 fa83 	bl	8003f40 <__errno>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_exit>:

void _exit (int status)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe7 	bl	8001a2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5e:	e7fe      	b.n	8001a5e <_exit+0x12>

08001a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e00a      	b.n	8001a88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a72:	f3af 8000 	nop.w
 8001a76:	4601      	mov	r1, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	b2ca      	uxtb	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf0      	blt.n	8001a72 <_read+0x12>
	}

return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e009      	b.n	8001ac0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fce9 	bl	800148c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf1      	blt.n	8001aac <_write+0x12>
	}
	return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_close>:

int _close(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_isatty>:

int _isatty(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	return 1;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f002 f9e8 	bl	8003f40 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	2000037c 	.word	0x2000037c
 8001ba4:	20000398 	.word	0x20000398

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd2:	490e      	ldr	r1, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be8:	4c0b      	ldr	r4, [pc, #44]	; (8001c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff ffd7 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f002 f9a7 	bl	8003f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff f9a5 	bl	8000f4c <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001c10:	08008098 	.word	0x08008098
  ldr r2, =_sbss
 8001c14:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001c18:	20000394 	.word	0x20000394

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f92b 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fdec 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f943 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f90b 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000038 	.word	0x20000038
 8001cbc:	20000040 	.word	0x20000040
 8001cc0:	2000003c 	.word	0x2000003c

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000040 	.word	0x20000040
 8001ce8:	20000380 	.word	0x20000380

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000380 	.word	0x20000380

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e16b      	b.n	800221c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 815a 	bne.w	8002216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d005      	beq.n	8001f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d130      	bne.n	8001fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0201 	and.w	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d017      	beq.n	8002018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d123      	bne.n	800206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80b4 	beq.w	8002216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b60      	ldr	r3, [pc, #384]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ca:	4a5b      	ldr	r2, [pc, #364]	; (8002238 <HAL_GPIO_Init+0x310>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_GPIO_Init+0x314>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x226>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a51      	ldr	r2, [pc, #324]	; (8002240 <HAL_GPIO_Init+0x318>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x222>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_GPIO_Init+0x31c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x21e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4f      	ldr	r2, [pc, #316]	; (8002248 <HAL_GPIO_Init+0x320>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x21a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4e      	ldr	r2, [pc, #312]	; (800224c <HAL_GPIO_Init+0x324>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x216>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_GPIO_Init+0x328>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x212>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_GPIO_Init+0x32c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_GPIO_Init+0x330>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x20a>
 800212e:	2307      	movs	r3, #7
 8002130:	e00e      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002132:	2308      	movs	r3, #8
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002136:	2306      	movs	r3, #6
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <HAL_GPIO_Init+0x310>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_GPIO_Init+0x334>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_GPIO_Init+0x334>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_GPIO_Init+0x334>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_GPIO_Init+0x334>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_GPIO_Init+0x334>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_GPIO_Init+0x334>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_GPIO_Init+0x334>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_GPIO_Init+0x334>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae90 	bls.w	8001f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40021800 	.word	0x40021800
 8002258:	40021c00 	.word	0x40021c00
 800225c:	40013c00 	.word	0x40013c00

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f8fc 	bl	80014b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e267      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d075      	beq.n	80023ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e2:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d00c      	beq.n	8002308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05b      	beq.n	80023cc <HAL_RCC_OscConfig+0x108>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d157      	bne.n	80023cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e242      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x74>
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x98>
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6c      	ldr	r2, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 800235c:	4b69      	ldr	r3, [pc, #420]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a68      	ldr	r2, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fcb6 	bl	8001cec <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fcb2 	bl	8001cec <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e207      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b5b      	ldr	r3, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xc0>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fca2 	bl	8001cec <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fc9e 	bl	8001cec <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1f3      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b51      	ldr	r3, [pc, #324]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0xe8>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d063      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f2:	4b44      	ldr	r3, [pc, #272]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x152>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1c7      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	e03a      	b.n	80024a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_RCC_OscConfig+0x244>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff fc57 	bl	8001cec <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002442:	f7ff fc53 	bl	8001cec <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1a8      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4925      	ldr	r1, [pc, #148]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x244>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fc36 	bl	8001cec <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7ff fc32 	bl	8001cec <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e187      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d036      	beq.n	800251c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCC_OscConfig+0x248>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7ff fc16 	bl	8001cec <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fc12 	bl	8001cec <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e167      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x200>
 80024e2:	e01b      	b.n	800251c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x248>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fbff 	bl	8001cec <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	e00e      	b.n	8002510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7ff fbfb 	bl	8001cec <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d907      	bls.n	8002510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e150      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
 8002504:	40023800 	.word	0x40023800
 8002508:	42470000 	.word	0x42470000
 800250c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ea      	bne.n	80024f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8097 	beq.w	8002658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b7d      	ldr	r3, [pc, #500]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a7c      	ldr	r2, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b77      	ldr	r3, [pc, #476]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a73      	ldr	r2, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7ff fbbb 	bl	8001cec <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7ff fbb7 	bl	8001cec <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e10c      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x2ea>
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a63      	ldr	r2, [pc, #396]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e01c      	b.n	80025e8 <HAL_RCC_OscConfig+0x324>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x30c>
 80025b6:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a5e      	ldr	r2, [pc, #376]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0x324>
 80025d0:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a57      	ldr	r2, [pc, #348]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d015      	beq.n	800261c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff fb7c 	bl	8001cec <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7ff fb78 	bl	8001cec <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0cb      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ee      	beq.n	80025f8 <HAL_RCC_OscConfig+0x334>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7ff fb66 	bl	8001cec <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7ff fb62 	bl	8001cec <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0b5      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ee      	bne.n	8002624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a38      	ldr	r2, [pc, #224]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a1 	beq.w	80027a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d05c      	beq.n	8002728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d141      	bne.n	80026fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x478>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fb36 	bl	8001cec <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7ff fb32 	bl	8001cec <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e087      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	491b      	ldr	r1, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x478>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fb0b 	bl	8001cec <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7ff fb07 	bl	8001cec <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e05c      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x416>
 80026f8:	e054      	b.n	80027a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_OscConfig+0x478>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff faf4 	bl	8001cec <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff faf0 	bl	8001cec <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e045      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x444>
 8002726:	e03d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e038      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
 8002734:	40023800 	.word	0x40023800
 8002738:	40007000 	.word	0x40007000
 800273c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x4ec>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d028      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d121      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d11a      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002778:	4293      	cmp	r3, r2
 800277a:	d111      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0cc      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d90c      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	494d      	ldr	r1, [pc, #308]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d044      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d119      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286e:	2b03      	cmp	r3, #3
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e067      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4934      	ldr	r1, [pc, #208]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a4:	f7ff fa22 	bl	8001cec <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7ff fa1e 	bl	8001cec <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e04f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 020c 	and.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1eb      	bne.n	80028ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d20c      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e032      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293a:	f000 f821 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f982 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00
 8002970:	40023800 	.word	0x40023800
 8002974:	08007ab8 	.word	0x08007ab8
 8002978:	20000038 	.word	0x20000038
 800297c:	2000003c 	.word	0x2000003c

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002984:	b094      	sub	sp, #80	; 0x50
 8002986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	647b      	str	r3, [r7, #68]	; 0x44
 800298c:	2300      	movs	r3, #0
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002990:	2300      	movs	r3, #0
 8002992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002998:	4b79      	ldr	r3, [pc, #484]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x40>
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	f200 80e1 	bhi.w	8002b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x3a>
 80029b2:	e0db      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029b8:	e0db      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ba:	4b73      	ldr	r3, [pc, #460]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029be:	e0d8      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	099b      	lsrs	r3, r3, #6
 80029dc:	2200      	movs	r2, #0
 80029de:	63bb      	str	r3, [r7, #56]	; 0x38
 80029e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ea:	2300      	movs	r3, #0
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
 80029ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	f04f 0000 	mov.w	r0, #0
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a04:	0150      	lsls	r0, r2, #5
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	1a51      	subs	r1, r2, r1
 8002a0e:	6139      	str	r1, [r7, #16]
 8002a10:	4629      	mov	r1, r5
 8002a12:	eb63 0301 	sbc.w	r3, r3, r1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a24:	4659      	mov	r1, fp
 8002a26:	018b      	lsls	r3, r1, #6
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2e:	4651      	mov	r1, sl
 8002a30:	018a      	lsls	r2, r1, #6
 8002a32:	4651      	mov	r1, sl
 8002a34:	ebb2 0801 	subs.w	r8, r2, r1
 8002a38:	4659      	mov	r1, fp
 8002a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	4623      	mov	r3, r4
 8002a58:	eb18 0303 	adds.w	r3, r8, r3
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	462b      	mov	r3, r5
 8002a60:	eb49 0303 	adc.w	r3, r9, r3
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a72:	4629      	mov	r1, r5
 8002a74:	024b      	lsls	r3, r1, #9
 8002a76:	4621      	mov	r1, r4
 8002a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	024a      	lsls	r2, r1, #9
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a90:	f7fe f8da 	bl	8000c48 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9c:	e058      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0159      	lsls	r1, r3, #5
 8002ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aca:	0150      	lsls	r0, r2, #5
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002af0:	ebb2 040a 	subs.w	r4, r2, sl
 8002af4:	eb63 050b 	sbc.w	r5, r3, fp
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	00eb      	lsls	r3, r5, #3
 8002b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b06:	00e2      	lsls	r2, r4, #3
 8002b08:	4614      	mov	r4, r2
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	18e3      	adds	r3, r4, r3
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	464b      	mov	r3, r9
 8002b14:	eb45 0303 	adc.w	r3, r5, r3
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b26:	4629      	mov	r1, r5
 8002b28:	028b      	lsls	r3, r1, #10
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b30:	4621      	mov	r1, r4
 8002b32:	028a      	lsls	r2, r1, #10
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	61fa      	str	r2, [r7, #28]
 8002b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b44:	f7fe f880 	bl	8000c48 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3750      	adds	r7, #80	; 0x50
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	007a1200 	.word	0x007a1200

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000038 	.word	0x20000038

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08007ac8 	.word	0x08007ac8

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffdc 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08007ac8 	.word	0x08007ac8

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fe52 	bl	80018c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fae2 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e046      	b.n	8002d3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <HAL_TIM_Base_Start+0xb4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d022      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d01d      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_TIM_Base_Start+0xb8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d018      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_TIM_Base_Start+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_TIM_Base_Start+0xc0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_TIM_Base_Start+0xc4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_TIM_Base_Start+0xc8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_TIM_Base_Start+0x70>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_TIM_Base_Start+0xcc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d111      	bne.n	8002d28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d010      	beq.n	8002d38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d26:	e007      	b.n	8002d38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40001800 	.word	0x40001800

08002d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e04e      	b.n	8002e1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d01d      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x80>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d010      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	e007      	b.n	8002e18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	40010400 	.word	0x40010400
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	40001800 	.word	0x40001800

08002e44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e041      	b.n	8002eda <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe fd08 	bl	8001880 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 f9ba 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d122      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d11b      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f06f 0202 	mvn.w	r2, #2
 8002f0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f94b 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002f2a:	e005      	b.n	8002f38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f93d 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f94e 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d122      	bne.n	8002f92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d11b      	bne.n	8002f92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f06f 0204 	mvn.w	r2, #4
 8002f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f921 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002f7e:	e005      	b.n	8002f8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f913 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f924 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d122      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11b      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f06f 0208 	mvn.w	r2, #8
 8002fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8f7 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002fd2:	e005      	b.n	8002fe0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8e9 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8fa 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d122      	bne.n	800303a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d11b      	bne.n	800303a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f06f 0210 	mvn.w	r2, #16
 800300a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2208      	movs	r2, #8
 8003010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8cd 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8003026:	e005      	b.n	8003034 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8bf 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8d0 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10e      	bne.n	8003066 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0201 	mvn.w	r2, #1
 800305e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fe fa3d 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b80      	cmp	r3, #128	; 0x80
 8003072:	d10e      	bne.n	8003092 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d107      	bne.n	8003092 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800308a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb8b 	bl	80037a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d10e      	bne.n	80030be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d107      	bne.n	80030be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f895 	bl	80031e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0220 	mvn.w	r2, #32
 80030e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb55 	bl	8003794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_TIM_OC_ConfigChannel+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e048      	b.n	80031a4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d839      	bhi.n	8003194 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800315d 	.word	0x0800315d
 800312c:	08003195 	.word	0x08003195
 8003130:	08003195 	.word	0x08003195
 8003134:	08003195 	.word	0x08003195
 8003138:	0800316b 	.word	0x0800316b
 800313c:	08003195 	.word	0x08003195
 8003140:	08003195 	.word	0x08003195
 8003144:	08003195 	.word	0x08003195
 8003148:	08003179 	.word	0x08003179
 800314c:	08003195 	.word	0x08003195
 8003150:	08003195 	.word	0x08003195
 8003154:	08003195 	.word	0x08003195
 8003158:	08003187 	.word	0x08003187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f8ea 	bl	800333c <TIM_OC1_SetConfig>
      break;
 8003168:	e017      	b.n	800319a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f953 	bl	800341c <TIM_OC2_SetConfig>
      break;
 8003176:	e010      	b.n	800319a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f9c2 	bl	8003508 <TIM_OC3_SetConfig>
      break;
 8003184:	e009      	b.n	800319a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fa2f 	bl	80035f0 <TIM_OC4_SetConfig>
      break;
 8003192:	e002      	b.n	800319a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
      break;
 8003198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a40      	ldr	r2, [pc, #256]	; (8003310 <TIM_Base_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d00f      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3d      	ldr	r2, [pc, #244]	; (8003314 <TIM_Base_SetConfig+0x118>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <TIM_Base_SetConfig+0x11c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <TIM_Base_SetConfig+0x120>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <TIM_Base_SetConfig+0x124>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2f      	ldr	r2, [pc, #188]	; (8003310 <TIM_Base_SetConfig+0x114>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02b      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d027      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <TIM_Base_SetConfig+0x118>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d023      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <TIM_Base_SetConfig+0x11c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2a      	ldr	r2, [pc, #168]	; (800331c <TIM_Base_SetConfig+0x120>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01b      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a29      	ldr	r2, [pc, #164]	; (8003320 <TIM_Base_SetConfig+0x124>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d017      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <TIM_Base_SetConfig+0x128>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <TIM_Base_SetConfig+0x12c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00f      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a26      	ldr	r2, [pc, #152]	; (800332c <TIM_Base_SetConfig+0x130>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <TIM_Base_SetConfig+0x134>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a24      	ldr	r2, [pc, #144]	; (8003334 <TIM_Base_SetConfig+0x138>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a23      	ldr	r2, [pc, #140]	; (8003338 <TIM_Base_SetConfig+0x13c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d108      	bne.n	80032c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <TIM_Base_SetConfig+0x114>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0xf8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <TIM_Base_SetConfig+0x124>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d103      	bne.n	80032fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	615a      	str	r2, [r3, #20]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40010400 	.word	0x40010400
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800
 8003330:	40001800 	.word	0x40001800
 8003334:	40001c00 	.word	0x40001c00
 8003338:	40002000 	.word	0x40002000

0800333c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 0302 	bic.w	r3, r3, #2
 8003384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a20      	ldr	r2, [pc, #128]	; (8003414 <TIM_OC1_SetConfig+0xd8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_OC1_SetConfig+0x64>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <TIM_OC1_SetConfig+0xdc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10c      	bne.n	80033ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0308 	bic.w	r3, r3, #8
 80033a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a15      	ldr	r2, [pc, #84]	; (8003414 <TIM_OC1_SetConfig+0xd8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_OC1_SetConfig+0x8e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <TIM_OC1_SetConfig+0xdc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d111      	bne.n	80033ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40010000 	.word	0x40010000
 8003418:	40010400 	.word	0x40010400

0800341c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a22      	ldr	r2, [pc, #136]	; (8003500 <TIM_OC2_SetConfig+0xe4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC2_SetConfig+0x68>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <TIM_OC2_SetConfig+0xe8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a17      	ldr	r2, [pc, #92]	; (8003500 <TIM_OC2_SetConfig+0xe4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_OC2_SetConfig+0x94>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <TIM_OC2_SetConfig+0xe8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d113      	bne.n	80034d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40010400 	.word	0x40010400

08003508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <TIM_OC3_SetConfig+0xe0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_OC3_SetConfig+0x66>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a20      	ldr	r2, [pc, #128]	; (80035ec <TIM_OC3_SetConfig+0xe4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10d      	bne.n	800358a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <TIM_OC3_SetConfig+0xe0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_OC3_SetConfig+0x92>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <TIM_OC3_SetConfig+0xe4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d113      	bne.n	80035c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40010400 	.word	0x40010400

080035f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <TIM_OC4_SetConfig+0xa4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC4_SetConfig+0x68>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <TIM_OC4_SetConfig+0xa8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d109      	bne.n	800366c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010000 	.word	0x40010000
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e05a      	b.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a21      	ldr	r2, [pc, #132]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d01d      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40010400 	.word	0x40010400
 800378c:	40014000 	.word	0x40014000
 8003790:	40001800 	.word	0x40001800

08003794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e03f      	b.n	800384e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe f896 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f929 	bl	8003a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b08a      	sub	sp, #40	; 0x28
 800385a:	af02      	add	r7, sp, #8
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d17c      	bne.n	8003970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_UART_Transmit+0x2c>
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e075      	b.n	8003972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Transmit+0x3e>
 8003890:	2302      	movs	r3, #2
 8003892:	e06e      	b.n	8003972 <HAL_UART_Transmit+0x11c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2221      	movs	r2, #33	; 0x21
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038aa:	f7fe fa1f 	bl	8001cec <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d108      	bne.n	80038d8 <HAL_UART_Transmit+0x82>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e003      	b.n	80038e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038e8:	e02a      	b.n	8003940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f840 	bl	800397a <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e036      	b.n	8003972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3302      	adds	r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e007      	b.n	8003932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1cf      	bne.n	80038ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2140      	movs	r1, #64	; 0x40
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f810 	bl	800397a <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b090      	sub	sp, #64	; 0x40
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	e050      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d04c      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x30>
 800399a:	f7fe f9a7 	bl	8001cec <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d241      	bcs.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ca:	637a      	str	r2, [r7, #52]	; 0x34
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	613b      	str	r3, [r7, #16]
   return(result);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039fe:	623a      	str	r2, [r7, #32]
 8003a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69f9      	ldr	r1, [r7, #28]
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d09f      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3740      	adds	r7, #64	; 0x40
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b0c0      	sub	sp, #256	; 0x100
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	ea40 0301 	orr.w	r3, r0, r1
 8003a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ab0:	f021 010c 	bic.w	r1, r1, #12
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	6999      	ldr	r1, [r3, #24]
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	ea40 0301 	orr.w	r3, r0, r1
 8003ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <UART_SetConfig+0x2cc>)
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d005      	beq.n	8003af8 <UART_SetConfig+0xa0>
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <UART_SetConfig+0x2d0>)
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d104      	bne.n	8003b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7ff f868 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8003afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b00:	e003      	b.n	8003b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b02:	f7ff f84f 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8003b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	f040 810c 	bne.w	8003d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b32:	415b      	adcs	r3, r3
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	eb12 0801 	adds.w	r8, r2, r1
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb43 0901 	adc.w	r9, r3, r1
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5a:	4690      	mov	r8, r2
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	eb18 0303 	adds.w	r3, r8, r3
 8003b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b68:	462b      	mov	r3, r5
 8003b6a:	eb49 0303 	adc.w	r3, r9, r3
 8003b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b86:	460b      	mov	r3, r1
 8003b88:	18db      	adds	r3, r3, r3
 8003b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	eb42 0303 	adc.w	r3, r2, r3
 8003b92:	657b      	str	r3, [r7, #84]	; 0x54
 8003b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b9c:	f7fd f854 	bl	8000c48 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	011c      	lsls	r4, r3, #4
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf0:	4692      	mov	sl, r2
 8003bf2:	469b      	mov	fp, r3
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	eb4b 0303 	adc.w	r3, fp, r3
 8003c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	18db      	adds	r3, r3, r3
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
 8003c22:	4613      	mov	r3, r2
 8003c24:	eb42 0303 	adc.w	r3, r2, r3
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c32:	f7fd f809 	bl	8000c48 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2264      	movs	r2, #100	; 0x64
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	1acb      	subs	r3, r1, r3
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003c54:	fba3 2302 	umull	r2, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c84:	4641      	mov	r1, r8
 8003c86:	1851      	adds	r1, r2, r1
 8003c88:	6339      	str	r1, [r7, #48]	; 0x30
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	414b      	adcs	r3, r1
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	00cb      	lsls	r3, r1, #3
 8003ca0:	4651      	mov	r1, sl
 8003ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca6:	4651      	mov	r1, sl
 8003ca8:	00ca      	lsls	r2, r1, #3
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb8:	464b      	mov	r3, r9
 8003cba:	460a      	mov	r2, r1
 8003cbc:	eb42 0303 	adc.w	r3, r2, r3
 8003cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cd8:	460b      	mov	r3, r1
 8003cda:	18db      	adds	r3, r3, r3
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cde:	4613      	mov	r3, r2
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cee:	f7fc ffab 	bl	8000c48 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	2164      	movs	r1, #100	; 0x64
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	3332      	adds	r3, #50	; 0x32
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	f003 0207 	and.w	r2, r3, #7
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4422      	add	r2, r4
 8003d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d20:	e105      	b.n	8003f2e <UART_SetConfig+0x4d6>
 8003d22:	bf00      	nop
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	1891      	adds	r1, r2, r2
 8003d48:	6239      	str	r1, [r7, #32]
 8003d4a:	415b      	adcs	r3, r3
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d52:	4641      	mov	r1, r8
 8003d54:	1854      	adds	r4, r2, r1
 8003d56:	4649      	mov	r1, r9
 8003d58:	eb43 0501 	adc.w	r5, r3, r1
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	00eb      	lsls	r3, r5, #3
 8003d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6a:	00e2      	lsls	r2, r4, #3
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	18e3      	adds	r3, r4, r3
 8003d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d78:	464b      	mov	r3, r9
 8003d7a:	eb45 0303 	adc.w	r3, r5, r3
 8003d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d9e:	4629      	mov	r1, r5
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	4621      	mov	r1, r4
 8003da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da8:	4621      	mov	r1, r4
 8003daa:	008a      	lsls	r2, r1, #2
 8003dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003db0:	f7fc ff4a 	bl	8000c48 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003dba:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	011c      	lsls	r4, r3, #4
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	61b9      	str	r1, [r7, #24]
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6139      	str	r1, [r7, #16]
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	4641      	mov	r1, r8
 8003e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e46:	4641      	mov	r1, r8
 8003e48:	008a      	lsls	r2, r1, #2
 8003e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e4e:	f7fc fefb 	bl	8000c48 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	3332      	adds	r3, #50	; 0x32
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e76:	441c      	add	r4, r3
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e80:	677a      	str	r2, [r7, #116]	; 0x74
 8003e82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e86:	4642      	mov	r2, r8
 8003e88:	464b      	mov	r3, r9
 8003e8a:	1891      	adds	r1, r2, r2
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	415b      	adcs	r3, r3
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e96:	4641      	mov	r1, r8
 8003e98:	1851      	adds	r1, r2, r1
 8003e9a:	6039      	str	r1, [r7, #0]
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	414b      	adcs	r3, r1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eae:	4659      	mov	r1, fp
 8003eb0:	00cb      	lsls	r3, r1, #3
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb8:	4651      	mov	r1, sl
 8003eba:	00ca      	lsls	r2, r1, #3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec8:	464b      	mov	r3, r9
 8003eca:	460a      	mov	r2, r1
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
 8003edc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eea:	4649      	mov	r1, r9
 8003eec:	008b      	lsls	r3, r1, #2
 8003eee:	4641      	mov	r1, r8
 8003ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	008a      	lsls	r2, r1, #2
 8003ef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003efc:	f7fc fea4 	bl	8000c48 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003f06:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2164      	movs	r1, #100	; 0x64
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	; 0x32
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4422      	add	r2, r4
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3a:	bf00      	nop
 8003f3c:	51eb851f 	.word	0x51eb851f

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000044 	.word	0x20000044

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4d0d      	ldr	r5, [pc, #52]	; (8003f84 <__libc_init_array+0x38>)
 8003f50:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <__libc_init_array+0x3c>)
 8003f52:	1b64      	subs	r4, r4, r5
 8003f54:	10a4      	asrs	r4, r4, #2
 8003f56:	2600      	movs	r6, #0
 8003f58:	42a6      	cmp	r6, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	4d0b      	ldr	r5, [pc, #44]	; (8003f8c <__libc_init_array+0x40>)
 8003f5e:	4c0c      	ldr	r4, [pc, #48]	; (8003f90 <__libc_init_array+0x44>)
 8003f60:	f003 fd98 	bl	8007a94 <_init>
 8003f64:	1b64      	subs	r4, r4, r5
 8003f66:	10a4      	asrs	r4, r4, #2
 8003f68:	2600      	movs	r6, #0
 8003f6a:	42a6      	cmp	r6, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f74:	4798      	blx	r3
 8003f76:	3601      	adds	r6, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7e:	4798      	blx	r3
 8003f80:	3601      	adds	r6, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	08008090 	.word	0x08008090
 8003f88:	08008090 	.word	0x08008090
 8003f8c:	08008090 	.word	0x08008090
 8003f90:	08008094 	.word	0x08008094

08003f94 <memset>:
 8003f94:	4402      	add	r2, r0
 8003f96:	4603      	mov	r3, r0
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <memset+0xa>
 8003f9c:	4770      	bx	lr
 8003f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa2:	e7f9      	b.n	8003f98 <memset+0x4>

08003fa4 <__cvt>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	ec55 4b10 	vmov	r4, r5, d0
 8003fac:	2d00      	cmp	r5, #0
 8003fae:	460e      	mov	r6, r1
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	bfbb      	ittet	lt
 8003fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003fba:	461d      	movlt	r5, r3
 8003fbc:	2300      	movge	r3, #0
 8003fbe:	232d      	movlt	r3, #45	; 0x2d
 8003fc0:	700b      	strb	r3, [r1, #0]
 8003fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fc8:	4691      	mov	r9, r2
 8003fca:	f023 0820 	bic.w	r8, r3, #32
 8003fce:	bfbc      	itt	lt
 8003fd0:	4622      	movlt	r2, r4
 8003fd2:	4614      	movlt	r4, r2
 8003fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fd8:	d005      	beq.n	8003fe6 <__cvt+0x42>
 8003fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fde:	d100      	bne.n	8003fe2 <__cvt+0x3e>
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	e000      	b.n	8003fe8 <__cvt+0x44>
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	ab03      	add	r3, sp, #12
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	ab02      	add	r3, sp, #8
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	ec45 4b10 	vmov	d0, r4, r5
 8003ff4:	4653      	mov	r3, sl
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	f000 fce2 	bl	80049c0 <_dtoa_r>
 8003ffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004000:	4607      	mov	r7, r0
 8004002:	d102      	bne.n	800400a <__cvt+0x66>
 8004004:	f019 0f01 	tst.w	r9, #1
 8004008:	d022      	beq.n	8004050 <__cvt+0xac>
 800400a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800400e:	eb07 0906 	add.w	r9, r7, r6
 8004012:	d110      	bne.n	8004036 <__cvt+0x92>
 8004014:	783b      	ldrb	r3, [r7, #0]
 8004016:	2b30      	cmp	r3, #48	; 0x30
 8004018:	d10a      	bne.n	8004030 <__cvt+0x8c>
 800401a:	2200      	movs	r2, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f7fc fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004026:	b918      	cbnz	r0, 8004030 <__cvt+0x8c>
 8004028:	f1c6 0601 	rsb	r6, r6, #1
 800402c:	f8ca 6000 	str.w	r6, [sl]
 8004030:	f8da 3000 	ldr.w	r3, [sl]
 8004034:	4499      	add	r9, r3
 8004036:	2200      	movs	r2, #0
 8004038:	2300      	movs	r3, #0
 800403a:	4620      	mov	r0, r4
 800403c:	4629      	mov	r1, r5
 800403e:	f7fc fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8004042:	b108      	cbz	r0, 8004048 <__cvt+0xa4>
 8004044:	f8cd 900c 	str.w	r9, [sp, #12]
 8004048:	2230      	movs	r2, #48	; 0x30
 800404a:	9b03      	ldr	r3, [sp, #12]
 800404c:	454b      	cmp	r3, r9
 800404e:	d307      	bcc.n	8004060 <__cvt+0xbc>
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004054:	1bdb      	subs	r3, r3, r7
 8004056:	4638      	mov	r0, r7
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	b004      	add	sp, #16
 800405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	9103      	str	r1, [sp, #12]
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e7f0      	b.n	800404a <__cvt+0xa6>

08004068 <__exponent>:
 8004068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800406a:	4603      	mov	r3, r0
 800406c:	2900      	cmp	r1, #0
 800406e:	bfb8      	it	lt
 8004070:	4249      	neglt	r1, r1
 8004072:	f803 2b02 	strb.w	r2, [r3], #2
 8004076:	bfb4      	ite	lt
 8004078:	222d      	movlt	r2, #45	; 0x2d
 800407a:	222b      	movge	r2, #43	; 0x2b
 800407c:	2909      	cmp	r1, #9
 800407e:	7042      	strb	r2, [r0, #1]
 8004080:	dd2a      	ble.n	80040d8 <__exponent+0x70>
 8004082:	f10d 0407 	add.w	r4, sp, #7
 8004086:	46a4      	mov	ip, r4
 8004088:	270a      	movs	r7, #10
 800408a:	46a6      	mov	lr, r4
 800408c:	460a      	mov	r2, r1
 800408e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004092:	fb07 1516 	mls	r5, r7, r6, r1
 8004096:	3530      	adds	r5, #48	; 0x30
 8004098:	2a63      	cmp	r2, #99	; 0x63
 800409a:	f104 34ff 	add.w	r4, r4, #4294967295
 800409e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040a2:	4631      	mov	r1, r6
 80040a4:	dcf1      	bgt.n	800408a <__exponent+0x22>
 80040a6:	3130      	adds	r1, #48	; 0x30
 80040a8:	f1ae 0502 	sub.w	r5, lr, #2
 80040ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040b0:	1c44      	adds	r4, r0, #1
 80040b2:	4629      	mov	r1, r5
 80040b4:	4561      	cmp	r1, ip
 80040b6:	d30a      	bcc.n	80040ce <__exponent+0x66>
 80040b8:	f10d 0209 	add.w	r2, sp, #9
 80040bc:	eba2 020e 	sub.w	r2, r2, lr
 80040c0:	4565      	cmp	r5, ip
 80040c2:	bf88      	it	hi
 80040c4:	2200      	movhi	r2, #0
 80040c6:	4413      	add	r3, r2
 80040c8:	1a18      	subs	r0, r3, r0
 80040ca:	b003      	add	sp, #12
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040d6:	e7ed      	b.n	80040b4 <__exponent+0x4c>
 80040d8:	2330      	movs	r3, #48	; 0x30
 80040da:	3130      	adds	r1, #48	; 0x30
 80040dc:	7083      	strb	r3, [r0, #2]
 80040de:	70c1      	strb	r1, [r0, #3]
 80040e0:	1d03      	adds	r3, r0, #4
 80040e2:	e7f1      	b.n	80040c8 <__exponent+0x60>

080040e4 <_printf_float>:
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	ed2d 8b02 	vpush	{d8}
 80040ec:	b08d      	sub	sp, #52	; 0x34
 80040ee:	460c      	mov	r4, r1
 80040f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040f4:	4616      	mov	r6, r2
 80040f6:	461f      	mov	r7, r3
 80040f8:	4605      	mov	r5, r0
 80040fa:	f001 fb45 	bl	8005788 <_localeconv_r>
 80040fe:	f8d0 a000 	ldr.w	sl, [r0]
 8004102:	4650      	mov	r0, sl
 8004104:	f7fc f864 	bl	80001d0 <strlen>
 8004108:	2300      	movs	r3, #0
 800410a:	930a      	str	r3, [sp, #40]	; 0x28
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	9305      	str	r3, [sp, #20]
 8004110:	f8d8 3000 	ldr.w	r3, [r8]
 8004114:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004118:	3307      	adds	r3, #7
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	f103 0208 	add.w	r2, r3, #8
 8004122:	f8c8 2000 	str.w	r2, [r8]
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800412e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	f8cd 8018 	str.w	r8, [sp, #24]
 800413c:	ee08 0a10 	vmov	s16, r0
 8004140:	4b9f      	ldr	r3, [pc, #636]	; (80043c0 <_printf_float+0x2dc>)
 8004142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	f7fc fcef 	bl	8000b2c <__aeabi_dcmpun>
 800414e:	bb88      	cbnz	r0, 80041b4 <_printf_float+0xd0>
 8004150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004154:	4b9a      	ldr	r3, [pc, #616]	; (80043c0 <_printf_float+0x2dc>)
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	f7fc fcc9 	bl	8000af0 <__aeabi_dcmple>
 800415e:	bb48      	cbnz	r0, 80041b4 <_printf_float+0xd0>
 8004160:	2200      	movs	r2, #0
 8004162:	2300      	movs	r3, #0
 8004164:	4640      	mov	r0, r8
 8004166:	4649      	mov	r1, r9
 8004168:	f7fc fcb8 	bl	8000adc <__aeabi_dcmplt>
 800416c:	b110      	cbz	r0, 8004174 <_printf_float+0x90>
 800416e:	232d      	movs	r3, #45	; 0x2d
 8004170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004174:	4b93      	ldr	r3, [pc, #588]	; (80043c4 <_printf_float+0x2e0>)
 8004176:	4894      	ldr	r0, [pc, #592]	; (80043c8 <_printf_float+0x2e4>)
 8004178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800417c:	bf94      	ite	ls
 800417e:	4698      	movls	r8, r3
 8004180:	4680      	movhi	r8, r0
 8004182:	2303      	movs	r3, #3
 8004184:	6123      	str	r3, [r4, #16]
 8004186:	9b05      	ldr	r3, [sp, #20]
 8004188:	f023 0204 	bic.w	r2, r3, #4
 800418c:	6022      	str	r2, [r4, #0]
 800418e:	f04f 0900 	mov.w	r9, #0
 8004192:	9700      	str	r7, [sp, #0]
 8004194:	4633      	mov	r3, r6
 8004196:	aa0b      	add	r2, sp, #44	; 0x2c
 8004198:	4621      	mov	r1, r4
 800419a:	4628      	mov	r0, r5
 800419c:	f000 f9d8 	bl	8004550 <_printf_common>
 80041a0:	3001      	adds	r0, #1
 80041a2:	f040 8090 	bne.w	80042c6 <_printf_float+0x1e2>
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295
 80041aa:	b00d      	add	sp, #52	; 0x34
 80041ac:	ecbd 8b02 	vpop	{d8}
 80041b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	4640      	mov	r0, r8
 80041ba:	4649      	mov	r1, r9
 80041bc:	f7fc fcb6 	bl	8000b2c <__aeabi_dcmpun>
 80041c0:	b140      	cbz	r0, 80041d4 <_printf_float+0xf0>
 80041c2:	464b      	mov	r3, r9
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bfbc      	itt	lt
 80041c8:	232d      	movlt	r3, #45	; 0x2d
 80041ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041ce:	487f      	ldr	r0, [pc, #508]	; (80043cc <_printf_float+0x2e8>)
 80041d0:	4b7f      	ldr	r3, [pc, #508]	; (80043d0 <_printf_float+0x2ec>)
 80041d2:	e7d1      	b.n	8004178 <_printf_float+0x94>
 80041d4:	6863      	ldr	r3, [r4, #4]
 80041d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041da:	9206      	str	r2, [sp, #24]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	d13f      	bne.n	8004260 <_printf_float+0x17c>
 80041e0:	2306      	movs	r3, #6
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	9b05      	ldr	r3, [sp, #20]
 80041e6:	6861      	ldr	r1, [r4, #4]
 80041e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041ec:	2300      	movs	r3, #0
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	ab0a      	add	r3, sp, #40	; 0x28
 80041f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041f6:	ab09      	add	r3, sp, #36	; 0x24
 80041f8:	ec49 8b10 	vmov	d0, r8, r9
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004204:	4628      	mov	r0, r5
 8004206:	f7ff fecd 	bl	8003fa4 <__cvt>
 800420a:	9b06      	ldr	r3, [sp, #24]
 800420c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800420e:	2b47      	cmp	r3, #71	; 0x47
 8004210:	4680      	mov	r8, r0
 8004212:	d108      	bne.n	8004226 <_printf_float+0x142>
 8004214:	1cc8      	adds	r0, r1, #3
 8004216:	db02      	blt.n	800421e <_printf_float+0x13a>
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	4299      	cmp	r1, r3
 800421c:	dd41      	ble.n	80042a2 <_printf_float+0x1be>
 800421e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004222:	fa5f fb8b 	uxtb.w	fp, fp
 8004226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800422a:	d820      	bhi.n	800426e <_printf_float+0x18a>
 800422c:	3901      	subs	r1, #1
 800422e:	465a      	mov	r2, fp
 8004230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004234:	9109      	str	r1, [sp, #36]	; 0x24
 8004236:	f7ff ff17 	bl	8004068 <__exponent>
 800423a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800423c:	1813      	adds	r3, r2, r0
 800423e:	2a01      	cmp	r2, #1
 8004240:	4681      	mov	r9, r0
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	dc02      	bgt.n	800424c <_printf_float+0x168>
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	07d2      	lsls	r2, r2, #31
 800424a:	d501      	bpl.n	8004250 <_printf_float+0x16c>
 800424c:	3301      	adds	r3, #1
 800424e:	6123      	str	r3, [r4, #16]
 8004250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004254:	2b00      	cmp	r3, #0
 8004256:	d09c      	beq.n	8004192 <_printf_float+0xae>
 8004258:	232d      	movs	r3, #45	; 0x2d
 800425a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425e:	e798      	b.n	8004192 <_printf_float+0xae>
 8004260:	9a06      	ldr	r2, [sp, #24]
 8004262:	2a47      	cmp	r2, #71	; 0x47
 8004264:	d1be      	bne.n	80041e4 <_printf_float+0x100>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1bc      	bne.n	80041e4 <_printf_float+0x100>
 800426a:	2301      	movs	r3, #1
 800426c:	e7b9      	b.n	80041e2 <_printf_float+0xfe>
 800426e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004272:	d118      	bne.n	80042a6 <_printf_float+0x1c2>
 8004274:	2900      	cmp	r1, #0
 8004276:	6863      	ldr	r3, [r4, #4]
 8004278:	dd0b      	ble.n	8004292 <_printf_float+0x1ae>
 800427a:	6121      	str	r1, [r4, #16]
 800427c:	b913      	cbnz	r3, 8004284 <_printf_float+0x1a0>
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	07d0      	lsls	r0, r2, #31
 8004282:	d502      	bpl.n	800428a <_printf_float+0x1a6>
 8004284:	3301      	adds	r3, #1
 8004286:	440b      	add	r3, r1
 8004288:	6123      	str	r3, [r4, #16]
 800428a:	65a1      	str	r1, [r4, #88]	; 0x58
 800428c:	f04f 0900 	mov.w	r9, #0
 8004290:	e7de      	b.n	8004250 <_printf_float+0x16c>
 8004292:	b913      	cbnz	r3, 800429a <_printf_float+0x1b6>
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	07d2      	lsls	r2, r2, #31
 8004298:	d501      	bpl.n	800429e <_printf_float+0x1ba>
 800429a:	3302      	adds	r3, #2
 800429c:	e7f4      	b.n	8004288 <_printf_float+0x1a4>
 800429e:	2301      	movs	r3, #1
 80042a0:	e7f2      	b.n	8004288 <_printf_float+0x1a4>
 80042a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80042a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a8:	4299      	cmp	r1, r3
 80042aa:	db05      	blt.n	80042b8 <_printf_float+0x1d4>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	6121      	str	r1, [r4, #16]
 80042b0:	07d8      	lsls	r0, r3, #31
 80042b2:	d5ea      	bpl.n	800428a <_printf_float+0x1a6>
 80042b4:	1c4b      	adds	r3, r1, #1
 80042b6:	e7e7      	b.n	8004288 <_printf_float+0x1a4>
 80042b8:	2900      	cmp	r1, #0
 80042ba:	bfd4      	ite	le
 80042bc:	f1c1 0202 	rsble	r2, r1, #2
 80042c0:	2201      	movgt	r2, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	e7e0      	b.n	8004288 <_printf_float+0x1a4>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	055a      	lsls	r2, r3, #21
 80042ca:	d407      	bmi.n	80042dc <_printf_float+0x1f8>
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	4642      	mov	r2, r8
 80042d0:	4631      	mov	r1, r6
 80042d2:	4628      	mov	r0, r5
 80042d4:	47b8      	blx	r7
 80042d6:	3001      	adds	r0, #1
 80042d8:	d12c      	bne.n	8004334 <_printf_float+0x250>
 80042da:	e764      	b.n	80041a6 <_printf_float+0xc2>
 80042dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042e0:	f240 80e0 	bls.w	80044a4 <_printf_float+0x3c0>
 80042e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	f7fc fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d034      	beq.n	800435e <_printf_float+0x27a>
 80042f4:	4a37      	ldr	r2, [pc, #220]	; (80043d4 <_printf_float+0x2f0>)
 80042f6:	2301      	movs	r3, #1
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b8      	blx	r7
 80042fe:	3001      	adds	r0, #1
 8004300:	f43f af51 	beq.w	80041a6 <_printf_float+0xc2>
 8004304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004308:	429a      	cmp	r2, r3
 800430a:	db02      	blt.n	8004312 <_printf_float+0x22e>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	07d8      	lsls	r0, r3, #31
 8004310:	d510      	bpl.n	8004334 <_printf_float+0x250>
 8004312:	ee18 3a10 	vmov	r3, s16
 8004316:	4652      	mov	r2, sl
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f af41 	beq.w	80041a6 <_printf_float+0xc2>
 8004324:	f04f 0800 	mov.w	r8, #0
 8004328:	f104 091a 	add.w	r9, r4, #26
 800432c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	4543      	cmp	r3, r8
 8004332:	dc09      	bgt.n	8004348 <_printf_float+0x264>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	079b      	lsls	r3, r3, #30
 8004338:	f100 8105 	bmi.w	8004546 <_printf_float+0x462>
 800433c:	68e0      	ldr	r0, [r4, #12]
 800433e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004340:	4298      	cmp	r0, r3
 8004342:	bfb8      	it	lt
 8004344:	4618      	movlt	r0, r3
 8004346:	e730      	b.n	80041aa <_printf_float+0xc6>
 8004348:	2301      	movs	r3, #1
 800434a:	464a      	mov	r2, r9
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f af27 	beq.w	80041a6 <_printf_float+0xc2>
 8004358:	f108 0801 	add.w	r8, r8, #1
 800435c:	e7e6      	b.n	800432c <_printf_float+0x248>
 800435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	dc39      	bgt.n	80043d8 <_printf_float+0x2f4>
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <_printf_float+0x2f0>)
 8004366:	2301      	movs	r3, #1
 8004368:	4631      	mov	r1, r6
 800436a:	4628      	mov	r0, r5
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	f43f af19 	beq.w	80041a6 <_printf_float+0xc2>
 8004374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004378:	4313      	orrs	r3, r2
 800437a:	d102      	bne.n	8004382 <_printf_float+0x29e>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07d9      	lsls	r1, r3, #31
 8004380:	d5d8      	bpl.n	8004334 <_printf_float+0x250>
 8004382:	ee18 3a10 	vmov	r3, s16
 8004386:	4652      	mov	r2, sl
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	f43f af09 	beq.w	80041a6 <_printf_float+0xc2>
 8004394:	f04f 0900 	mov.w	r9, #0
 8004398:	f104 0a1a 	add.w	sl, r4, #26
 800439c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439e:	425b      	negs	r3, r3
 80043a0:	454b      	cmp	r3, r9
 80043a2:	dc01      	bgt.n	80043a8 <_printf_float+0x2c4>
 80043a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a6:	e792      	b.n	80042ce <_printf_float+0x1ea>
 80043a8:	2301      	movs	r3, #1
 80043aa:	4652      	mov	r2, sl
 80043ac:	4631      	mov	r1, r6
 80043ae:	4628      	mov	r0, r5
 80043b0:	47b8      	blx	r7
 80043b2:	3001      	adds	r0, #1
 80043b4:	f43f aef7 	beq.w	80041a6 <_printf_float+0xc2>
 80043b8:	f109 0901 	add.w	r9, r9, #1
 80043bc:	e7ee      	b.n	800439c <_printf_float+0x2b8>
 80043be:	bf00      	nop
 80043c0:	7fefffff 	.word	0x7fefffff
 80043c4:	08007ad4 	.word	0x08007ad4
 80043c8:	08007ad8 	.word	0x08007ad8
 80043cc:	08007ae0 	.word	0x08007ae0
 80043d0:	08007adc 	.word	0x08007adc
 80043d4:	08007ae4 	.word	0x08007ae4
 80043d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043dc:	429a      	cmp	r2, r3
 80043de:	bfa8      	it	ge
 80043e0:	461a      	movge	r2, r3
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	4691      	mov	r9, r2
 80043e6:	dc37      	bgt.n	8004458 <_printf_float+0x374>
 80043e8:	f04f 0b00 	mov.w	fp, #0
 80043ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043f0:	f104 021a 	add.w	r2, r4, #26
 80043f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043f6:	9305      	str	r3, [sp, #20]
 80043f8:	eba3 0309 	sub.w	r3, r3, r9
 80043fc:	455b      	cmp	r3, fp
 80043fe:	dc33      	bgt.n	8004468 <_printf_float+0x384>
 8004400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004404:	429a      	cmp	r2, r3
 8004406:	db3b      	blt.n	8004480 <_printf_float+0x39c>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	07da      	lsls	r2, r3, #31
 800440c:	d438      	bmi.n	8004480 <_printf_float+0x39c>
 800440e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004410:	9a05      	ldr	r2, [sp, #20]
 8004412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004414:	1a9a      	subs	r2, r3, r2
 8004416:	eba3 0901 	sub.w	r9, r3, r1
 800441a:	4591      	cmp	r9, r2
 800441c:	bfa8      	it	ge
 800441e:	4691      	movge	r9, r2
 8004420:	f1b9 0f00 	cmp.w	r9, #0
 8004424:	dc35      	bgt.n	8004492 <_printf_float+0x3ae>
 8004426:	f04f 0800 	mov.w	r8, #0
 800442a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800442e:	f104 0a1a 	add.w	sl, r4, #26
 8004432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	eba3 0309 	sub.w	r3, r3, r9
 800443c:	4543      	cmp	r3, r8
 800443e:	f77f af79 	ble.w	8004334 <_printf_float+0x250>
 8004442:	2301      	movs	r3, #1
 8004444:	4652      	mov	r2, sl
 8004446:	4631      	mov	r1, r6
 8004448:	4628      	mov	r0, r5
 800444a:	47b8      	blx	r7
 800444c:	3001      	adds	r0, #1
 800444e:	f43f aeaa 	beq.w	80041a6 <_printf_float+0xc2>
 8004452:	f108 0801 	add.w	r8, r8, #1
 8004456:	e7ec      	b.n	8004432 <_printf_float+0x34e>
 8004458:	4613      	mov	r3, r2
 800445a:	4631      	mov	r1, r6
 800445c:	4642      	mov	r2, r8
 800445e:	4628      	mov	r0, r5
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	d1c0      	bne.n	80043e8 <_printf_float+0x304>
 8004466:	e69e      	b.n	80041a6 <_printf_float+0xc2>
 8004468:	2301      	movs	r3, #1
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	9205      	str	r2, [sp, #20]
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	f43f ae97 	beq.w	80041a6 <_printf_float+0xc2>
 8004478:	9a05      	ldr	r2, [sp, #20]
 800447a:	f10b 0b01 	add.w	fp, fp, #1
 800447e:	e7b9      	b.n	80043f4 <_printf_float+0x310>
 8004480:	ee18 3a10 	vmov	r3, s16
 8004484:	4652      	mov	r2, sl
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	d1be      	bne.n	800440e <_printf_float+0x32a>
 8004490:	e689      	b.n	80041a6 <_printf_float+0xc2>
 8004492:	9a05      	ldr	r2, [sp, #20]
 8004494:	464b      	mov	r3, r9
 8004496:	4442      	add	r2, r8
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	d1c1      	bne.n	8004426 <_printf_float+0x342>
 80044a2:	e680      	b.n	80041a6 <_printf_float+0xc2>
 80044a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044a6:	2a01      	cmp	r2, #1
 80044a8:	dc01      	bgt.n	80044ae <_printf_float+0x3ca>
 80044aa:	07db      	lsls	r3, r3, #31
 80044ac:	d538      	bpl.n	8004520 <_printf_float+0x43c>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4642      	mov	r2, r8
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b8      	blx	r7
 80044b8:	3001      	adds	r0, #1
 80044ba:	f43f ae74 	beq.w	80041a6 <_printf_float+0xc2>
 80044be:	ee18 3a10 	vmov	r3, s16
 80044c2:	4652      	mov	r2, sl
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f ae6b 	beq.w	80041a6 <_printf_float+0xc2>
 80044d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	f7fc faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80044dc:	b9d8      	cbnz	r0, 8004516 <_printf_float+0x432>
 80044de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044e0:	f108 0201 	add.w	r2, r8, #1
 80044e4:	3b01      	subs	r3, #1
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	d10e      	bne.n	800450e <_printf_float+0x42a>
 80044f0:	e659      	b.n	80041a6 <_printf_float+0xc2>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4652      	mov	r2, sl
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae52 	beq.w	80041a6 <_printf_float+0xc2>
 8004502:	f108 0801 	add.w	r8, r8, #1
 8004506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	4543      	cmp	r3, r8
 800450c:	dcf1      	bgt.n	80044f2 <_printf_float+0x40e>
 800450e:	464b      	mov	r3, r9
 8004510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004514:	e6dc      	b.n	80042d0 <_printf_float+0x1ec>
 8004516:	f04f 0800 	mov.w	r8, #0
 800451a:	f104 0a1a 	add.w	sl, r4, #26
 800451e:	e7f2      	b.n	8004506 <_printf_float+0x422>
 8004520:	2301      	movs	r3, #1
 8004522:	4642      	mov	r2, r8
 8004524:	e7df      	b.n	80044e6 <_printf_float+0x402>
 8004526:	2301      	movs	r3, #1
 8004528:	464a      	mov	r2, r9
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	f43f ae38 	beq.w	80041a6 <_printf_float+0xc2>
 8004536:	f108 0801 	add.w	r8, r8, #1
 800453a:	68e3      	ldr	r3, [r4, #12]
 800453c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800453e:	1a5b      	subs	r3, r3, r1
 8004540:	4543      	cmp	r3, r8
 8004542:	dcf0      	bgt.n	8004526 <_printf_float+0x442>
 8004544:	e6fa      	b.n	800433c <_printf_float+0x258>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	f104 0919 	add.w	r9, r4, #25
 800454e:	e7f4      	b.n	800453a <_printf_float+0x456>

08004550 <_printf_common>:
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	4699      	mov	r9, r3
 8004558:	688a      	ldr	r2, [r1, #8]
 800455a:	690b      	ldr	r3, [r1, #16]
 800455c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004560:	4293      	cmp	r3, r2
 8004562:	bfb8      	it	lt
 8004564:	4613      	movlt	r3, r2
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800456c:	4607      	mov	r7, r0
 800456e:	460c      	mov	r4, r1
 8004570:	b10a      	cbz	r2, 8004576 <_printf_common+0x26>
 8004572:	3301      	adds	r3, #1
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	0699      	lsls	r1, r3, #26
 800457a:	bf42      	ittt	mi
 800457c:	6833      	ldrmi	r3, [r6, #0]
 800457e:	3302      	addmi	r3, #2
 8004580:	6033      	strmi	r3, [r6, #0]
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f015 0506 	ands.w	r5, r5, #6
 8004588:	d106      	bne.n	8004598 <_printf_common+0x48>
 800458a:	f104 0a19 	add.w	sl, r4, #25
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dc26      	bgt.n	80045e6 <_printf_common+0x96>
 8004598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800459c:	1e13      	subs	r3, r2, #0
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d42b      	bmi.n	8004600 <_printf_common+0xb0>
 80045a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ac:	4649      	mov	r1, r9
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c0      	blx	r8
 80045b2:	3001      	adds	r0, #1
 80045b4:	d01e      	beq.n	80045f4 <_printf_common+0xa4>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	68e5      	ldr	r5, [r4, #12]
 80045ba:	6832      	ldr	r2, [r6, #0]
 80045bc:	f003 0306 	and.w	r3, r3, #6
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	bf08      	it	eq
 80045c4:	1aad      	subeq	r5, r5, r2
 80045c6:	68a3      	ldr	r3, [r4, #8]
 80045c8:	6922      	ldr	r2, [r4, #16]
 80045ca:	bf0c      	ite	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	2500      	movne	r5, #0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bfc4      	itt	gt
 80045d6:	1a9b      	subgt	r3, r3, r2
 80045d8:	18ed      	addgt	r5, r5, r3
 80045da:	2600      	movs	r6, #0
 80045dc:	341a      	adds	r4, #26
 80045de:	42b5      	cmp	r5, r6
 80045e0:	d11a      	bne.n	8004618 <_printf_common+0xc8>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e008      	b.n	80045f8 <_printf_common+0xa8>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4649      	mov	r1, r9
 80045ec:	4638      	mov	r0, r7
 80045ee:	47c0      	blx	r8
 80045f0:	3001      	adds	r0, #1
 80045f2:	d103      	bne.n	80045fc <_printf_common+0xac>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7c6      	b.n	800458e <_printf_common+0x3e>
 8004600:	18e1      	adds	r1, r4, r3
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	2030      	movs	r0, #48	; 0x30
 8004606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460a:	4422      	add	r2, r4
 800460c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004614:	3302      	adds	r3, #2
 8004616:	e7c7      	b.n	80045a8 <_printf_common+0x58>
 8004618:	2301      	movs	r3, #1
 800461a:	4622      	mov	r2, r4
 800461c:	4649      	mov	r1, r9
 800461e:	4638      	mov	r0, r7
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d0e6      	beq.n	80045f4 <_printf_common+0xa4>
 8004626:	3601      	adds	r6, #1
 8004628:	e7d9      	b.n	80045de <_printf_common+0x8e>
	...

0800462c <_printf_i>:
 800462c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	7e0f      	ldrb	r7, [r1, #24]
 8004632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004634:	2f78      	cmp	r7, #120	; 0x78
 8004636:	4691      	mov	r9, r2
 8004638:	4680      	mov	r8, r0
 800463a:	460c      	mov	r4, r1
 800463c:	469a      	mov	sl, r3
 800463e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004642:	d807      	bhi.n	8004654 <_printf_i+0x28>
 8004644:	2f62      	cmp	r7, #98	; 0x62
 8004646:	d80a      	bhi.n	800465e <_printf_i+0x32>
 8004648:	2f00      	cmp	r7, #0
 800464a:	f000 80d8 	beq.w	80047fe <_printf_i+0x1d2>
 800464e:	2f58      	cmp	r7, #88	; 0x58
 8004650:	f000 80a3 	beq.w	800479a <_printf_i+0x16e>
 8004654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800465c:	e03a      	b.n	80046d4 <_printf_i+0xa8>
 800465e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004662:	2b15      	cmp	r3, #21
 8004664:	d8f6      	bhi.n	8004654 <_printf_i+0x28>
 8004666:	a101      	add	r1, pc, #4	; (adr r1, 800466c <_printf_i+0x40>)
 8004668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046d9 	.word	0x080046d9
 8004674:	08004655 	.word	0x08004655
 8004678:	08004655 	.word	0x08004655
 800467c:	08004655 	.word	0x08004655
 8004680:	08004655 	.word	0x08004655
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004655 	.word	0x08004655
 800468c:	08004655 	.word	0x08004655
 8004690:	08004655 	.word	0x08004655
 8004694:	08004655 	.word	0x08004655
 8004698:	080047e5 	.word	0x080047e5
 800469c:	08004709 	.word	0x08004709
 80046a0:	080047c7 	.word	0x080047c7
 80046a4:	08004655 	.word	0x08004655
 80046a8:	08004655 	.word	0x08004655
 80046ac:	08004807 	.word	0x08004807
 80046b0:	08004655 	.word	0x08004655
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004655 	.word	0x08004655
 80046bc:	08004655 	.word	0x08004655
 80046c0:	080047cf 	.word	0x080047cf
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	1d1a      	adds	r2, r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	602a      	str	r2, [r5, #0]
 80046cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0a3      	b.n	8004820 <_printf_i+0x1f4>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	6829      	ldr	r1, [r5, #0]
 80046dc:	0606      	lsls	r6, r0, #24
 80046de:	f101 0304 	add.w	r3, r1, #4
 80046e2:	d50a      	bpl.n	80046fa <_printf_i+0xce>
 80046e4:	680e      	ldr	r6, [r1, #0]
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	2e00      	cmp	r6, #0
 80046ea:	da03      	bge.n	80046f4 <_printf_i+0xc8>
 80046ec:	232d      	movs	r3, #45	; 0x2d
 80046ee:	4276      	negs	r6, r6
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f4:	485e      	ldr	r0, [pc, #376]	; (8004870 <_printf_i+0x244>)
 80046f6:	230a      	movs	r3, #10
 80046f8:	e019      	b.n	800472e <_printf_i+0x102>
 80046fa:	680e      	ldr	r6, [r1, #0]
 80046fc:	602b      	str	r3, [r5, #0]
 80046fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004702:	bf18      	it	ne
 8004704:	b236      	sxthne	r6, r6
 8004706:	e7ef      	b.n	80046e8 <_printf_i+0xbc>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	1d19      	adds	r1, r3, #4
 800470e:	6029      	str	r1, [r5, #0]
 8004710:	0601      	lsls	r1, r0, #24
 8004712:	d501      	bpl.n	8004718 <_printf_i+0xec>
 8004714:	681e      	ldr	r6, [r3, #0]
 8004716:	e002      	b.n	800471e <_printf_i+0xf2>
 8004718:	0646      	lsls	r6, r0, #25
 800471a:	d5fb      	bpl.n	8004714 <_printf_i+0xe8>
 800471c:	881e      	ldrh	r6, [r3, #0]
 800471e:	4854      	ldr	r0, [pc, #336]	; (8004870 <_printf_i+0x244>)
 8004720:	2f6f      	cmp	r7, #111	; 0x6f
 8004722:	bf0c      	ite	eq
 8004724:	2308      	moveq	r3, #8
 8004726:	230a      	movne	r3, #10
 8004728:	2100      	movs	r1, #0
 800472a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800472e:	6865      	ldr	r5, [r4, #4]
 8004730:	60a5      	str	r5, [r4, #8]
 8004732:	2d00      	cmp	r5, #0
 8004734:	bfa2      	ittt	ge
 8004736:	6821      	ldrge	r1, [r4, #0]
 8004738:	f021 0104 	bicge.w	r1, r1, #4
 800473c:	6021      	strge	r1, [r4, #0]
 800473e:	b90e      	cbnz	r6, 8004744 <_printf_i+0x118>
 8004740:	2d00      	cmp	r5, #0
 8004742:	d04d      	beq.n	80047e0 <_printf_i+0x1b4>
 8004744:	4615      	mov	r5, r2
 8004746:	fbb6 f1f3 	udiv	r1, r6, r3
 800474a:	fb03 6711 	mls	r7, r3, r1, r6
 800474e:	5dc7      	ldrb	r7, [r0, r7]
 8004750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004754:	4637      	mov	r7, r6
 8004756:	42bb      	cmp	r3, r7
 8004758:	460e      	mov	r6, r1
 800475a:	d9f4      	bls.n	8004746 <_printf_i+0x11a>
 800475c:	2b08      	cmp	r3, #8
 800475e:	d10b      	bne.n	8004778 <_printf_i+0x14c>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	07de      	lsls	r6, r3, #31
 8004764:	d508      	bpl.n	8004778 <_printf_i+0x14c>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	6861      	ldr	r1, [r4, #4]
 800476a:	4299      	cmp	r1, r3
 800476c:	bfde      	ittt	le
 800476e:	2330      	movle	r3, #48	; 0x30
 8004770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004774:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004778:	1b52      	subs	r2, r2, r5
 800477a:	6122      	str	r2, [r4, #16]
 800477c:	f8cd a000 	str.w	sl, [sp]
 8004780:	464b      	mov	r3, r9
 8004782:	aa03      	add	r2, sp, #12
 8004784:	4621      	mov	r1, r4
 8004786:	4640      	mov	r0, r8
 8004788:	f7ff fee2 	bl	8004550 <_printf_common>
 800478c:	3001      	adds	r0, #1
 800478e:	d14c      	bne.n	800482a <_printf_i+0x1fe>
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	b004      	add	sp, #16
 8004796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479a:	4835      	ldr	r0, [pc, #212]	; (8004870 <_printf_i+0x244>)
 800479c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047a8:	6029      	str	r1, [r5, #0]
 80047aa:	061d      	lsls	r5, r3, #24
 80047ac:	d514      	bpl.n	80047d8 <_printf_i+0x1ac>
 80047ae:	07df      	lsls	r7, r3, #31
 80047b0:	bf44      	itt	mi
 80047b2:	f043 0320 	orrmi.w	r3, r3, #32
 80047b6:	6023      	strmi	r3, [r4, #0]
 80047b8:	b91e      	cbnz	r6, 80047c2 <_printf_i+0x196>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f023 0320 	bic.w	r3, r3, #32
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	2310      	movs	r3, #16
 80047c4:	e7b0      	b.n	8004728 <_printf_i+0xfc>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f043 0320 	orr.w	r3, r3, #32
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	2378      	movs	r3, #120	; 0x78
 80047d0:	4828      	ldr	r0, [pc, #160]	; (8004874 <_printf_i+0x248>)
 80047d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047d6:	e7e3      	b.n	80047a0 <_printf_i+0x174>
 80047d8:	0659      	lsls	r1, r3, #25
 80047da:	bf48      	it	mi
 80047dc:	b2b6      	uxthmi	r6, r6
 80047de:	e7e6      	b.n	80047ae <_printf_i+0x182>
 80047e0:	4615      	mov	r5, r2
 80047e2:	e7bb      	b.n	800475c <_printf_i+0x130>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	6826      	ldr	r6, [r4, #0]
 80047e8:	6961      	ldr	r1, [r4, #20]
 80047ea:	1d18      	adds	r0, r3, #4
 80047ec:	6028      	str	r0, [r5, #0]
 80047ee:	0635      	lsls	r5, r6, #24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0x1cc>
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0x1d2>
 80047f8:	0670      	lsls	r0, r6, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0x1c8>
 80047fc:	8019      	strh	r1, [r3, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	4615      	mov	r5, r2
 8004804:	e7ba      	b.n	800477c <_printf_i+0x150>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	602a      	str	r2, [r5, #0]
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	6862      	ldr	r2, [r4, #4]
 8004810:	2100      	movs	r1, #0
 8004812:	4628      	mov	r0, r5
 8004814:	f7fb fce4 	bl	80001e0 <memchr>
 8004818:	b108      	cbz	r0, 800481e <_printf_i+0x1f2>
 800481a:	1b40      	subs	r0, r0, r5
 800481c:	6060      	str	r0, [r4, #4]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	2300      	movs	r3, #0
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	e7a8      	b.n	800477c <_printf_i+0x150>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	462a      	mov	r2, r5
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d0ab      	beq.n	8004790 <_printf_i+0x164>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	079b      	lsls	r3, r3, #30
 800483c:	d413      	bmi.n	8004866 <_printf_i+0x23a>
 800483e:	68e0      	ldr	r0, [r4, #12]
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	4298      	cmp	r0, r3
 8004844:	bfb8      	it	lt
 8004846:	4618      	movlt	r0, r3
 8004848:	e7a4      	b.n	8004794 <_printf_i+0x168>
 800484a:	2301      	movs	r3, #1
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d09b      	beq.n	8004790 <_printf_i+0x164>
 8004858:	3501      	adds	r5, #1
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	9903      	ldr	r1, [sp, #12]
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	42ab      	cmp	r3, r5
 8004862:	dcf2      	bgt.n	800484a <_printf_i+0x21e>
 8004864:	e7eb      	b.n	800483e <_printf_i+0x212>
 8004866:	2500      	movs	r5, #0
 8004868:	f104 0619 	add.w	r6, r4, #25
 800486c:	e7f5      	b.n	800485a <_printf_i+0x22e>
 800486e:	bf00      	nop
 8004870:	08007ae6 	.word	0x08007ae6
 8004874:	08007af7 	.word	0x08007af7

08004878 <iprintf>:
 8004878:	b40f      	push	{r0, r1, r2, r3}
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <iprintf+0x2c>)
 800487c:	b513      	push	{r0, r1, r4, lr}
 800487e:	681c      	ldr	r4, [r3, #0]
 8004880:	b124      	cbz	r4, 800488c <iprintf+0x14>
 8004882:	69a3      	ldr	r3, [r4, #24]
 8004884:	b913      	cbnz	r3, 800488c <iprintf+0x14>
 8004886:	4620      	mov	r0, r4
 8004888:	f000 fee0 	bl	800564c <__sinit>
 800488c:	ab05      	add	r3, sp, #20
 800488e:	9a04      	ldr	r2, [sp, #16]
 8004890:	68a1      	ldr	r1, [r4, #8]
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	4620      	mov	r0, r4
 8004896:	f001 fc39 	bl	800610c <_vfiprintf_r>
 800489a:	b002      	add	sp, #8
 800489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a0:	b004      	add	sp, #16
 80048a2:	4770      	bx	lr
 80048a4:	20000044 	.word	0x20000044

080048a8 <quorem>:
 80048a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	6903      	ldr	r3, [r0, #16]
 80048ae:	690c      	ldr	r4, [r1, #16]
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	4607      	mov	r7, r0
 80048b4:	f2c0 8081 	blt.w	80049ba <quorem+0x112>
 80048b8:	3c01      	subs	r4, #1
 80048ba:	f101 0814 	add.w	r8, r1, #20
 80048be:	f100 0514 	add.w	r5, r0, #20
 80048c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048d0:	3301      	adds	r3, #1
 80048d2:	429a      	cmp	r2, r3
 80048d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80048e0:	d331      	bcc.n	8004946 <quorem+0x9e>
 80048e2:	f04f 0e00 	mov.w	lr, #0
 80048e6:	4640      	mov	r0, r8
 80048e8:	46ac      	mov	ip, r5
 80048ea:	46f2      	mov	sl, lr
 80048ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80048f0:	b293      	uxth	r3, r2
 80048f2:	fb06 e303 	mla	r3, r6, r3, lr
 80048f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	ebaa 0303 	sub.w	r3, sl, r3
 8004900:	f8dc a000 	ldr.w	sl, [ip]
 8004904:	0c12      	lsrs	r2, r2, #16
 8004906:	fa13 f38a 	uxtah	r3, r3, sl
 800490a:	fb06 e202 	mla	r2, r6, r2, lr
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	9b00      	ldr	r3, [sp, #0]
 8004912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004916:	b292      	uxth	r2, r2
 8004918:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800491c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004920:	f8bd 3000 	ldrh.w	r3, [sp]
 8004924:	4581      	cmp	r9, r0
 8004926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800492a:	f84c 3b04 	str.w	r3, [ip], #4
 800492e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004932:	d2db      	bcs.n	80048ec <quorem+0x44>
 8004934:	f855 300b 	ldr.w	r3, [r5, fp]
 8004938:	b92b      	cbnz	r3, 8004946 <quorem+0x9e>
 800493a:	9b01      	ldr	r3, [sp, #4]
 800493c:	3b04      	subs	r3, #4
 800493e:	429d      	cmp	r5, r3
 8004940:	461a      	mov	r2, r3
 8004942:	d32e      	bcc.n	80049a2 <quorem+0xfa>
 8004944:	613c      	str	r4, [r7, #16]
 8004946:	4638      	mov	r0, r7
 8004948:	f001 f9be 	bl	8005cc8 <__mcmp>
 800494c:	2800      	cmp	r0, #0
 800494e:	db24      	blt.n	800499a <quorem+0xf2>
 8004950:	3601      	adds	r6, #1
 8004952:	4628      	mov	r0, r5
 8004954:	f04f 0c00 	mov.w	ip, #0
 8004958:	f858 2b04 	ldr.w	r2, [r8], #4
 800495c:	f8d0 e000 	ldr.w	lr, [r0]
 8004960:	b293      	uxth	r3, r2
 8004962:	ebac 0303 	sub.w	r3, ip, r3
 8004966:	0c12      	lsrs	r2, r2, #16
 8004968:	fa13 f38e 	uxtah	r3, r3, lr
 800496c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800497a:	45c1      	cmp	r9, r8
 800497c:	f840 3b04 	str.w	r3, [r0], #4
 8004980:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004984:	d2e8      	bcs.n	8004958 <quorem+0xb0>
 8004986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800498a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800498e:	b922      	cbnz	r2, 800499a <quorem+0xf2>
 8004990:	3b04      	subs	r3, #4
 8004992:	429d      	cmp	r5, r3
 8004994:	461a      	mov	r2, r3
 8004996:	d30a      	bcc.n	80049ae <quorem+0x106>
 8004998:	613c      	str	r4, [r7, #16]
 800499a:	4630      	mov	r0, r6
 800499c:	b003      	add	sp, #12
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	d1cc      	bne.n	8004944 <quorem+0x9c>
 80049aa:	3c01      	subs	r4, #1
 80049ac:	e7c7      	b.n	800493e <quorem+0x96>
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d1f0      	bne.n	8004998 <quorem+0xf0>
 80049b6:	3c01      	subs	r4, #1
 80049b8:	e7eb      	b.n	8004992 <quorem+0xea>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e7ee      	b.n	800499c <quorem+0xf4>
	...

080049c0 <_dtoa_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	ed2d 8b04 	vpush	{d8-d9}
 80049c8:	ec57 6b10 	vmov	r6, r7, d0
 80049cc:	b093      	sub	sp, #76	; 0x4c
 80049ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049d4:	9106      	str	r1, [sp, #24]
 80049d6:	ee10 aa10 	vmov	sl, s0
 80049da:	4604      	mov	r4, r0
 80049dc:	9209      	str	r2, [sp, #36]	; 0x24
 80049de:	930c      	str	r3, [sp, #48]	; 0x30
 80049e0:	46bb      	mov	fp, r7
 80049e2:	b975      	cbnz	r5, 8004a02 <_dtoa_r+0x42>
 80049e4:	2010      	movs	r0, #16
 80049e6:	f000 fed7 	bl	8005798 <malloc>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6260      	str	r0, [r4, #36]	; 0x24
 80049ee:	b920      	cbnz	r0, 80049fa <_dtoa_r+0x3a>
 80049f0:	4ba7      	ldr	r3, [pc, #668]	; (8004c90 <_dtoa_r+0x2d0>)
 80049f2:	21ea      	movs	r1, #234	; 0xea
 80049f4:	48a7      	ldr	r0, [pc, #668]	; (8004c94 <_dtoa_r+0x2d4>)
 80049f6:	f001 fddf 	bl	80065b8 <__assert_func>
 80049fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049fe:	6005      	str	r5, [r0, #0]
 8004a00:	60c5      	str	r5, [r0, #12]
 8004a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	b151      	cbz	r1, 8004a1e <_dtoa_r+0x5e>
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	604a      	str	r2, [r1, #4]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4093      	lsls	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 ff16 	bl	8005844 <_Bfree>
 8004a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	1e3b      	subs	r3, r7, #0
 8004a20:	bfaa      	itet	ge
 8004a22:	2300      	movge	r3, #0
 8004a24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004a28:	f8c8 3000 	strge.w	r3, [r8]
 8004a2c:	4b9a      	ldr	r3, [pc, #616]	; (8004c98 <_dtoa_r+0x2d8>)
 8004a2e:	bfbc      	itt	lt
 8004a30:	2201      	movlt	r2, #1
 8004a32:	f8c8 2000 	strlt.w	r2, [r8]
 8004a36:	ea33 030b 	bics.w	r3, r3, fp
 8004a3a:	d11b      	bne.n	8004a74 <_dtoa_r+0xb4>
 8004a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a48:	4333      	orrs	r3, r6
 8004a4a:	f000 8592 	beq.w	8005572 <_dtoa_r+0xbb2>
 8004a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a50:	b963      	cbnz	r3, 8004a6c <_dtoa_r+0xac>
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <_dtoa_r+0x2dc>)
 8004a54:	e022      	b.n	8004a9c <_dtoa_r+0xdc>
 8004a56:	4b92      	ldr	r3, [pc, #584]	; (8004ca0 <_dtoa_r+0x2e0>)
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	9801      	ldr	r0, [sp, #4]
 8004a62:	b013      	add	sp, #76	; 0x4c
 8004a64:	ecbd 8b04 	vpop	{d8-d9}
 8004a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6c:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <_dtoa_r+0x2dc>)
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	3303      	adds	r3, #3
 8004a72:	e7f3      	b.n	8004a5c <_dtoa_r+0x9c>
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	f7fc f824 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a80:	ec4b ab19 	vmov	d9, sl, fp
 8004a84:	4680      	mov	r8, r0
 8004a86:	b158      	cbz	r0, 8004aa0 <_dtoa_r+0xe0>
 8004a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 856b 	beq.w	800556c <_dtoa_r+0xbac>
 8004a96:	4883      	ldr	r0, [pc, #524]	; (8004ca4 <_dtoa_r+0x2e4>)
 8004a98:	6018      	str	r0, [r3, #0]
 8004a9a:	1e43      	subs	r3, r0, #1
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	e7df      	b.n	8004a60 <_dtoa_r+0xa0>
 8004aa0:	ec4b ab10 	vmov	d0, sl, fp
 8004aa4:	aa10      	add	r2, sp, #64	; 0x40
 8004aa6:	a911      	add	r1, sp, #68	; 0x44
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f001 f9b3 	bl	8005e14 <__d2b>
 8004aae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004ab2:	ee08 0a10 	vmov	s16, r0
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	f000 8084 	beq.w	8004bc4 <_dtoa_r+0x204>
 8004abc:	ee19 3a90 	vmov	r3, s19
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004ac8:	4656      	mov	r6, sl
 8004aca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004ace:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ad2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004ad6:	4b74      	ldr	r3, [pc, #464]	; (8004ca8 <_dtoa_r+0x2e8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fbd3 	bl	8000288 <__aeabi_dsub>
 8004ae2:	a365      	add	r3, pc, #404	; (adr r3, 8004c78 <_dtoa_r+0x2b8>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fd86 	bl	80005f8 <__aeabi_dmul>
 8004aec:	a364      	add	r3, pc, #400	; (adr r3, 8004c80 <_dtoa_r+0x2c0>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fbcb 	bl	800028c <__adddf3>
 8004af6:	4606      	mov	r6, r0
 8004af8:	4628      	mov	r0, r5
 8004afa:	460f      	mov	r7, r1
 8004afc:	f7fb fd12 	bl	8000524 <__aeabi_i2d>
 8004b00:	a361      	add	r3, pc, #388	; (adr r3, 8004c88 <_dtoa_r+0x2c8>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fd77 	bl	80005f8 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fb fbbb 	bl	800028c <__adddf3>
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	f7fc f81d 	bl	8000b58 <__aeabi_d2iz>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	9000      	str	r0, [sp, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb ffd8 	bl	8000adc <__aeabi_dcmplt>
 8004b2c:	b150      	cbz	r0, 8004b44 <_dtoa_r+0x184>
 8004b2e:	9800      	ldr	r0, [sp, #0]
 8004b30:	f7fb fcf8 	bl	8000524 <__aeabi_i2d>
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	f7fb ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b3c:	b910      	cbnz	r0, 8004b44 <_dtoa_r+0x184>
 8004b3e:	9b00      	ldr	r3, [sp, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	9b00      	ldr	r3, [sp, #0]
 8004b46:	2b16      	cmp	r3, #22
 8004b48:	d85a      	bhi.n	8004c00 <_dtoa_r+0x240>
 8004b4a:	9a00      	ldr	r2, [sp, #0]
 8004b4c:	4b57      	ldr	r3, [pc, #348]	; (8004cac <_dtoa_r+0x2ec>)
 8004b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	ec51 0b19 	vmov	r0, r1, d9
 8004b5a:	f7fb ffbf 	bl	8000adc <__aeabi_dcmplt>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d050      	beq.n	8004c04 <_dtoa_r+0x244>
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b6e:	1b5d      	subs	r5, r3, r5
 8004b70:	1e6b      	subs	r3, r5, #1
 8004b72:	9305      	str	r3, [sp, #20]
 8004b74:	bf45      	ittet	mi
 8004b76:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b7a:	9304      	strmi	r3, [sp, #16]
 8004b7c:	2300      	movpl	r3, #0
 8004b7e:	2300      	movmi	r3, #0
 8004b80:	bf4c      	ite	mi
 8004b82:	9305      	strmi	r3, [sp, #20]
 8004b84:	9304      	strpl	r3, [sp, #16]
 8004b86:	9b00      	ldr	r3, [sp, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db3d      	blt.n	8004c08 <_dtoa_r+0x248>
 8004b8c:	9b05      	ldr	r3, [sp, #20]
 8004b8e:	9a00      	ldr	r2, [sp, #0]
 8004b90:	920a      	str	r2, [sp, #40]	; 0x28
 8004b92:	4413      	add	r3, r2
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	9b06      	ldr	r3, [sp, #24]
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	f200 8089 	bhi.w	8004cb4 <_dtoa_r+0x2f4>
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	bfc4      	itt	gt
 8004ba6:	3b04      	subgt	r3, #4
 8004ba8:	9306      	strgt	r3, [sp, #24]
 8004baa:	9b06      	ldr	r3, [sp, #24]
 8004bac:	f1a3 0302 	sub.w	r3, r3, #2
 8004bb0:	bfcc      	ite	gt
 8004bb2:	2500      	movgt	r5, #0
 8004bb4:	2501      	movle	r5, #1
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	f200 8087 	bhi.w	8004cca <_dtoa_r+0x30a>
 8004bbc:	e8df f003 	tbb	[pc, r3]
 8004bc0:	59383a2d 	.word	0x59383a2d
 8004bc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004bc8:	441d      	add	r5, r3
 8004bca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	bfc1      	itttt	gt
 8004bd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004bda:	fa0b f303 	lslgt.w	r3, fp, r3
 8004bde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004be2:	bfda      	itte	le
 8004be4:	f1c3 0320 	rsble	r3, r3, #32
 8004be8:	fa06 f003 	lslle.w	r0, r6, r3
 8004bec:	4318      	orrgt	r0, r3
 8004bee:	f7fb fc89 	bl	8000504 <__aeabi_ui2d>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004bfa:	3d01      	subs	r5, #1
 8004bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8004bfe:	e76a      	b.n	8004ad6 <_dtoa_r+0x116>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e7b2      	b.n	8004b6a <_dtoa_r+0x1aa>
 8004c04:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c06:	e7b1      	b.n	8004b6c <_dtoa_r+0x1ac>
 8004c08:	9b04      	ldr	r3, [sp, #16]
 8004c0a:	9a00      	ldr	r2, [sp, #0]
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	9304      	str	r3, [sp, #16]
 8004c10:	4253      	negs	r3, r2
 8004c12:	9307      	str	r3, [sp, #28]
 8004c14:	2300      	movs	r3, #0
 8004c16:	930a      	str	r3, [sp, #40]	; 0x28
 8004c18:	e7bf      	b.n	8004b9a <_dtoa_r+0x1da>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9308      	str	r3, [sp, #32]
 8004c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dc55      	bgt.n	8004cd0 <_dtoa_r+0x310>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2e:	e00c      	b.n	8004c4a <_dtoa_r+0x28a>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e7f3      	b.n	8004c1c <_dtoa_r+0x25c>
 8004c34:	2300      	movs	r3, #0
 8004c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c38:	9308      	str	r3, [sp, #32]
 8004c3a:	9b00      	ldr	r3, [sp, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	9303      	str	r3, [sp, #12]
 8004c46:	bfb8      	it	lt
 8004c48:	2301      	movlt	r3, #1
 8004c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	6042      	str	r2, [r0, #4]
 8004c50:	2204      	movs	r2, #4
 8004c52:	f102 0614 	add.w	r6, r2, #20
 8004c56:	429e      	cmp	r6, r3
 8004c58:	6841      	ldr	r1, [r0, #4]
 8004c5a:	d93d      	bls.n	8004cd8 <_dtoa_r+0x318>
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 fdb1 	bl	80057c4 <_Balloc>
 8004c62:	9001      	str	r0, [sp, #4]
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d13b      	bne.n	8004ce0 <_dtoa_r+0x320>
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <_dtoa_r+0x2f0>)
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c70:	e6c0      	b.n	80049f4 <_dtoa_r+0x34>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e7df      	b.n	8004c36 <_dtoa_r+0x276>
 8004c76:	bf00      	nop
 8004c78:	636f4361 	.word	0x636f4361
 8004c7c:	3fd287a7 	.word	0x3fd287a7
 8004c80:	8b60c8b3 	.word	0x8b60c8b3
 8004c84:	3fc68a28 	.word	0x3fc68a28
 8004c88:	509f79fb 	.word	0x509f79fb
 8004c8c:	3fd34413 	.word	0x3fd34413
 8004c90:	08007b15 	.word	0x08007b15
 8004c94:	08007b2c 	.word	0x08007b2c
 8004c98:	7ff00000 	.word	0x7ff00000
 8004c9c:	08007b11 	.word	0x08007b11
 8004ca0:	08007b08 	.word	0x08007b08
 8004ca4:	08007ae5 	.word	0x08007ae5
 8004ca8:	3ff80000 	.word	0x3ff80000
 8004cac:	08007c80 	.word	0x08007c80
 8004cb0:	08007b87 	.word	0x08007b87
 8004cb4:	2501      	movs	r5, #1
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9306      	str	r3, [sp, #24]
 8004cba:	9508      	str	r5, [sp, #32]
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2312      	movs	r3, #18
 8004cc8:	e7b0      	b.n	8004c2c <_dtoa_r+0x26c>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	9308      	str	r3, [sp, #32]
 8004cce:	e7f5      	b.n	8004cbc <_dtoa_r+0x2fc>
 8004cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cd6:	e7b8      	b.n	8004c4a <_dtoa_r+0x28a>
 8004cd8:	3101      	adds	r1, #1
 8004cda:	6041      	str	r1, [r0, #4]
 8004cdc:	0052      	lsls	r2, r2, #1
 8004cde:	e7b8      	b.n	8004c52 <_dtoa_r+0x292>
 8004ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce2:	9a01      	ldr	r2, [sp, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	2b0e      	cmp	r3, #14
 8004cea:	f200 809d 	bhi.w	8004e28 <_dtoa_r+0x468>
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	f000 809a 	beq.w	8004e28 <_dtoa_r+0x468>
 8004cf4:	9b00      	ldr	r3, [sp, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dd32      	ble.n	8004d60 <_dtoa_r+0x3a0>
 8004cfa:	4ab7      	ldr	r2, [pc, #732]	; (8004fd8 <_dtoa_r+0x618>)
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d08:	9b00      	ldr	r3, [sp, #0]
 8004d0a:	05d8      	lsls	r0, r3, #23
 8004d0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004d10:	d516      	bpl.n	8004d40 <_dtoa_r+0x380>
 8004d12:	4bb2      	ldr	r3, [pc, #712]	; (8004fdc <_dtoa_r+0x61c>)
 8004d14:	ec51 0b19 	vmov	r0, r1, d9
 8004d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d1c:	f7fb fd96 	bl	800084c <__aeabi_ddiv>
 8004d20:	f007 070f 	and.w	r7, r7, #15
 8004d24:	4682      	mov	sl, r0
 8004d26:	468b      	mov	fp, r1
 8004d28:	2503      	movs	r5, #3
 8004d2a:	4eac      	ldr	r6, [pc, #688]	; (8004fdc <_dtoa_r+0x61c>)
 8004d2c:	b957      	cbnz	r7, 8004d44 <_dtoa_r+0x384>
 8004d2e:	4642      	mov	r2, r8
 8004d30:	464b      	mov	r3, r9
 8004d32:	4650      	mov	r0, sl
 8004d34:	4659      	mov	r1, fp
 8004d36:	f7fb fd89 	bl	800084c <__aeabi_ddiv>
 8004d3a:	4682      	mov	sl, r0
 8004d3c:	468b      	mov	fp, r1
 8004d3e:	e028      	b.n	8004d92 <_dtoa_r+0x3d2>
 8004d40:	2502      	movs	r5, #2
 8004d42:	e7f2      	b.n	8004d2a <_dtoa_r+0x36a>
 8004d44:	07f9      	lsls	r1, r7, #31
 8004d46:	d508      	bpl.n	8004d5a <_dtoa_r+0x39a>
 8004d48:	4640      	mov	r0, r8
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d50:	f7fb fc52 	bl	80005f8 <__aeabi_dmul>
 8004d54:	3501      	adds	r5, #1
 8004d56:	4680      	mov	r8, r0
 8004d58:	4689      	mov	r9, r1
 8004d5a:	107f      	asrs	r7, r7, #1
 8004d5c:	3608      	adds	r6, #8
 8004d5e:	e7e5      	b.n	8004d2c <_dtoa_r+0x36c>
 8004d60:	f000 809b 	beq.w	8004e9a <_dtoa_r+0x4da>
 8004d64:	9b00      	ldr	r3, [sp, #0]
 8004d66:	4f9d      	ldr	r7, [pc, #628]	; (8004fdc <_dtoa_r+0x61c>)
 8004d68:	425e      	negs	r6, r3
 8004d6a:	4b9b      	ldr	r3, [pc, #620]	; (8004fd8 <_dtoa_r+0x618>)
 8004d6c:	f006 020f 	and.w	r2, r6, #15
 8004d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	ec51 0b19 	vmov	r0, r1, d9
 8004d7c:	f7fb fc3c 	bl	80005f8 <__aeabi_dmul>
 8004d80:	1136      	asrs	r6, r6, #4
 8004d82:	4682      	mov	sl, r0
 8004d84:	468b      	mov	fp, r1
 8004d86:	2300      	movs	r3, #0
 8004d88:	2502      	movs	r5, #2
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d17a      	bne.n	8004e84 <_dtoa_r+0x4c4>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1d3      	bne.n	8004d3a <_dtoa_r+0x37a>
 8004d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8082 	beq.w	8004e9e <_dtoa_r+0x4de>
 8004d9a:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <_dtoa_r+0x620>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4650      	mov	r0, sl
 8004da0:	4659      	mov	r1, fp
 8004da2:	f7fb fe9b 	bl	8000adc <__aeabi_dcmplt>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d079      	beq.n	8004e9e <_dtoa_r+0x4de>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d076      	beq.n	8004e9e <_dtoa_r+0x4de>
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dd36      	ble.n	8004e24 <_dtoa_r+0x464>
 8004db6:	9b00      	ldr	r3, [sp, #0]
 8004db8:	4650      	mov	r0, sl
 8004dba:	4659      	mov	r1, fp
 8004dbc:	1e5f      	subs	r7, r3, #1
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <_dtoa_r+0x624>)
 8004dc2:	f7fb fc19 	bl	80005f8 <__aeabi_dmul>
 8004dc6:	9e02      	ldr	r6, [sp, #8]
 8004dc8:	4682      	mov	sl, r0
 8004dca:	468b      	mov	fp, r1
 8004dcc:	3501      	adds	r5, #1
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f7fb fba8 	bl	8000524 <__aeabi_i2d>
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	f7fb fc0e 	bl	80005f8 <__aeabi_dmul>
 8004ddc:	4b82      	ldr	r3, [pc, #520]	; (8004fe8 <_dtoa_r+0x628>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	f7fb fa54 	bl	800028c <__adddf3>
 8004de4:	46d0      	mov	r8, sl
 8004de6:	46d9      	mov	r9, fp
 8004de8:	4682      	mov	sl, r0
 8004dea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004dee:	2e00      	cmp	r6, #0
 8004df0:	d158      	bne.n	8004ea4 <_dtoa_r+0x4e4>
 8004df2:	4b7e      	ldr	r3, [pc, #504]	; (8004fec <_dtoa_r+0x62c>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	4640      	mov	r0, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	f7fb fa45 	bl	8000288 <__aeabi_dsub>
 8004dfe:	4652      	mov	r2, sl
 8004e00:	465b      	mov	r3, fp
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	f7fb fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	f040 8295 	bne.w	800533a <_dtoa_r+0x97a>
 8004e10:	4652      	mov	r2, sl
 8004e12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e16:	4640      	mov	r0, r8
 8004e18:	4649      	mov	r1, r9
 8004e1a:	f7fb fe5f 	bl	8000adc <__aeabi_dcmplt>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	f040 8289 	bne.w	8005336 <_dtoa_r+0x976>
 8004e24:	ec5b ab19 	vmov	sl, fp, d9
 8004e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f2c0 8148 	blt.w	80050c0 <_dtoa_r+0x700>
 8004e30:	9a00      	ldr	r2, [sp, #0]
 8004e32:	2a0e      	cmp	r2, #14
 8004e34:	f300 8144 	bgt.w	80050c0 <_dtoa_r+0x700>
 8004e38:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <_dtoa_r+0x618>)
 8004e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f280 80d5 	bge.w	8004ff4 <_dtoa_r+0x634>
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f300 80d1 	bgt.w	8004ff4 <_dtoa_r+0x634>
 8004e52:	f040 826f 	bne.w	8005334 <_dtoa_r+0x974>
 8004e56:	4b65      	ldr	r3, [pc, #404]	; (8004fec <_dtoa_r+0x62c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fbcb 	bl	80005f8 <__aeabi_dmul>
 8004e62:	4652      	mov	r2, sl
 8004e64:	465b      	mov	r3, fp
 8004e66:	f7fb fe4d 	bl	8000b04 <__aeabi_dcmpge>
 8004e6a:	9e03      	ldr	r6, [sp, #12]
 8004e6c:	4637      	mov	r7, r6
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	f040 8245 	bne.w	80052fe <_dtoa_r+0x93e>
 8004e74:	9d01      	ldr	r5, [sp, #4]
 8004e76:	2331      	movs	r3, #49	; 0x31
 8004e78:	f805 3b01 	strb.w	r3, [r5], #1
 8004e7c:	9b00      	ldr	r3, [sp, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	e240      	b.n	8005306 <_dtoa_r+0x946>
 8004e84:	07f2      	lsls	r2, r6, #31
 8004e86:	d505      	bpl.n	8004e94 <_dtoa_r+0x4d4>
 8004e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8c:	f7fb fbb4 	bl	80005f8 <__aeabi_dmul>
 8004e90:	3501      	adds	r5, #1
 8004e92:	2301      	movs	r3, #1
 8004e94:	1076      	asrs	r6, r6, #1
 8004e96:	3708      	adds	r7, #8
 8004e98:	e777      	b.n	8004d8a <_dtoa_r+0x3ca>
 8004e9a:	2502      	movs	r5, #2
 8004e9c:	e779      	b.n	8004d92 <_dtoa_r+0x3d2>
 8004e9e:	9f00      	ldr	r7, [sp, #0]
 8004ea0:	9e03      	ldr	r6, [sp, #12]
 8004ea2:	e794      	b.n	8004dce <_dtoa_r+0x40e>
 8004ea4:	9901      	ldr	r1, [sp, #4]
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <_dtoa_r+0x618>)
 8004ea8:	4431      	add	r1, r6
 8004eaa:	910d      	str	r1, [sp, #52]	; 0x34
 8004eac:	9908      	ldr	r1, [sp, #32]
 8004eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	d043      	beq.n	8004f42 <_dtoa_r+0x582>
 8004eba:	494d      	ldr	r1, [pc, #308]	; (8004ff0 <_dtoa_r+0x630>)
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7fb fcc5 	bl	800084c <__aeabi_ddiv>
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	f7fb f9df 	bl	8000288 <__aeabi_dsub>
 8004eca:	9d01      	ldr	r5, [sp, #4]
 8004ecc:	4682      	mov	sl, r0
 8004ece:	468b      	mov	fp, r1
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f7fb fe40 	bl	8000b58 <__aeabi_d2iz>
 8004ed8:	4606      	mov	r6, r0
 8004eda:	f7fb fb23 	bl	8000524 <__aeabi_i2d>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb f9cf 	bl	8000288 <__aeabi_dsub>
 8004eea:	3630      	adds	r6, #48	; 0x30
 8004eec:	f805 6b01 	strb.w	r6, [r5], #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	465b      	mov	r3, fp
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	4689      	mov	r9, r1
 8004ef8:	f7fb fdf0 	bl	8000adc <__aeabi_dcmplt>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d163      	bne.n	8004fc8 <_dtoa_r+0x608>
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	4936      	ldr	r1, [pc, #216]	; (8004fe0 <_dtoa_r+0x620>)
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fb f9be 	bl	8000288 <__aeabi_dsub>
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	465b      	mov	r3, fp
 8004f10:	f7fb fde4 	bl	8000adc <__aeabi_dcmplt>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f040 80b5 	bne.w	8005084 <_dtoa_r+0x6c4>
 8004f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f1c:	429d      	cmp	r5, r3
 8004f1e:	d081      	beq.n	8004e24 <_dtoa_r+0x464>
 8004f20:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <_dtoa_r+0x624>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	4650      	mov	r0, sl
 8004f26:	4659      	mov	r1, fp
 8004f28:	f7fb fb66 	bl	80005f8 <__aeabi_dmul>
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <_dtoa_r+0x624>)
 8004f2e:	4682      	mov	sl, r0
 8004f30:	468b      	mov	fp, r1
 8004f32:	4640      	mov	r0, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	2200      	movs	r2, #0
 8004f38:	f7fb fb5e 	bl	80005f8 <__aeabi_dmul>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	4689      	mov	r9, r1
 8004f40:	e7c6      	b.n	8004ed0 <_dtoa_r+0x510>
 8004f42:	4650      	mov	r0, sl
 8004f44:	4659      	mov	r1, fp
 8004f46:	f7fb fb57 	bl	80005f8 <__aeabi_dmul>
 8004f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f4c:	9d01      	ldr	r5, [sp, #4]
 8004f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f50:	4682      	mov	sl, r0
 8004f52:	468b      	mov	fp, r1
 8004f54:	4649      	mov	r1, r9
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7fb fdfe 	bl	8000b58 <__aeabi_d2iz>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	f7fb fae1 	bl	8000524 <__aeabi_i2d>
 8004f62:	3630      	adds	r6, #48	; 0x30
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4640      	mov	r0, r8
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	f7fb f98c 	bl	8000288 <__aeabi_dsub>
 8004f70:	f805 6b01 	strb.w	r6, [r5], #1
 8004f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f76:	429d      	cmp	r5, r3
 8004f78:	4680      	mov	r8, r0
 8004f7a:	4689      	mov	r9, r1
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	d124      	bne.n	8004fcc <_dtoa_r+0x60c>
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <_dtoa_r+0x630>)
 8004f84:	4650      	mov	r0, sl
 8004f86:	4659      	mov	r1, fp
 8004f88:	f7fb f980 	bl	800028c <__adddf3>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb fdc0 	bl	8000b18 <__aeabi_dcmpgt>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d173      	bne.n	8005084 <_dtoa_r+0x6c4>
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	465b      	mov	r3, fp
 8004fa0:	4913      	ldr	r1, [pc, #76]	; (8004ff0 <_dtoa_r+0x630>)
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f7fb f970 	bl	8000288 <__aeabi_dsub>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4640      	mov	r0, r8
 8004fae:	4649      	mov	r1, r9
 8004fb0:	f7fb fd94 	bl	8000adc <__aeabi_dcmplt>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f43f af35 	beq.w	8004e24 <_dtoa_r+0x464>
 8004fba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004fbc:	1e6b      	subs	r3, r5, #1
 8004fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d0f8      	beq.n	8004fba <_dtoa_r+0x5fa>
 8004fc8:	9700      	str	r7, [sp, #0]
 8004fca:	e049      	b.n	8005060 <_dtoa_r+0x6a0>
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <_dtoa_r+0x624>)
 8004fce:	f7fb fb13 	bl	80005f8 <__aeabi_dmul>
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	4689      	mov	r9, r1
 8004fd6:	e7bd      	b.n	8004f54 <_dtoa_r+0x594>
 8004fd8:	08007c80 	.word	0x08007c80
 8004fdc:	08007c58 	.word	0x08007c58
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	40240000 	.word	0x40240000
 8004fe8:	401c0000 	.word	0x401c0000
 8004fec:	40140000 	.word	0x40140000
 8004ff0:	3fe00000 	.word	0x3fe00000
 8004ff4:	9d01      	ldr	r5, [sp, #4]
 8004ff6:	4656      	mov	r6, sl
 8004ff8:	465f      	mov	r7, fp
 8004ffa:	4642      	mov	r2, r8
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fc23 	bl	800084c <__aeabi_ddiv>
 8005006:	f7fb fda7 	bl	8000b58 <__aeabi_d2iz>
 800500a:	4682      	mov	sl, r0
 800500c:	f7fb fa8a 	bl	8000524 <__aeabi_i2d>
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005024:	f7fb f930 	bl	8000288 <__aeabi_dsub>
 8005028:	f805 6b01 	strb.w	r6, [r5], #1
 800502c:	9e01      	ldr	r6, [sp, #4]
 800502e:	9f03      	ldr	r7, [sp, #12]
 8005030:	1bae      	subs	r6, r5, r6
 8005032:	42b7      	cmp	r7, r6
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	d135      	bne.n	80050a6 <_dtoa_r+0x6e6>
 800503a:	f7fb f927 	bl	800028c <__adddf3>
 800503e:	4642      	mov	r2, r8
 8005040:	464b      	mov	r3, r9
 8005042:	4606      	mov	r6, r0
 8005044:	460f      	mov	r7, r1
 8005046:	f7fb fd67 	bl	8000b18 <__aeabi_dcmpgt>
 800504a:	b9d0      	cbnz	r0, 8005082 <_dtoa_r+0x6c2>
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005058:	b110      	cbz	r0, 8005060 <_dtoa_r+0x6a0>
 800505a:	f01a 0f01 	tst.w	sl, #1
 800505e:	d110      	bne.n	8005082 <_dtoa_r+0x6c2>
 8005060:	4620      	mov	r0, r4
 8005062:	ee18 1a10 	vmov	r1, s16
 8005066:	f000 fbed 	bl	8005844 <_Bfree>
 800506a:	2300      	movs	r3, #0
 800506c:	9800      	ldr	r0, [sp, #0]
 800506e:	702b      	strb	r3, [r5, #0]
 8005070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005072:	3001      	adds	r0, #1
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005078:	2b00      	cmp	r3, #0
 800507a:	f43f acf1 	beq.w	8004a60 <_dtoa_r+0xa0>
 800507e:	601d      	str	r5, [r3, #0]
 8005080:	e4ee      	b.n	8004a60 <_dtoa_r+0xa0>
 8005082:	9f00      	ldr	r7, [sp, #0]
 8005084:	462b      	mov	r3, r5
 8005086:	461d      	mov	r5, r3
 8005088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800508c:	2a39      	cmp	r2, #57	; 0x39
 800508e:	d106      	bne.n	800509e <_dtoa_r+0x6de>
 8005090:	9a01      	ldr	r2, [sp, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d1f7      	bne.n	8005086 <_dtoa_r+0x6c6>
 8005096:	9901      	ldr	r1, [sp, #4]
 8005098:	2230      	movs	r2, #48	; 0x30
 800509a:	3701      	adds	r7, #1
 800509c:	700a      	strb	r2, [r1, #0]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	3201      	adds	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e790      	b.n	8004fc8 <_dtoa_r+0x608>
 80050a6:	4ba6      	ldr	r3, [pc, #664]	; (8005340 <_dtoa_r+0x980>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	f7fb faa5 	bl	80005f8 <__aeabi_dmul>
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	4606      	mov	r6, r0
 80050b4:	460f      	mov	r7, r1
 80050b6:	f7fb fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d09d      	beq.n	8004ffa <_dtoa_r+0x63a>
 80050be:	e7cf      	b.n	8005060 <_dtoa_r+0x6a0>
 80050c0:	9a08      	ldr	r2, [sp, #32]
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	f000 80d7 	beq.w	8005276 <_dtoa_r+0x8b6>
 80050c8:	9a06      	ldr	r2, [sp, #24]
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	f300 80ba 	bgt.w	8005244 <_dtoa_r+0x884>
 80050d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	f000 80b2 	beq.w	800523c <_dtoa_r+0x87c>
 80050d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050dc:	9e07      	ldr	r6, [sp, #28]
 80050de:	9d04      	ldr	r5, [sp, #16]
 80050e0:	9a04      	ldr	r2, [sp, #16]
 80050e2:	441a      	add	r2, r3
 80050e4:	9204      	str	r2, [sp, #16]
 80050e6:	9a05      	ldr	r2, [sp, #20]
 80050e8:	2101      	movs	r1, #1
 80050ea:	441a      	add	r2, r3
 80050ec:	4620      	mov	r0, r4
 80050ee:	9205      	str	r2, [sp, #20]
 80050f0:	f000 fc60 	bl	80059b4 <__i2b>
 80050f4:	4607      	mov	r7, r0
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	dd0c      	ble.n	8005114 <_dtoa_r+0x754>
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dd09      	ble.n	8005114 <_dtoa_r+0x754>
 8005100:	42ab      	cmp	r3, r5
 8005102:	9a04      	ldr	r2, [sp, #16]
 8005104:	bfa8      	it	ge
 8005106:	462b      	movge	r3, r5
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	9204      	str	r2, [sp, #16]
 800510c:	9a05      	ldr	r2, [sp, #20]
 800510e:	1aed      	subs	r5, r5, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	9305      	str	r3, [sp, #20]
 8005114:	9b07      	ldr	r3, [sp, #28]
 8005116:	b31b      	cbz	r3, 8005160 <_dtoa_r+0x7a0>
 8005118:	9b08      	ldr	r3, [sp, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80af 	beq.w	800527e <_dtoa_r+0x8be>
 8005120:	2e00      	cmp	r6, #0
 8005122:	dd13      	ble.n	800514c <_dtoa_r+0x78c>
 8005124:	4639      	mov	r1, r7
 8005126:	4632      	mov	r2, r6
 8005128:	4620      	mov	r0, r4
 800512a:	f000 fd03 	bl	8005b34 <__pow5mult>
 800512e:	ee18 2a10 	vmov	r2, s16
 8005132:	4601      	mov	r1, r0
 8005134:	4607      	mov	r7, r0
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fc52 	bl	80059e0 <__multiply>
 800513c:	ee18 1a10 	vmov	r1, s16
 8005140:	4680      	mov	r8, r0
 8005142:	4620      	mov	r0, r4
 8005144:	f000 fb7e 	bl	8005844 <_Bfree>
 8005148:	ee08 8a10 	vmov	s16, r8
 800514c:	9b07      	ldr	r3, [sp, #28]
 800514e:	1b9a      	subs	r2, r3, r6
 8005150:	d006      	beq.n	8005160 <_dtoa_r+0x7a0>
 8005152:	ee18 1a10 	vmov	r1, s16
 8005156:	4620      	mov	r0, r4
 8005158:	f000 fcec 	bl	8005b34 <__pow5mult>
 800515c:	ee08 0a10 	vmov	s16, r0
 8005160:	2101      	movs	r1, #1
 8005162:	4620      	mov	r0, r4
 8005164:	f000 fc26 	bl	80059b4 <__i2b>
 8005168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	4606      	mov	r6, r0
 800516e:	f340 8088 	ble.w	8005282 <_dtoa_r+0x8c2>
 8005172:	461a      	mov	r2, r3
 8005174:	4601      	mov	r1, r0
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fcdc 	bl	8005b34 <__pow5mult>
 800517c:	9b06      	ldr	r3, [sp, #24]
 800517e:	2b01      	cmp	r3, #1
 8005180:	4606      	mov	r6, r0
 8005182:	f340 8081 	ble.w	8005288 <_dtoa_r+0x8c8>
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	6933      	ldr	r3, [r6, #16]
 800518c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005190:	6918      	ldr	r0, [r3, #16]
 8005192:	f000 fbbf 	bl	8005914 <__hi0bits>
 8005196:	f1c0 0020 	rsb	r0, r0, #32
 800519a:	9b05      	ldr	r3, [sp, #20]
 800519c:	4418      	add	r0, r3
 800519e:	f010 001f 	ands.w	r0, r0, #31
 80051a2:	f000 8092 	beq.w	80052ca <_dtoa_r+0x90a>
 80051a6:	f1c0 0320 	rsb	r3, r0, #32
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	f340 808a 	ble.w	80052c4 <_dtoa_r+0x904>
 80051b0:	f1c0 001c 	rsb	r0, r0, #28
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	4403      	add	r3, r0
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	9b05      	ldr	r3, [sp, #20]
 80051bc:	4403      	add	r3, r0
 80051be:	4405      	add	r5, r0
 80051c0:	9305      	str	r3, [sp, #20]
 80051c2:	9b04      	ldr	r3, [sp, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dd07      	ble.n	80051d8 <_dtoa_r+0x818>
 80051c8:	ee18 1a10 	vmov	r1, s16
 80051cc:	461a      	mov	r2, r3
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fd0a 	bl	8005be8 <__lshift>
 80051d4:	ee08 0a10 	vmov	s16, r0
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	dd05      	ble.n	80051ea <_dtoa_r+0x82a>
 80051de:	4631      	mov	r1, r6
 80051e0:	461a      	mov	r2, r3
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 fd00 	bl	8005be8 <__lshift>
 80051e8:	4606      	mov	r6, r0
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d06e      	beq.n	80052ce <_dtoa_r+0x90e>
 80051f0:	ee18 0a10 	vmov	r0, s16
 80051f4:	4631      	mov	r1, r6
 80051f6:	f000 fd67 	bl	8005cc8 <__mcmp>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	da67      	bge.n	80052ce <_dtoa_r+0x90e>
 80051fe:	9b00      	ldr	r3, [sp, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	ee18 1a10 	vmov	r1, s16
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	220a      	movs	r2, #10
 800520a:	2300      	movs	r3, #0
 800520c:	4620      	mov	r0, r4
 800520e:	f000 fb3b 	bl	8005888 <__multadd>
 8005212:	9b08      	ldr	r3, [sp, #32]
 8005214:	ee08 0a10 	vmov	s16, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 81b1 	beq.w	8005580 <_dtoa_r+0xbc0>
 800521e:	2300      	movs	r3, #0
 8005220:	4639      	mov	r1, r7
 8005222:	220a      	movs	r2, #10
 8005224:	4620      	mov	r0, r4
 8005226:	f000 fb2f 	bl	8005888 <__multadd>
 800522a:	9b02      	ldr	r3, [sp, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	4607      	mov	r7, r0
 8005230:	f300 808e 	bgt.w	8005350 <_dtoa_r+0x990>
 8005234:	9b06      	ldr	r3, [sp, #24]
 8005236:	2b02      	cmp	r3, #2
 8005238:	dc51      	bgt.n	80052de <_dtoa_r+0x91e>
 800523a:	e089      	b.n	8005350 <_dtoa_r+0x990>
 800523c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800523e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005242:	e74b      	b.n	80050dc <_dtoa_r+0x71c>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	1e5e      	subs	r6, r3, #1
 8005248:	9b07      	ldr	r3, [sp, #28]
 800524a:	42b3      	cmp	r3, r6
 800524c:	bfbf      	itttt	lt
 800524e:	9b07      	ldrlt	r3, [sp, #28]
 8005250:	9607      	strlt	r6, [sp, #28]
 8005252:	1af2      	sublt	r2, r6, r3
 8005254:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005256:	bfb6      	itet	lt
 8005258:	189b      	addlt	r3, r3, r2
 800525a:	1b9e      	subge	r6, r3, r6
 800525c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	bfb8      	it	lt
 8005262:	2600      	movlt	r6, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	bfb7      	itett	lt
 8005268:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800526c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005270:	1a9d      	sublt	r5, r3, r2
 8005272:	2300      	movlt	r3, #0
 8005274:	e734      	b.n	80050e0 <_dtoa_r+0x720>
 8005276:	9e07      	ldr	r6, [sp, #28]
 8005278:	9d04      	ldr	r5, [sp, #16]
 800527a:	9f08      	ldr	r7, [sp, #32]
 800527c:	e73b      	b.n	80050f6 <_dtoa_r+0x736>
 800527e:	9a07      	ldr	r2, [sp, #28]
 8005280:	e767      	b.n	8005152 <_dtoa_r+0x792>
 8005282:	9b06      	ldr	r3, [sp, #24]
 8005284:	2b01      	cmp	r3, #1
 8005286:	dc18      	bgt.n	80052ba <_dtoa_r+0x8fa>
 8005288:	f1ba 0f00 	cmp.w	sl, #0
 800528c:	d115      	bne.n	80052ba <_dtoa_r+0x8fa>
 800528e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005292:	b993      	cbnz	r3, 80052ba <_dtoa_r+0x8fa>
 8005294:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	051b      	lsls	r3, r3, #20
 800529c:	b183      	cbz	r3, 80052c0 <_dtoa_r+0x900>
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	9b05      	ldr	r3, [sp, #20]
 80052a6:	3301      	adds	r3, #1
 80052a8:	9305      	str	r3, [sp, #20]
 80052aa:	f04f 0801 	mov.w	r8, #1
 80052ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af6a 	bne.w	800518a <_dtoa_r+0x7ca>
 80052b6:	2001      	movs	r0, #1
 80052b8:	e76f      	b.n	800519a <_dtoa_r+0x7da>
 80052ba:	f04f 0800 	mov.w	r8, #0
 80052be:	e7f6      	b.n	80052ae <_dtoa_r+0x8ee>
 80052c0:	4698      	mov	r8, r3
 80052c2:	e7f4      	b.n	80052ae <_dtoa_r+0x8ee>
 80052c4:	f43f af7d 	beq.w	80051c2 <_dtoa_r+0x802>
 80052c8:	4618      	mov	r0, r3
 80052ca:	301c      	adds	r0, #28
 80052cc:	e772      	b.n	80051b4 <_dtoa_r+0x7f4>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dc37      	bgt.n	8005344 <_dtoa_r+0x984>
 80052d4:	9b06      	ldr	r3, [sp, #24]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	dd34      	ble.n	8005344 <_dtoa_r+0x984>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	b96b      	cbnz	r3, 80052fe <_dtoa_r+0x93e>
 80052e2:	4631      	mov	r1, r6
 80052e4:	2205      	movs	r2, #5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 face 	bl	8005888 <__multadd>
 80052ec:	4601      	mov	r1, r0
 80052ee:	4606      	mov	r6, r0
 80052f0:	ee18 0a10 	vmov	r0, s16
 80052f4:	f000 fce8 	bl	8005cc8 <__mcmp>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	f73f adbb 	bgt.w	8004e74 <_dtoa_r+0x4b4>
 80052fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005300:	9d01      	ldr	r5, [sp, #4]
 8005302:	43db      	mvns	r3, r3
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	4631      	mov	r1, r6
 800530c:	4620      	mov	r0, r4
 800530e:	f000 fa99 	bl	8005844 <_Bfree>
 8005312:	2f00      	cmp	r7, #0
 8005314:	f43f aea4 	beq.w	8005060 <_dtoa_r+0x6a0>
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	d005      	beq.n	800532a <_dtoa_r+0x96a>
 800531e:	45b8      	cmp	r8, r7
 8005320:	d003      	beq.n	800532a <_dtoa_r+0x96a>
 8005322:	4641      	mov	r1, r8
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fa8d 	bl	8005844 <_Bfree>
 800532a:	4639      	mov	r1, r7
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fa89 	bl	8005844 <_Bfree>
 8005332:	e695      	b.n	8005060 <_dtoa_r+0x6a0>
 8005334:	2600      	movs	r6, #0
 8005336:	4637      	mov	r7, r6
 8005338:	e7e1      	b.n	80052fe <_dtoa_r+0x93e>
 800533a:	9700      	str	r7, [sp, #0]
 800533c:	4637      	mov	r7, r6
 800533e:	e599      	b.n	8004e74 <_dtoa_r+0x4b4>
 8005340:	40240000 	.word	0x40240000
 8005344:	9b08      	ldr	r3, [sp, #32]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80ca 	beq.w	80054e0 <_dtoa_r+0xb20>
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	2d00      	cmp	r5, #0
 8005352:	dd05      	ble.n	8005360 <_dtoa_r+0x9a0>
 8005354:	4639      	mov	r1, r7
 8005356:	462a      	mov	r2, r5
 8005358:	4620      	mov	r0, r4
 800535a:	f000 fc45 	bl	8005be8 <__lshift>
 800535e:	4607      	mov	r7, r0
 8005360:	f1b8 0f00 	cmp.w	r8, #0
 8005364:	d05b      	beq.n	800541e <_dtoa_r+0xa5e>
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fa2b 	bl	80057c4 <_Balloc>
 800536e:	4605      	mov	r5, r0
 8005370:	b928      	cbnz	r0, 800537e <_dtoa_r+0x9be>
 8005372:	4b87      	ldr	r3, [pc, #540]	; (8005590 <_dtoa_r+0xbd0>)
 8005374:	4602      	mov	r2, r0
 8005376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800537a:	f7ff bb3b 	b.w	80049f4 <_dtoa_r+0x34>
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	3202      	adds	r2, #2
 8005382:	0092      	lsls	r2, r2, #2
 8005384:	f107 010c 	add.w	r1, r7, #12
 8005388:	300c      	adds	r0, #12
 800538a:	f000 fa0d 	bl	80057a8 <memcpy>
 800538e:	2201      	movs	r2, #1
 8005390:	4629      	mov	r1, r5
 8005392:	4620      	mov	r0, r4
 8005394:	f000 fc28 	bl	8005be8 <__lshift>
 8005398:	9b01      	ldr	r3, [sp, #4]
 800539a:	f103 0901 	add.w	r9, r3, #1
 800539e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	f00a 0301 	and.w	r3, sl, #1
 80053aa:	46b8      	mov	r8, r7
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	4607      	mov	r7, r0
 80053b0:	4631      	mov	r1, r6
 80053b2:	ee18 0a10 	vmov	r0, s16
 80053b6:	f7ff fa77 	bl	80048a8 <quorem>
 80053ba:	4641      	mov	r1, r8
 80053bc:	9002      	str	r0, [sp, #8]
 80053be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053c2:	ee18 0a10 	vmov	r0, s16
 80053c6:	f000 fc7f 	bl	8005cc8 <__mcmp>
 80053ca:	463a      	mov	r2, r7
 80053cc:	9003      	str	r0, [sp, #12]
 80053ce:	4631      	mov	r1, r6
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 fc95 	bl	8005d00 <__mdiff>
 80053d6:	68c2      	ldr	r2, [r0, #12]
 80053d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80053dc:	4605      	mov	r5, r0
 80053de:	bb02      	cbnz	r2, 8005422 <_dtoa_r+0xa62>
 80053e0:	4601      	mov	r1, r0
 80053e2:	ee18 0a10 	vmov	r0, s16
 80053e6:	f000 fc6f 	bl	8005cc8 <__mcmp>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4629      	mov	r1, r5
 80053ee:	4620      	mov	r0, r4
 80053f0:	9207      	str	r2, [sp, #28]
 80053f2:	f000 fa27 	bl	8005844 <_Bfree>
 80053f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80053fa:	ea43 0102 	orr.w	r1, r3, r2
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	430b      	orrs	r3, r1
 8005402:	464d      	mov	r5, r9
 8005404:	d10f      	bne.n	8005426 <_dtoa_r+0xa66>
 8005406:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800540a:	d02a      	beq.n	8005462 <_dtoa_r+0xaa2>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	dd02      	ble.n	8005418 <_dtoa_r+0xa58>
 8005412:	9b02      	ldr	r3, [sp, #8]
 8005414:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005418:	f88b a000 	strb.w	sl, [fp]
 800541c:	e775      	b.n	800530a <_dtoa_r+0x94a>
 800541e:	4638      	mov	r0, r7
 8005420:	e7ba      	b.n	8005398 <_dtoa_r+0x9d8>
 8005422:	2201      	movs	r2, #1
 8005424:	e7e2      	b.n	80053ec <_dtoa_r+0xa2c>
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db04      	blt.n	8005436 <_dtoa_r+0xa76>
 800542c:	9906      	ldr	r1, [sp, #24]
 800542e:	430b      	orrs	r3, r1
 8005430:	9904      	ldr	r1, [sp, #16]
 8005432:	430b      	orrs	r3, r1
 8005434:	d122      	bne.n	800547c <_dtoa_r+0xabc>
 8005436:	2a00      	cmp	r2, #0
 8005438:	ddee      	ble.n	8005418 <_dtoa_r+0xa58>
 800543a:	ee18 1a10 	vmov	r1, s16
 800543e:	2201      	movs	r2, #1
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fbd1 	bl	8005be8 <__lshift>
 8005446:	4631      	mov	r1, r6
 8005448:	ee08 0a10 	vmov	s16, r0
 800544c:	f000 fc3c 	bl	8005cc8 <__mcmp>
 8005450:	2800      	cmp	r0, #0
 8005452:	dc03      	bgt.n	800545c <_dtoa_r+0xa9c>
 8005454:	d1e0      	bne.n	8005418 <_dtoa_r+0xa58>
 8005456:	f01a 0f01 	tst.w	sl, #1
 800545a:	d0dd      	beq.n	8005418 <_dtoa_r+0xa58>
 800545c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005460:	d1d7      	bne.n	8005412 <_dtoa_r+0xa52>
 8005462:	2339      	movs	r3, #57	; 0x39
 8005464:	f88b 3000 	strb.w	r3, [fp]
 8005468:	462b      	mov	r3, r5
 800546a:	461d      	mov	r5, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005472:	2a39      	cmp	r2, #57	; 0x39
 8005474:	d071      	beq.n	800555a <_dtoa_r+0xb9a>
 8005476:	3201      	adds	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e746      	b.n	800530a <_dtoa_r+0x94a>
 800547c:	2a00      	cmp	r2, #0
 800547e:	dd07      	ble.n	8005490 <_dtoa_r+0xad0>
 8005480:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005484:	d0ed      	beq.n	8005462 <_dtoa_r+0xaa2>
 8005486:	f10a 0301 	add.w	r3, sl, #1
 800548a:	f88b 3000 	strb.w	r3, [fp]
 800548e:	e73c      	b.n	800530a <_dtoa_r+0x94a>
 8005490:	9b05      	ldr	r3, [sp, #20]
 8005492:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005496:	4599      	cmp	r9, r3
 8005498:	d047      	beq.n	800552a <_dtoa_r+0xb6a>
 800549a:	ee18 1a10 	vmov	r1, s16
 800549e:	2300      	movs	r3, #0
 80054a0:	220a      	movs	r2, #10
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f9f0 	bl	8005888 <__multadd>
 80054a8:	45b8      	cmp	r8, r7
 80054aa:	ee08 0a10 	vmov	s16, r0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	f04f 020a 	mov.w	r2, #10
 80054b6:	4641      	mov	r1, r8
 80054b8:	4620      	mov	r0, r4
 80054ba:	d106      	bne.n	80054ca <_dtoa_r+0xb0a>
 80054bc:	f000 f9e4 	bl	8005888 <__multadd>
 80054c0:	4680      	mov	r8, r0
 80054c2:	4607      	mov	r7, r0
 80054c4:	f109 0901 	add.w	r9, r9, #1
 80054c8:	e772      	b.n	80053b0 <_dtoa_r+0x9f0>
 80054ca:	f000 f9dd 	bl	8005888 <__multadd>
 80054ce:	4639      	mov	r1, r7
 80054d0:	4680      	mov	r8, r0
 80054d2:	2300      	movs	r3, #0
 80054d4:	220a      	movs	r2, #10
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 f9d6 	bl	8005888 <__multadd>
 80054dc:	4607      	mov	r7, r0
 80054de:	e7f1      	b.n	80054c4 <_dtoa_r+0xb04>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	9302      	str	r3, [sp, #8]
 80054e4:	9d01      	ldr	r5, [sp, #4]
 80054e6:	ee18 0a10 	vmov	r0, s16
 80054ea:	4631      	mov	r1, r6
 80054ec:	f7ff f9dc 	bl	80048a8 <quorem>
 80054f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80054f4:	9b01      	ldr	r3, [sp, #4]
 80054f6:	f805 ab01 	strb.w	sl, [r5], #1
 80054fa:	1aea      	subs	r2, r5, r3
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	4293      	cmp	r3, r2
 8005500:	dd09      	ble.n	8005516 <_dtoa_r+0xb56>
 8005502:	ee18 1a10 	vmov	r1, s16
 8005506:	2300      	movs	r3, #0
 8005508:	220a      	movs	r2, #10
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f9bc 	bl	8005888 <__multadd>
 8005510:	ee08 0a10 	vmov	s16, r0
 8005514:	e7e7      	b.n	80054e6 <_dtoa_r+0xb26>
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	bfc8      	it	gt
 800551c:	461d      	movgt	r5, r3
 800551e:	9b01      	ldr	r3, [sp, #4]
 8005520:	bfd8      	it	le
 8005522:	2501      	movle	r5, #1
 8005524:	441d      	add	r5, r3
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	ee18 1a10 	vmov	r1, s16
 800552e:	2201      	movs	r2, #1
 8005530:	4620      	mov	r0, r4
 8005532:	f000 fb59 	bl	8005be8 <__lshift>
 8005536:	4631      	mov	r1, r6
 8005538:	ee08 0a10 	vmov	s16, r0
 800553c:	f000 fbc4 	bl	8005cc8 <__mcmp>
 8005540:	2800      	cmp	r0, #0
 8005542:	dc91      	bgt.n	8005468 <_dtoa_r+0xaa8>
 8005544:	d102      	bne.n	800554c <_dtoa_r+0xb8c>
 8005546:	f01a 0f01 	tst.w	sl, #1
 800554a:	d18d      	bne.n	8005468 <_dtoa_r+0xaa8>
 800554c:	462b      	mov	r3, r5
 800554e:	461d      	mov	r5, r3
 8005550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005554:	2a30      	cmp	r2, #48	; 0x30
 8005556:	d0fa      	beq.n	800554e <_dtoa_r+0xb8e>
 8005558:	e6d7      	b.n	800530a <_dtoa_r+0x94a>
 800555a:	9a01      	ldr	r2, [sp, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d184      	bne.n	800546a <_dtoa_r+0xaaa>
 8005560:	9b00      	ldr	r3, [sp, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2331      	movs	r3, #49	; 0x31
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	e6ce      	b.n	800530a <_dtoa_r+0x94a>
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <_dtoa_r+0xbd4>)
 800556e:	f7ff ba95 	b.w	8004a9c <_dtoa_r+0xdc>
 8005572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f aa6e 	bne.w	8004a56 <_dtoa_r+0x96>
 800557a:	4b07      	ldr	r3, [pc, #28]	; (8005598 <_dtoa_r+0xbd8>)
 800557c:	f7ff ba8e 	b.w	8004a9c <_dtoa_r+0xdc>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	dcae      	bgt.n	80054e4 <_dtoa_r+0xb24>
 8005586:	9b06      	ldr	r3, [sp, #24]
 8005588:	2b02      	cmp	r3, #2
 800558a:	f73f aea8 	bgt.w	80052de <_dtoa_r+0x91e>
 800558e:	e7a9      	b.n	80054e4 <_dtoa_r+0xb24>
 8005590:	08007b87 	.word	0x08007b87
 8005594:	08007ae4 	.word	0x08007ae4
 8005598:	08007b08 	.word	0x08007b08

0800559c <std>:
 800559c:	2300      	movs	r3, #0
 800559e:	b510      	push	{r4, lr}
 80055a0:	4604      	mov	r4, r0
 80055a2:	e9c0 3300 	strd	r3, r3, [r0]
 80055a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055aa:	6083      	str	r3, [r0, #8]
 80055ac:	8181      	strh	r1, [r0, #12]
 80055ae:	6643      	str	r3, [r0, #100]	; 0x64
 80055b0:	81c2      	strh	r2, [r0, #14]
 80055b2:	6183      	str	r3, [r0, #24]
 80055b4:	4619      	mov	r1, r3
 80055b6:	2208      	movs	r2, #8
 80055b8:	305c      	adds	r0, #92	; 0x5c
 80055ba:	f7fe fceb 	bl	8003f94 <memset>
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <std+0x38>)
 80055c0:	6263      	str	r3, [r4, #36]	; 0x24
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <std+0x3c>)
 80055c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <std+0x40>)
 80055c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <std+0x44>)
 80055cc:	6224      	str	r4, [r4, #32]
 80055ce:	6323      	str	r3, [r4, #48]	; 0x30
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	bf00      	nop
 80055d4:	0800638d 	.word	0x0800638d
 80055d8:	080063af 	.word	0x080063af
 80055dc:	080063e7 	.word	0x080063e7
 80055e0:	0800640b 	.word	0x0800640b

080055e4 <_cleanup_r>:
 80055e4:	4901      	ldr	r1, [pc, #4]	; (80055ec <_cleanup_r+0x8>)
 80055e6:	f000 b8af 	b.w	8005748 <_fwalk_reent>
 80055ea:	bf00      	nop
 80055ec:	08006721 	.word	0x08006721

080055f0 <__sfmoreglue>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	2268      	movs	r2, #104	; 0x68
 80055f4:	1e4d      	subs	r5, r1, #1
 80055f6:	4355      	muls	r5, r2
 80055f8:	460e      	mov	r6, r1
 80055fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055fe:	f000 fce7 	bl	8005fd0 <_malloc_r>
 8005602:	4604      	mov	r4, r0
 8005604:	b140      	cbz	r0, 8005618 <__sfmoreglue+0x28>
 8005606:	2100      	movs	r1, #0
 8005608:	e9c0 1600 	strd	r1, r6, [r0]
 800560c:	300c      	adds	r0, #12
 800560e:	60a0      	str	r0, [r4, #8]
 8005610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005614:	f7fe fcbe 	bl	8003f94 <memset>
 8005618:	4620      	mov	r0, r4
 800561a:	bd70      	pop	{r4, r5, r6, pc}

0800561c <__sfp_lock_acquire>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__sfp_lock_acquire+0x8>)
 800561e:	f000 b8b8 	b.w	8005792 <__retarget_lock_acquire_recursive>
 8005622:	bf00      	nop
 8005624:	20000385 	.word	0x20000385

08005628 <__sfp_lock_release>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__sfp_lock_release+0x8>)
 800562a:	f000 b8b3 	b.w	8005794 <__retarget_lock_release_recursive>
 800562e:	bf00      	nop
 8005630:	20000385 	.word	0x20000385

08005634 <__sinit_lock_acquire>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__sinit_lock_acquire+0x8>)
 8005636:	f000 b8ac 	b.w	8005792 <__retarget_lock_acquire_recursive>
 800563a:	bf00      	nop
 800563c:	20000386 	.word	0x20000386

08005640 <__sinit_lock_release>:
 8005640:	4801      	ldr	r0, [pc, #4]	; (8005648 <__sinit_lock_release+0x8>)
 8005642:	f000 b8a7 	b.w	8005794 <__retarget_lock_release_recursive>
 8005646:	bf00      	nop
 8005648:	20000386 	.word	0x20000386

0800564c <__sinit>:
 800564c:	b510      	push	{r4, lr}
 800564e:	4604      	mov	r4, r0
 8005650:	f7ff fff0 	bl	8005634 <__sinit_lock_acquire>
 8005654:	69a3      	ldr	r3, [r4, #24]
 8005656:	b11b      	cbz	r3, 8005660 <__sinit+0x14>
 8005658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800565c:	f7ff bff0 	b.w	8005640 <__sinit_lock_release>
 8005660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005664:	6523      	str	r3, [r4, #80]	; 0x50
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <__sinit+0x68>)
 8005668:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <__sinit+0x6c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	62a2      	str	r2, [r4, #40]	; 0x28
 800566e:	42a3      	cmp	r3, r4
 8005670:	bf04      	itt	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	61a3      	streq	r3, [r4, #24]
 8005676:	4620      	mov	r0, r4
 8005678:	f000 f820 	bl	80056bc <__sfp>
 800567c:	6060      	str	r0, [r4, #4]
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f81c 	bl	80056bc <__sfp>
 8005684:	60a0      	str	r0, [r4, #8]
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f818 	bl	80056bc <__sfp>
 800568c:	2200      	movs	r2, #0
 800568e:	60e0      	str	r0, [r4, #12]
 8005690:	2104      	movs	r1, #4
 8005692:	6860      	ldr	r0, [r4, #4]
 8005694:	f7ff ff82 	bl	800559c <std>
 8005698:	68a0      	ldr	r0, [r4, #8]
 800569a:	2201      	movs	r2, #1
 800569c:	2109      	movs	r1, #9
 800569e:	f7ff ff7d 	bl	800559c <std>
 80056a2:	68e0      	ldr	r0, [r4, #12]
 80056a4:	2202      	movs	r2, #2
 80056a6:	2112      	movs	r1, #18
 80056a8:	f7ff ff78 	bl	800559c <std>
 80056ac:	2301      	movs	r3, #1
 80056ae:	61a3      	str	r3, [r4, #24]
 80056b0:	e7d2      	b.n	8005658 <__sinit+0xc>
 80056b2:	bf00      	nop
 80056b4:	08007ad0 	.word	0x08007ad0
 80056b8:	080055e5 	.word	0x080055e5

080056bc <__sfp>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	4607      	mov	r7, r0
 80056c0:	f7ff ffac 	bl	800561c <__sfp_lock_acquire>
 80056c4:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <__sfp+0x84>)
 80056c6:	681e      	ldr	r6, [r3, #0]
 80056c8:	69b3      	ldr	r3, [r6, #24]
 80056ca:	b913      	cbnz	r3, 80056d2 <__sfp+0x16>
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff ffbd 	bl	800564c <__sinit>
 80056d2:	3648      	adds	r6, #72	; 0x48
 80056d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	d503      	bpl.n	80056e4 <__sfp+0x28>
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	b30b      	cbz	r3, 8005724 <__sfp+0x68>
 80056e0:	6836      	ldr	r6, [r6, #0]
 80056e2:	e7f7      	b.n	80056d4 <__sfp+0x18>
 80056e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056e8:	b9d5      	cbnz	r5, 8005720 <__sfp+0x64>
 80056ea:	4b16      	ldr	r3, [pc, #88]	; (8005744 <__sfp+0x88>)
 80056ec:	60e3      	str	r3, [r4, #12]
 80056ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056f2:	6665      	str	r5, [r4, #100]	; 0x64
 80056f4:	f000 f84c 	bl	8005790 <__retarget_lock_init_recursive>
 80056f8:	f7ff ff96 	bl	8005628 <__sfp_lock_release>
 80056fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005704:	6025      	str	r5, [r4, #0]
 8005706:	61a5      	str	r5, [r4, #24]
 8005708:	2208      	movs	r2, #8
 800570a:	4629      	mov	r1, r5
 800570c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005710:	f7fe fc40 	bl	8003f94 <memset>
 8005714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800571c:	4620      	mov	r0, r4
 800571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005720:	3468      	adds	r4, #104	; 0x68
 8005722:	e7d9      	b.n	80056d8 <__sfp+0x1c>
 8005724:	2104      	movs	r1, #4
 8005726:	4638      	mov	r0, r7
 8005728:	f7ff ff62 	bl	80055f0 <__sfmoreglue>
 800572c:	4604      	mov	r4, r0
 800572e:	6030      	str	r0, [r6, #0]
 8005730:	2800      	cmp	r0, #0
 8005732:	d1d5      	bne.n	80056e0 <__sfp+0x24>
 8005734:	f7ff ff78 	bl	8005628 <__sfp_lock_release>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	e7ee      	b.n	800571c <__sfp+0x60>
 800573e:	bf00      	nop
 8005740:	08007ad0 	.word	0x08007ad0
 8005744:	ffff0001 	.word	0xffff0001

08005748 <_fwalk_reent>:
 8005748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574c:	4606      	mov	r6, r0
 800574e:	4688      	mov	r8, r1
 8005750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005754:	2700      	movs	r7, #0
 8005756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800575a:	f1b9 0901 	subs.w	r9, r9, #1
 800575e:	d505      	bpl.n	800576c <_fwalk_reent+0x24>
 8005760:	6824      	ldr	r4, [r4, #0]
 8005762:	2c00      	cmp	r4, #0
 8005764:	d1f7      	bne.n	8005756 <_fwalk_reent+0xe>
 8005766:	4638      	mov	r0, r7
 8005768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576c:	89ab      	ldrh	r3, [r5, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d907      	bls.n	8005782 <_fwalk_reent+0x3a>
 8005772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005776:	3301      	adds	r3, #1
 8005778:	d003      	beq.n	8005782 <_fwalk_reent+0x3a>
 800577a:	4629      	mov	r1, r5
 800577c:	4630      	mov	r0, r6
 800577e:	47c0      	blx	r8
 8005780:	4307      	orrs	r7, r0
 8005782:	3568      	adds	r5, #104	; 0x68
 8005784:	e7e9      	b.n	800575a <_fwalk_reent+0x12>
	...

08005788 <_localeconv_r>:
 8005788:	4800      	ldr	r0, [pc, #0]	; (800578c <_localeconv_r+0x4>)
 800578a:	4770      	bx	lr
 800578c:	20000198 	.word	0x20000198

08005790 <__retarget_lock_init_recursive>:
 8005790:	4770      	bx	lr

08005792 <__retarget_lock_acquire_recursive>:
 8005792:	4770      	bx	lr

08005794 <__retarget_lock_release_recursive>:
 8005794:	4770      	bx	lr
	...

08005798 <malloc>:
 8005798:	4b02      	ldr	r3, [pc, #8]	; (80057a4 <malloc+0xc>)
 800579a:	4601      	mov	r1, r0
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f000 bc17 	b.w	8005fd0 <_malloc_r>
 80057a2:	bf00      	nop
 80057a4:	20000044 	.word	0x20000044

080057a8 <memcpy>:
 80057a8:	440a      	add	r2, r1
 80057aa:	4291      	cmp	r1, r2
 80057ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b0:	d100      	bne.n	80057b4 <memcpy+0xc>
 80057b2:	4770      	bx	lr
 80057b4:	b510      	push	{r4, lr}
 80057b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057be:	4291      	cmp	r1, r2
 80057c0:	d1f9      	bne.n	80057b6 <memcpy+0xe>
 80057c2:	bd10      	pop	{r4, pc}

080057c4 <_Balloc>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057c8:	4604      	mov	r4, r0
 80057ca:	460d      	mov	r5, r1
 80057cc:	b976      	cbnz	r6, 80057ec <_Balloc+0x28>
 80057ce:	2010      	movs	r0, #16
 80057d0:	f7ff ffe2 	bl	8005798 <malloc>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6260      	str	r0, [r4, #36]	; 0x24
 80057d8:	b920      	cbnz	r0, 80057e4 <_Balloc+0x20>
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <_Balloc+0x78>)
 80057dc:	4818      	ldr	r0, [pc, #96]	; (8005840 <_Balloc+0x7c>)
 80057de:	2166      	movs	r1, #102	; 0x66
 80057e0:	f000 feea 	bl	80065b8 <__assert_func>
 80057e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057e8:	6006      	str	r6, [r0, #0]
 80057ea:	60c6      	str	r6, [r0, #12]
 80057ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057ee:	68f3      	ldr	r3, [r6, #12]
 80057f0:	b183      	cbz	r3, 8005814 <_Balloc+0x50>
 80057f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057fa:	b9b8      	cbnz	r0, 800582c <_Balloc+0x68>
 80057fc:	2101      	movs	r1, #1
 80057fe:	fa01 f605 	lsl.w	r6, r1, r5
 8005802:	1d72      	adds	r2, r6, #5
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	4620      	mov	r0, r4
 8005808:	f000 fb60 	bl	8005ecc <_calloc_r>
 800580c:	b160      	cbz	r0, 8005828 <_Balloc+0x64>
 800580e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005812:	e00e      	b.n	8005832 <_Balloc+0x6e>
 8005814:	2221      	movs	r2, #33	; 0x21
 8005816:	2104      	movs	r1, #4
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fb57 	bl	8005ecc <_calloc_r>
 800581e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005820:	60f0      	str	r0, [r6, #12]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e4      	bne.n	80057f2 <_Balloc+0x2e>
 8005828:	2000      	movs	r0, #0
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	6802      	ldr	r2, [r0, #0]
 800582e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005832:	2300      	movs	r3, #0
 8005834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005838:	e7f7      	b.n	800582a <_Balloc+0x66>
 800583a:	bf00      	nop
 800583c:	08007b15 	.word	0x08007b15
 8005840:	08007bf8 	.word	0x08007bf8

08005844 <_Bfree>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005848:	4605      	mov	r5, r0
 800584a:	460c      	mov	r4, r1
 800584c:	b976      	cbnz	r6, 800586c <_Bfree+0x28>
 800584e:	2010      	movs	r0, #16
 8005850:	f7ff ffa2 	bl	8005798 <malloc>
 8005854:	4602      	mov	r2, r0
 8005856:	6268      	str	r0, [r5, #36]	; 0x24
 8005858:	b920      	cbnz	r0, 8005864 <_Bfree+0x20>
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <_Bfree+0x3c>)
 800585c:	4809      	ldr	r0, [pc, #36]	; (8005884 <_Bfree+0x40>)
 800585e:	218a      	movs	r1, #138	; 0x8a
 8005860:	f000 feaa 	bl	80065b8 <__assert_func>
 8005864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005868:	6006      	str	r6, [r0, #0]
 800586a:	60c6      	str	r6, [r0, #12]
 800586c:	b13c      	cbz	r4, 800587e <_Bfree+0x3a>
 800586e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005870:	6862      	ldr	r2, [r4, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005878:	6021      	str	r1, [r4, #0]
 800587a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	08007b15 	.word	0x08007b15
 8005884:	08007bf8 	.word	0x08007bf8

08005888 <__multadd>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	690d      	ldr	r5, [r1, #16]
 800588e:	4607      	mov	r7, r0
 8005890:	460c      	mov	r4, r1
 8005892:	461e      	mov	r6, r3
 8005894:	f101 0c14 	add.w	ip, r1, #20
 8005898:	2000      	movs	r0, #0
 800589a:	f8dc 3000 	ldr.w	r3, [ip]
 800589e:	b299      	uxth	r1, r3
 80058a0:	fb02 6101 	mla	r1, r2, r1, r6
 80058a4:	0c1e      	lsrs	r6, r3, #16
 80058a6:	0c0b      	lsrs	r3, r1, #16
 80058a8:	fb02 3306 	mla	r3, r2, r6, r3
 80058ac:	b289      	uxth	r1, r1
 80058ae:	3001      	adds	r0, #1
 80058b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058b4:	4285      	cmp	r5, r0
 80058b6:	f84c 1b04 	str.w	r1, [ip], #4
 80058ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058be:	dcec      	bgt.n	800589a <__multadd+0x12>
 80058c0:	b30e      	cbz	r6, 8005906 <__multadd+0x7e>
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	42ab      	cmp	r3, r5
 80058c6:	dc19      	bgt.n	80058fc <__multadd+0x74>
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	4638      	mov	r0, r7
 80058cc:	3101      	adds	r1, #1
 80058ce:	f7ff ff79 	bl	80057c4 <_Balloc>
 80058d2:	4680      	mov	r8, r0
 80058d4:	b928      	cbnz	r0, 80058e2 <__multadd+0x5a>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <__multadd+0x84>)
 80058da:	480d      	ldr	r0, [pc, #52]	; (8005910 <__multadd+0x88>)
 80058dc:	21b5      	movs	r1, #181	; 0xb5
 80058de:	f000 fe6b 	bl	80065b8 <__assert_func>
 80058e2:	6922      	ldr	r2, [r4, #16]
 80058e4:	3202      	adds	r2, #2
 80058e6:	f104 010c 	add.w	r1, r4, #12
 80058ea:	0092      	lsls	r2, r2, #2
 80058ec:	300c      	adds	r0, #12
 80058ee:	f7ff ff5b 	bl	80057a8 <memcpy>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ffa5 	bl	8005844 <_Bfree>
 80058fa:	4644      	mov	r4, r8
 80058fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005900:	3501      	adds	r5, #1
 8005902:	615e      	str	r6, [r3, #20]
 8005904:	6125      	str	r5, [r4, #16]
 8005906:	4620      	mov	r0, r4
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	08007b87 	.word	0x08007b87
 8005910:	08007bf8 	.word	0x08007bf8

08005914 <__hi0bits>:
 8005914:	0c03      	lsrs	r3, r0, #16
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	b9d3      	cbnz	r3, 8005950 <__hi0bits+0x3c>
 800591a:	0400      	lsls	r0, r0, #16
 800591c:	2310      	movs	r3, #16
 800591e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005922:	bf04      	itt	eq
 8005924:	0200      	lsleq	r0, r0, #8
 8005926:	3308      	addeq	r3, #8
 8005928:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800592c:	bf04      	itt	eq
 800592e:	0100      	lsleq	r0, r0, #4
 8005930:	3304      	addeq	r3, #4
 8005932:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005936:	bf04      	itt	eq
 8005938:	0080      	lsleq	r0, r0, #2
 800593a:	3302      	addeq	r3, #2
 800593c:	2800      	cmp	r0, #0
 800593e:	db05      	blt.n	800594c <__hi0bits+0x38>
 8005940:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005944:	f103 0301 	add.w	r3, r3, #1
 8005948:	bf08      	it	eq
 800594a:	2320      	moveq	r3, #32
 800594c:	4618      	mov	r0, r3
 800594e:	4770      	bx	lr
 8005950:	2300      	movs	r3, #0
 8005952:	e7e4      	b.n	800591e <__hi0bits+0xa>

08005954 <__lo0bits>:
 8005954:	6803      	ldr	r3, [r0, #0]
 8005956:	f013 0207 	ands.w	r2, r3, #7
 800595a:	4601      	mov	r1, r0
 800595c:	d00b      	beq.n	8005976 <__lo0bits+0x22>
 800595e:	07da      	lsls	r2, r3, #31
 8005960:	d423      	bmi.n	80059aa <__lo0bits+0x56>
 8005962:	0798      	lsls	r0, r3, #30
 8005964:	bf49      	itett	mi
 8005966:	085b      	lsrmi	r3, r3, #1
 8005968:	089b      	lsrpl	r3, r3, #2
 800596a:	2001      	movmi	r0, #1
 800596c:	600b      	strmi	r3, [r1, #0]
 800596e:	bf5c      	itt	pl
 8005970:	600b      	strpl	r3, [r1, #0]
 8005972:	2002      	movpl	r0, #2
 8005974:	4770      	bx	lr
 8005976:	b298      	uxth	r0, r3
 8005978:	b9a8      	cbnz	r0, 80059a6 <__lo0bits+0x52>
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	2010      	movs	r0, #16
 800597e:	b2da      	uxtb	r2, r3
 8005980:	b90a      	cbnz	r2, 8005986 <__lo0bits+0x32>
 8005982:	3008      	adds	r0, #8
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	071a      	lsls	r2, r3, #28
 8005988:	bf04      	itt	eq
 800598a:	091b      	lsreq	r3, r3, #4
 800598c:	3004      	addeq	r0, #4
 800598e:	079a      	lsls	r2, r3, #30
 8005990:	bf04      	itt	eq
 8005992:	089b      	lsreq	r3, r3, #2
 8005994:	3002      	addeq	r0, #2
 8005996:	07da      	lsls	r2, r3, #31
 8005998:	d403      	bmi.n	80059a2 <__lo0bits+0x4e>
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	f100 0001 	add.w	r0, r0, #1
 80059a0:	d005      	beq.n	80059ae <__lo0bits+0x5a>
 80059a2:	600b      	str	r3, [r1, #0]
 80059a4:	4770      	bx	lr
 80059a6:	4610      	mov	r0, r2
 80059a8:	e7e9      	b.n	800597e <__lo0bits+0x2a>
 80059aa:	2000      	movs	r0, #0
 80059ac:	4770      	bx	lr
 80059ae:	2020      	movs	r0, #32
 80059b0:	4770      	bx	lr
	...

080059b4 <__i2b>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	2101      	movs	r1, #1
 80059ba:	f7ff ff03 	bl	80057c4 <_Balloc>
 80059be:	4602      	mov	r2, r0
 80059c0:	b928      	cbnz	r0, 80059ce <__i2b+0x1a>
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <__i2b+0x24>)
 80059c4:	4805      	ldr	r0, [pc, #20]	; (80059dc <__i2b+0x28>)
 80059c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80059ca:	f000 fdf5 	bl	80065b8 <__assert_func>
 80059ce:	2301      	movs	r3, #1
 80059d0:	6144      	str	r4, [r0, #20]
 80059d2:	6103      	str	r3, [r0, #16]
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	bf00      	nop
 80059d8:	08007b87 	.word	0x08007b87
 80059dc:	08007bf8 	.word	0x08007bf8

080059e0 <__multiply>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	4691      	mov	r9, r2
 80059e6:	690a      	ldr	r2, [r1, #16]
 80059e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	bfb8      	it	lt
 80059f0:	460b      	movlt	r3, r1
 80059f2:	460c      	mov	r4, r1
 80059f4:	bfbc      	itt	lt
 80059f6:	464c      	movlt	r4, r9
 80059f8:	4699      	movlt	r9, r3
 80059fa:	6927      	ldr	r7, [r4, #16]
 80059fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	6861      	ldr	r1, [r4, #4]
 8005a04:	eb07 060a 	add.w	r6, r7, sl
 8005a08:	42b3      	cmp	r3, r6
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	bfb8      	it	lt
 8005a0e:	3101      	addlt	r1, #1
 8005a10:	f7ff fed8 	bl	80057c4 <_Balloc>
 8005a14:	b930      	cbnz	r0, 8005a24 <__multiply+0x44>
 8005a16:	4602      	mov	r2, r0
 8005a18:	4b44      	ldr	r3, [pc, #272]	; (8005b2c <__multiply+0x14c>)
 8005a1a:	4845      	ldr	r0, [pc, #276]	; (8005b30 <__multiply+0x150>)
 8005a1c:	f240 115d 	movw	r1, #349	; 0x15d
 8005a20:	f000 fdca 	bl	80065b8 <__assert_func>
 8005a24:	f100 0514 	add.w	r5, r0, #20
 8005a28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	2200      	movs	r2, #0
 8005a30:	4543      	cmp	r3, r8
 8005a32:	d321      	bcc.n	8005a78 <__multiply+0x98>
 8005a34:	f104 0314 	add.w	r3, r4, #20
 8005a38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a3c:	f109 0314 	add.w	r3, r9, #20
 8005a40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a44:	9202      	str	r2, [sp, #8]
 8005a46:	1b3a      	subs	r2, r7, r4
 8005a48:	3a15      	subs	r2, #21
 8005a4a:	f022 0203 	bic.w	r2, r2, #3
 8005a4e:	3204      	adds	r2, #4
 8005a50:	f104 0115 	add.w	r1, r4, #21
 8005a54:	428f      	cmp	r7, r1
 8005a56:	bf38      	it	cc
 8005a58:	2204      	movcc	r2, #4
 8005a5a:	9201      	str	r2, [sp, #4]
 8005a5c:	9a02      	ldr	r2, [sp, #8]
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d80c      	bhi.n	8005a7e <__multiply+0x9e>
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	dd03      	ble.n	8005a70 <__multiply+0x90>
 8005a68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05a      	beq.n	8005b26 <__multiply+0x146>
 8005a70:	6106      	str	r6, [r0, #16]
 8005a72:	b005      	add	sp, #20
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a78:	f843 2b04 	str.w	r2, [r3], #4
 8005a7c:	e7d8      	b.n	8005a30 <__multiply+0x50>
 8005a7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a82:	f1ba 0f00 	cmp.w	sl, #0
 8005a86:	d024      	beq.n	8005ad2 <__multiply+0xf2>
 8005a88:	f104 0e14 	add.w	lr, r4, #20
 8005a8c:	46a9      	mov	r9, r5
 8005a8e:	f04f 0c00 	mov.w	ip, #0
 8005a92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005a96:	f8d9 1000 	ldr.w	r1, [r9]
 8005a9a:	fa1f fb82 	uxth.w	fp, r2
 8005a9e:	b289      	uxth	r1, r1
 8005aa0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005aa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8005aac:	4461      	add	r1, ip
 8005aae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ab2:	fb0a c20b 	mla	r2, sl, fp, ip
 8005ab6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005aba:	b289      	uxth	r1, r1
 8005abc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ac0:	4577      	cmp	r7, lr
 8005ac2:	f849 1b04 	str.w	r1, [r9], #4
 8005ac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005aca:	d8e2      	bhi.n	8005a92 <__multiply+0xb2>
 8005acc:	9a01      	ldr	r2, [sp, #4]
 8005ace:	f845 c002 	str.w	ip, [r5, r2]
 8005ad2:	9a03      	ldr	r2, [sp, #12]
 8005ad4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	f1b9 0f00 	cmp.w	r9, #0
 8005ade:	d020      	beq.n	8005b22 <__multiply+0x142>
 8005ae0:	6829      	ldr	r1, [r5, #0]
 8005ae2:	f104 0c14 	add.w	ip, r4, #20
 8005ae6:	46ae      	mov	lr, r5
 8005ae8:	f04f 0a00 	mov.w	sl, #0
 8005aec:	f8bc b000 	ldrh.w	fp, [ip]
 8005af0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005af4:	fb09 220b 	mla	r2, r9, fp, r2
 8005af8:	4492      	add	sl, r2
 8005afa:	b289      	uxth	r1, r1
 8005afc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b00:	f84e 1b04 	str.w	r1, [lr], #4
 8005b04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b08:	f8be 1000 	ldrh.w	r1, [lr]
 8005b0c:	0c12      	lsrs	r2, r2, #16
 8005b0e:	fb09 1102 	mla	r1, r9, r2, r1
 8005b12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005b16:	4567      	cmp	r7, ip
 8005b18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b1c:	d8e6      	bhi.n	8005aec <__multiply+0x10c>
 8005b1e:	9a01      	ldr	r2, [sp, #4]
 8005b20:	50a9      	str	r1, [r5, r2]
 8005b22:	3504      	adds	r5, #4
 8005b24:	e79a      	b.n	8005a5c <__multiply+0x7c>
 8005b26:	3e01      	subs	r6, #1
 8005b28:	e79c      	b.n	8005a64 <__multiply+0x84>
 8005b2a:	bf00      	nop
 8005b2c:	08007b87 	.word	0x08007b87
 8005b30:	08007bf8 	.word	0x08007bf8

08005b34 <__pow5mult>:
 8005b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b38:	4615      	mov	r5, r2
 8005b3a:	f012 0203 	ands.w	r2, r2, #3
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460f      	mov	r7, r1
 8005b42:	d007      	beq.n	8005b54 <__pow5mult+0x20>
 8005b44:	4c25      	ldr	r4, [pc, #148]	; (8005bdc <__pow5mult+0xa8>)
 8005b46:	3a01      	subs	r2, #1
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b4e:	f7ff fe9b 	bl	8005888 <__multadd>
 8005b52:	4607      	mov	r7, r0
 8005b54:	10ad      	asrs	r5, r5, #2
 8005b56:	d03d      	beq.n	8005bd4 <__pow5mult+0xa0>
 8005b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b5a:	b97c      	cbnz	r4, 8005b7c <__pow5mult+0x48>
 8005b5c:	2010      	movs	r0, #16
 8005b5e:	f7ff fe1b 	bl	8005798 <malloc>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6270      	str	r0, [r6, #36]	; 0x24
 8005b66:	b928      	cbnz	r0, 8005b74 <__pow5mult+0x40>
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <__pow5mult+0xac>)
 8005b6a:	481e      	ldr	r0, [pc, #120]	; (8005be4 <__pow5mult+0xb0>)
 8005b6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b70:	f000 fd22 	bl	80065b8 <__assert_func>
 8005b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b78:	6004      	str	r4, [r0, #0]
 8005b7a:	60c4      	str	r4, [r0, #12]
 8005b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b84:	b94c      	cbnz	r4, 8005b9a <__pow5mult+0x66>
 8005b86:	f240 2171 	movw	r1, #625	; 0x271
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff ff12 	bl	80059b4 <__i2b>
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b96:	4604      	mov	r4, r0
 8005b98:	6003      	str	r3, [r0, #0]
 8005b9a:	f04f 0900 	mov.w	r9, #0
 8005b9e:	07eb      	lsls	r3, r5, #31
 8005ba0:	d50a      	bpl.n	8005bb8 <__pow5mult+0x84>
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ff1a 	bl	80059e0 <__multiply>
 8005bac:	4639      	mov	r1, r7
 8005bae:	4680      	mov	r8, r0
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f7ff fe47 	bl	8005844 <_Bfree>
 8005bb6:	4647      	mov	r7, r8
 8005bb8:	106d      	asrs	r5, r5, #1
 8005bba:	d00b      	beq.n	8005bd4 <__pow5mult+0xa0>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	b938      	cbnz	r0, 8005bd0 <__pow5mult+0x9c>
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f7ff ff0b 	bl	80059e0 <__multiply>
 8005bca:	6020      	str	r0, [r4, #0]
 8005bcc:	f8c0 9000 	str.w	r9, [r0]
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	e7e4      	b.n	8005b9e <__pow5mult+0x6a>
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bda:	bf00      	nop
 8005bdc:	08007d48 	.word	0x08007d48
 8005be0:	08007b15 	.word	0x08007b15
 8005be4:	08007bf8 	.word	0x08007bf8

08005be8 <__lshift>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	460c      	mov	r4, r1
 8005bee:	6849      	ldr	r1, [r1, #4]
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	4691      	mov	r9, r2
 8005bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c00:	f108 0601 	add.w	r6, r8, #1
 8005c04:	42b3      	cmp	r3, r6
 8005c06:	db0b      	blt.n	8005c20 <__lshift+0x38>
 8005c08:	4638      	mov	r0, r7
 8005c0a:	f7ff fddb 	bl	80057c4 <_Balloc>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	b948      	cbnz	r0, 8005c26 <__lshift+0x3e>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <__lshift+0xd8>)
 8005c16:	482b      	ldr	r0, [pc, #172]	; (8005cc4 <__lshift+0xdc>)
 8005c18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c1c:	f000 fccc 	bl	80065b8 <__assert_func>
 8005c20:	3101      	adds	r1, #1
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	e7ee      	b.n	8005c04 <__lshift+0x1c>
 8005c26:	2300      	movs	r3, #0
 8005c28:	f100 0114 	add.w	r1, r0, #20
 8005c2c:	f100 0210 	add.w	r2, r0, #16
 8005c30:	4618      	mov	r0, r3
 8005c32:	4553      	cmp	r3, sl
 8005c34:	db37      	blt.n	8005ca6 <__lshift+0xbe>
 8005c36:	6920      	ldr	r0, [r4, #16]
 8005c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c3c:	f104 0314 	add.w	r3, r4, #20
 8005c40:	f019 091f 	ands.w	r9, r9, #31
 8005c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c4c:	d02f      	beq.n	8005cae <__lshift+0xc6>
 8005c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8005c52:	468a      	mov	sl, r1
 8005c54:	f04f 0c00 	mov.w	ip, #0
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	fa02 f209 	lsl.w	r2, r2, r9
 8005c5e:	ea42 020c 	orr.w	r2, r2, ip
 8005c62:	f84a 2b04 	str.w	r2, [sl], #4
 8005c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6a:	4298      	cmp	r0, r3
 8005c6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005c70:	d8f2      	bhi.n	8005c58 <__lshift+0x70>
 8005c72:	1b03      	subs	r3, r0, r4
 8005c74:	3b15      	subs	r3, #21
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	f104 0215 	add.w	r2, r4, #21
 8005c80:	4290      	cmp	r0, r2
 8005c82:	bf38      	it	cc
 8005c84:	2304      	movcc	r3, #4
 8005c86:	f841 c003 	str.w	ip, [r1, r3]
 8005c8a:	f1bc 0f00 	cmp.w	ip, #0
 8005c8e:	d001      	beq.n	8005c94 <__lshift+0xac>
 8005c90:	f108 0602 	add.w	r6, r8, #2
 8005c94:	3e01      	subs	r6, #1
 8005c96:	4638      	mov	r0, r7
 8005c98:	612e      	str	r6, [r5, #16]
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	f7ff fdd2 	bl	8005844 <_Bfree>
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005caa:	3301      	adds	r3, #1
 8005cac:	e7c1      	b.n	8005c32 <__lshift+0x4a>
 8005cae:	3904      	subs	r1, #4
 8005cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cb8:	4298      	cmp	r0, r3
 8005cba:	d8f9      	bhi.n	8005cb0 <__lshift+0xc8>
 8005cbc:	e7ea      	b.n	8005c94 <__lshift+0xac>
 8005cbe:	bf00      	nop
 8005cc0:	08007b87 	.word	0x08007b87
 8005cc4:	08007bf8 	.word	0x08007bf8

08005cc8 <__mcmp>:
 8005cc8:	b530      	push	{r4, r5, lr}
 8005cca:	6902      	ldr	r2, [r0, #16]
 8005ccc:	690c      	ldr	r4, [r1, #16]
 8005cce:	1b12      	subs	r2, r2, r4
 8005cd0:	d10e      	bne.n	8005cf0 <__mcmp+0x28>
 8005cd2:	f100 0314 	add.w	r3, r0, #20
 8005cd6:	3114      	adds	r1, #20
 8005cd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005cdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ce0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ce4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ce8:	42a5      	cmp	r5, r4
 8005cea:	d003      	beq.n	8005cf4 <__mcmp+0x2c>
 8005cec:	d305      	bcc.n	8005cfa <__mcmp+0x32>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	bd30      	pop	{r4, r5, pc}
 8005cf4:	4283      	cmp	r3, r0
 8005cf6:	d3f3      	bcc.n	8005ce0 <__mcmp+0x18>
 8005cf8:	e7fa      	b.n	8005cf0 <__mcmp+0x28>
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	e7f7      	b.n	8005cf0 <__mcmp+0x28>

08005d00 <__mdiff>:
 8005d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	460c      	mov	r4, r1
 8005d06:	4606      	mov	r6, r0
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	f7ff ffdb 	bl	8005cc8 <__mcmp>
 8005d12:	1e05      	subs	r5, r0, #0
 8005d14:	d110      	bne.n	8005d38 <__mdiff+0x38>
 8005d16:	4629      	mov	r1, r5
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff fd53 	bl	80057c4 <_Balloc>
 8005d1e:	b930      	cbnz	r0, 8005d2e <__mdiff+0x2e>
 8005d20:	4b3a      	ldr	r3, [pc, #232]	; (8005e0c <__mdiff+0x10c>)
 8005d22:	4602      	mov	r2, r0
 8005d24:	f240 2132 	movw	r1, #562	; 0x232
 8005d28:	4839      	ldr	r0, [pc, #228]	; (8005e10 <__mdiff+0x110>)
 8005d2a:	f000 fc45 	bl	80065b8 <__assert_func>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d38:	bfa4      	itt	ge
 8005d3a:	4643      	movge	r3, r8
 8005d3c:	46a0      	movge	r8, r4
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d44:	bfa6      	itte	ge
 8005d46:	461c      	movge	r4, r3
 8005d48:	2500      	movge	r5, #0
 8005d4a:	2501      	movlt	r5, #1
 8005d4c:	f7ff fd3a 	bl	80057c4 <_Balloc>
 8005d50:	b920      	cbnz	r0, 8005d5c <__mdiff+0x5c>
 8005d52:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <__mdiff+0x10c>)
 8005d54:	4602      	mov	r2, r0
 8005d56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d5a:	e7e5      	b.n	8005d28 <__mdiff+0x28>
 8005d5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d60:	6926      	ldr	r6, [r4, #16]
 8005d62:	60c5      	str	r5, [r0, #12]
 8005d64:	f104 0914 	add.w	r9, r4, #20
 8005d68:	f108 0514 	add.w	r5, r8, #20
 8005d6c:	f100 0e14 	add.w	lr, r0, #20
 8005d70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005d74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d78:	f108 0210 	add.w	r2, r8, #16
 8005d7c:	46f2      	mov	sl, lr
 8005d7e:	2100      	movs	r1, #0
 8005d80:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d88:	fa1f f883 	uxth.w	r8, r3
 8005d8c:	fa11 f18b 	uxtah	r1, r1, fp
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	eba1 0808 	sub.w	r8, r1, r8
 8005d96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d9e:	fa1f f888 	uxth.w	r8, r8
 8005da2:	1419      	asrs	r1, r3, #16
 8005da4:	454e      	cmp	r6, r9
 8005da6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005daa:	f84a 3b04 	str.w	r3, [sl], #4
 8005dae:	d8e7      	bhi.n	8005d80 <__mdiff+0x80>
 8005db0:	1b33      	subs	r3, r6, r4
 8005db2:	3b15      	subs	r3, #21
 8005db4:	f023 0303 	bic.w	r3, r3, #3
 8005db8:	3304      	adds	r3, #4
 8005dba:	3415      	adds	r4, #21
 8005dbc:	42a6      	cmp	r6, r4
 8005dbe:	bf38      	it	cc
 8005dc0:	2304      	movcc	r3, #4
 8005dc2:	441d      	add	r5, r3
 8005dc4:	4473      	add	r3, lr
 8005dc6:	469e      	mov	lr, r3
 8005dc8:	462e      	mov	r6, r5
 8005dca:	4566      	cmp	r6, ip
 8005dcc:	d30e      	bcc.n	8005dec <__mdiff+0xec>
 8005dce:	f10c 0203 	add.w	r2, ip, #3
 8005dd2:	1b52      	subs	r2, r2, r5
 8005dd4:	f022 0203 	bic.w	r2, r2, #3
 8005dd8:	3d03      	subs	r5, #3
 8005dda:	45ac      	cmp	ip, r5
 8005ddc:	bf38      	it	cc
 8005dde:	2200      	movcc	r2, #0
 8005de0:	441a      	add	r2, r3
 8005de2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005de6:	b17b      	cbz	r3, 8005e08 <__mdiff+0x108>
 8005de8:	6107      	str	r7, [r0, #16]
 8005dea:	e7a3      	b.n	8005d34 <__mdiff+0x34>
 8005dec:	f856 8b04 	ldr.w	r8, [r6], #4
 8005df0:	fa11 f288 	uxtah	r2, r1, r8
 8005df4:	1414      	asrs	r4, r2, #16
 8005df6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e00:	f84e 2b04 	str.w	r2, [lr], #4
 8005e04:	1421      	asrs	r1, r4, #16
 8005e06:	e7e0      	b.n	8005dca <__mdiff+0xca>
 8005e08:	3f01      	subs	r7, #1
 8005e0a:	e7ea      	b.n	8005de2 <__mdiff+0xe2>
 8005e0c:	08007b87 	.word	0x08007b87
 8005e10:	08007bf8 	.word	0x08007bf8

08005e14 <__d2b>:
 8005e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	4689      	mov	r9, r1
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	ec57 6b10 	vmov	r6, r7, d0
 8005e20:	4690      	mov	r8, r2
 8005e22:	f7ff fccf 	bl	80057c4 <_Balloc>
 8005e26:	4604      	mov	r4, r0
 8005e28:	b930      	cbnz	r0, 8005e38 <__d2b+0x24>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <__d2b+0xb0>)
 8005e2e:	4826      	ldr	r0, [pc, #152]	; (8005ec8 <__d2b+0xb4>)
 8005e30:	f240 310a 	movw	r1, #778	; 0x30a
 8005e34:	f000 fbc0 	bl	80065b8 <__assert_func>
 8005e38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005e3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e40:	bb35      	cbnz	r5, 8005e90 <__d2b+0x7c>
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	d028      	beq.n	8005e9a <__d2b+0x86>
 8005e48:	4668      	mov	r0, sp
 8005e4a:	9600      	str	r6, [sp, #0]
 8005e4c:	f7ff fd82 	bl	8005954 <__lo0bits>
 8005e50:	9900      	ldr	r1, [sp, #0]
 8005e52:	b300      	cbz	r0, 8005e96 <__d2b+0x82>
 8005e54:	9a01      	ldr	r2, [sp, #4]
 8005e56:	f1c0 0320 	rsb	r3, r0, #32
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	40c2      	lsrs	r2, r0
 8005e62:	6163      	str	r3, [r4, #20]
 8005e64:	9201      	str	r2, [sp, #4]
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	61a3      	str	r3, [r4, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf14      	ite	ne
 8005e6e:	2202      	movne	r2, #2
 8005e70:	2201      	moveq	r2, #1
 8005e72:	6122      	str	r2, [r4, #16]
 8005e74:	b1d5      	cbz	r5, 8005eac <__d2b+0x98>
 8005e76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e7a:	4405      	add	r5, r0
 8005e7c:	f8c9 5000 	str.w	r5, [r9]
 8005e80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e84:	f8c8 0000 	str.w	r0, [r8]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	b003      	add	sp, #12
 8005e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e94:	e7d5      	b.n	8005e42 <__d2b+0x2e>
 8005e96:	6161      	str	r1, [r4, #20]
 8005e98:	e7e5      	b.n	8005e66 <__d2b+0x52>
 8005e9a:	a801      	add	r0, sp, #4
 8005e9c:	f7ff fd5a 	bl	8005954 <__lo0bits>
 8005ea0:	9b01      	ldr	r3, [sp, #4]
 8005ea2:	6163      	str	r3, [r4, #20]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	6122      	str	r2, [r4, #16]
 8005ea8:	3020      	adds	r0, #32
 8005eaa:	e7e3      	b.n	8005e74 <__d2b+0x60>
 8005eac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005eb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005eb4:	f8c9 0000 	str.w	r0, [r9]
 8005eb8:	6918      	ldr	r0, [r3, #16]
 8005eba:	f7ff fd2b 	bl	8005914 <__hi0bits>
 8005ebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ec2:	e7df      	b.n	8005e84 <__d2b+0x70>
 8005ec4:	08007b87 	.word	0x08007b87
 8005ec8:	08007bf8 	.word	0x08007bf8

08005ecc <_calloc_r>:
 8005ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ece:	fba1 2402 	umull	r2, r4, r1, r2
 8005ed2:	b94c      	cbnz	r4, 8005ee8 <_calloc_r+0x1c>
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	9201      	str	r2, [sp, #4]
 8005ed8:	f000 f87a 	bl	8005fd0 <_malloc_r>
 8005edc:	9a01      	ldr	r2, [sp, #4]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b930      	cbnz	r0, 8005ef0 <_calloc_r+0x24>
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	b003      	add	sp, #12
 8005ee6:	bd30      	pop	{r4, r5, pc}
 8005ee8:	220c      	movs	r2, #12
 8005eea:	6002      	str	r2, [r0, #0]
 8005eec:	2500      	movs	r5, #0
 8005eee:	e7f8      	b.n	8005ee2 <_calloc_r+0x16>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	f7fe f84f 	bl	8003f94 <memset>
 8005ef6:	e7f4      	b.n	8005ee2 <_calloc_r+0x16>

08005ef8 <_free_r>:
 8005ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005efa:	2900      	cmp	r1, #0
 8005efc:	d044      	beq.n	8005f88 <_free_r+0x90>
 8005efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f02:	9001      	str	r0, [sp, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f1a1 0404 	sub.w	r4, r1, #4
 8005f0a:	bfb8      	it	lt
 8005f0c:	18e4      	addlt	r4, r4, r3
 8005f0e:	f000 fcdf 	bl	80068d0 <__malloc_lock>
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <_free_r+0x94>)
 8005f14:	9801      	ldr	r0, [sp, #4]
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	b933      	cbnz	r3, 8005f28 <_free_r+0x30>
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	6014      	str	r4, [r2, #0]
 8005f1e:	b003      	add	sp, #12
 8005f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f24:	f000 bcda 	b.w	80068dc <__malloc_unlock>
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d908      	bls.n	8005f3e <_free_r+0x46>
 8005f2c:	6825      	ldr	r5, [r4, #0]
 8005f2e:	1961      	adds	r1, r4, r5
 8005f30:	428b      	cmp	r3, r1
 8005f32:	bf01      	itttt	eq
 8005f34:	6819      	ldreq	r1, [r3, #0]
 8005f36:	685b      	ldreq	r3, [r3, #4]
 8005f38:	1949      	addeq	r1, r1, r5
 8005f3a:	6021      	streq	r1, [r4, #0]
 8005f3c:	e7ed      	b.n	8005f1a <_free_r+0x22>
 8005f3e:	461a      	mov	r2, r3
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b10b      	cbz	r3, 8005f48 <_free_r+0x50>
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d9fa      	bls.n	8005f3e <_free_r+0x46>
 8005f48:	6811      	ldr	r1, [r2, #0]
 8005f4a:	1855      	adds	r5, r2, r1
 8005f4c:	42a5      	cmp	r5, r4
 8005f4e:	d10b      	bne.n	8005f68 <_free_r+0x70>
 8005f50:	6824      	ldr	r4, [r4, #0]
 8005f52:	4421      	add	r1, r4
 8005f54:	1854      	adds	r4, r2, r1
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	6011      	str	r1, [r2, #0]
 8005f5a:	d1e0      	bne.n	8005f1e <_free_r+0x26>
 8005f5c:	681c      	ldr	r4, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	6053      	str	r3, [r2, #4]
 8005f62:	4421      	add	r1, r4
 8005f64:	6011      	str	r1, [r2, #0]
 8005f66:	e7da      	b.n	8005f1e <_free_r+0x26>
 8005f68:	d902      	bls.n	8005f70 <_free_r+0x78>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6003      	str	r3, [r0, #0]
 8005f6e:	e7d6      	b.n	8005f1e <_free_r+0x26>
 8005f70:	6825      	ldr	r5, [r4, #0]
 8005f72:	1961      	adds	r1, r4, r5
 8005f74:	428b      	cmp	r3, r1
 8005f76:	bf04      	itt	eq
 8005f78:	6819      	ldreq	r1, [r3, #0]
 8005f7a:	685b      	ldreq	r3, [r3, #4]
 8005f7c:	6063      	str	r3, [r4, #4]
 8005f7e:	bf04      	itt	eq
 8005f80:	1949      	addeq	r1, r1, r5
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	6054      	str	r4, [r2, #4]
 8005f86:	e7ca      	b.n	8005f1e <_free_r+0x26>
 8005f88:	b003      	add	sp, #12
 8005f8a:	bd30      	pop	{r4, r5, pc}
 8005f8c:	20000388 	.word	0x20000388

08005f90 <sbrk_aligned>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	4e0e      	ldr	r6, [pc, #56]	; (8005fcc <sbrk_aligned+0x3c>)
 8005f94:	460c      	mov	r4, r1
 8005f96:	6831      	ldr	r1, [r6, #0]
 8005f98:	4605      	mov	r5, r0
 8005f9a:	b911      	cbnz	r1, 8005fa2 <sbrk_aligned+0x12>
 8005f9c:	f000 f9e6 	bl	800636c <_sbrk_r>
 8005fa0:	6030      	str	r0, [r6, #0]
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f9e1 	bl	800636c <_sbrk_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	d00a      	beq.n	8005fc4 <sbrk_aligned+0x34>
 8005fae:	1cc4      	adds	r4, r0, #3
 8005fb0:	f024 0403 	bic.w	r4, r4, #3
 8005fb4:	42a0      	cmp	r0, r4
 8005fb6:	d007      	beq.n	8005fc8 <sbrk_aligned+0x38>
 8005fb8:	1a21      	subs	r1, r4, r0
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f9d6 	bl	800636c <_sbrk_r>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d101      	bne.n	8005fc8 <sbrk_aligned+0x38>
 8005fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8005fc8:	4620      	mov	r0, r4
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	2000038c 	.word	0x2000038c

08005fd0 <_malloc_r>:
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	1ccd      	adds	r5, r1, #3
 8005fd6:	f025 0503 	bic.w	r5, r5, #3
 8005fda:	3508      	adds	r5, #8
 8005fdc:	2d0c      	cmp	r5, #12
 8005fde:	bf38      	it	cc
 8005fe0:	250c      	movcc	r5, #12
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	db01      	blt.n	8005fec <_malloc_r+0x1c>
 8005fe8:	42a9      	cmp	r1, r5
 8005fea:	d905      	bls.n	8005ff8 <_malloc_r+0x28>
 8005fec:	230c      	movs	r3, #12
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	4e2e      	ldr	r6, [pc, #184]	; (80060b4 <_malloc_r+0xe4>)
 8005ffa:	f000 fc69 	bl	80068d0 <__malloc_lock>
 8005ffe:	6833      	ldr	r3, [r6, #0]
 8006000:	461c      	mov	r4, r3
 8006002:	bb34      	cbnz	r4, 8006052 <_malloc_r+0x82>
 8006004:	4629      	mov	r1, r5
 8006006:	4638      	mov	r0, r7
 8006008:	f7ff ffc2 	bl	8005f90 <sbrk_aligned>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	4604      	mov	r4, r0
 8006010:	d14d      	bne.n	80060ae <_malloc_r+0xde>
 8006012:	6834      	ldr	r4, [r6, #0]
 8006014:	4626      	mov	r6, r4
 8006016:	2e00      	cmp	r6, #0
 8006018:	d140      	bne.n	800609c <_malloc_r+0xcc>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	4631      	mov	r1, r6
 800601e:	4638      	mov	r0, r7
 8006020:	eb04 0803 	add.w	r8, r4, r3
 8006024:	f000 f9a2 	bl	800636c <_sbrk_r>
 8006028:	4580      	cmp	r8, r0
 800602a:	d13a      	bne.n	80060a2 <_malloc_r+0xd2>
 800602c:	6821      	ldr	r1, [r4, #0]
 800602e:	3503      	adds	r5, #3
 8006030:	1a6d      	subs	r5, r5, r1
 8006032:	f025 0503 	bic.w	r5, r5, #3
 8006036:	3508      	adds	r5, #8
 8006038:	2d0c      	cmp	r5, #12
 800603a:	bf38      	it	cc
 800603c:	250c      	movcc	r5, #12
 800603e:	4629      	mov	r1, r5
 8006040:	4638      	mov	r0, r7
 8006042:	f7ff ffa5 	bl	8005f90 <sbrk_aligned>
 8006046:	3001      	adds	r0, #1
 8006048:	d02b      	beq.n	80060a2 <_malloc_r+0xd2>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	442b      	add	r3, r5
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	e00e      	b.n	8006070 <_malloc_r+0xa0>
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	1b52      	subs	r2, r2, r5
 8006056:	d41e      	bmi.n	8006096 <_malloc_r+0xc6>
 8006058:	2a0b      	cmp	r2, #11
 800605a:	d916      	bls.n	800608a <_malloc_r+0xba>
 800605c:	1961      	adds	r1, r4, r5
 800605e:	42a3      	cmp	r3, r4
 8006060:	6025      	str	r5, [r4, #0]
 8006062:	bf18      	it	ne
 8006064:	6059      	strne	r1, [r3, #4]
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	bf08      	it	eq
 800606a:	6031      	streq	r1, [r6, #0]
 800606c:	5162      	str	r2, [r4, r5]
 800606e:	604b      	str	r3, [r1, #4]
 8006070:	4638      	mov	r0, r7
 8006072:	f104 060b 	add.w	r6, r4, #11
 8006076:	f000 fc31 	bl	80068dc <__malloc_unlock>
 800607a:	f026 0607 	bic.w	r6, r6, #7
 800607e:	1d23      	adds	r3, r4, #4
 8006080:	1af2      	subs	r2, r6, r3
 8006082:	d0b6      	beq.n	8005ff2 <_malloc_r+0x22>
 8006084:	1b9b      	subs	r3, r3, r6
 8006086:	50a3      	str	r3, [r4, r2]
 8006088:	e7b3      	b.n	8005ff2 <_malloc_r+0x22>
 800608a:	6862      	ldr	r2, [r4, #4]
 800608c:	42a3      	cmp	r3, r4
 800608e:	bf0c      	ite	eq
 8006090:	6032      	streq	r2, [r6, #0]
 8006092:	605a      	strne	r2, [r3, #4]
 8006094:	e7ec      	b.n	8006070 <_malloc_r+0xa0>
 8006096:	4623      	mov	r3, r4
 8006098:	6864      	ldr	r4, [r4, #4]
 800609a:	e7b2      	b.n	8006002 <_malloc_r+0x32>
 800609c:	4634      	mov	r4, r6
 800609e:	6876      	ldr	r6, [r6, #4]
 80060a0:	e7b9      	b.n	8006016 <_malloc_r+0x46>
 80060a2:	230c      	movs	r3, #12
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	4638      	mov	r0, r7
 80060a8:	f000 fc18 	bl	80068dc <__malloc_unlock>
 80060ac:	e7a1      	b.n	8005ff2 <_malloc_r+0x22>
 80060ae:	6025      	str	r5, [r4, #0]
 80060b0:	e7de      	b.n	8006070 <_malloc_r+0xa0>
 80060b2:	bf00      	nop
 80060b4:	20000388 	.word	0x20000388

080060b8 <__sfputc_r>:
 80060b8:	6893      	ldr	r3, [r2, #8]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	b410      	push	{r4}
 80060c0:	6093      	str	r3, [r2, #8]
 80060c2:	da08      	bge.n	80060d6 <__sfputc_r+0x1e>
 80060c4:	6994      	ldr	r4, [r2, #24]
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	db01      	blt.n	80060ce <__sfputc_r+0x16>
 80060ca:	290a      	cmp	r1, #10
 80060cc:	d103      	bne.n	80060d6 <__sfputc_r+0x1e>
 80060ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060d2:	f000 b99f 	b.w	8006414 <__swbuf_r>
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	1c58      	adds	r0, r3, #1
 80060da:	6010      	str	r0, [r2, #0]
 80060dc:	7019      	strb	r1, [r3, #0]
 80060de:	4608      	mov	r0, r1
 80060e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <__sfputs_r>:
 80060e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	18d5      	adds	r5, r2, r3
 80060f0:	42ac      	cmp	r4, r5
 80060f2:	d101      	bne.n	80060f8 <__sfputs_r+0x12>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e007      	b.n	8006108 <__sfputs_r+0x22>
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	463a      	mov	r2, r7
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ffda 	bl	80060b8 <__sfputc_r>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d1f3      	bne.n	80060f0 <__sfputs_r+0xa>
 8006108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800610c <_vfiprintf_r>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	460d      	mov	r5, r1
 8006112:	b09d      	sub	sp, #116	; 0x74
 8006114:	4614      	mov	r4, r2
 8006116:	4698      	mov	r8, r3
 8006118:	4606      	mov	r6, r0
 800611a:	b118      	cbz	r0, 8006124 <_vfiprintf_r+0x18>
 800611c:	6983      	ldr	r3, [r0, #24]
 800611e:	b90b      	cbnz	r3, 8006124 <_vfiprintf_r+0x18>
 8006120:	f7ff fa94 	bl	800564c <__sinit>
 8006124:	4b89      	ldr	r3, [pc, #548]	; (800634c <_vfiprintf_r+0x240>)
 8006126:	429d      	cmp	r5, r3
 8006128:	d11b      	bne.n	8006162 <_vfiprintf_r+0x56>
 800612a:	6875      	ldr	r5, [r6, #4]
 800612c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x32>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x32>
 8006138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800613a:	f7ff fb2a 	bl	8005792 <__retarget_lock_acquire_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	071b      	lsls	r3, r3, #28
 8006142:	d501      	bpl.n	8006148 <_vfiprintf_r+0x3c>
 8006144:	692b      	ldr	r3, [r5, #16]
 8006146:	b9eb      	cbnz	r3, 8006184 <_vfiprintf_r+0x78>
 8006148:	4629      	mov	r1, r5
 800614a:	4630      	mov	r0, r6
 800614c:	f000 f9c6 	bl	80064dc <__swsetup_r>
 8006150:	b1c0      	cbz	r0, 8006184 <_vfiprintf_r+0x78>
 8006152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006154:	07dc      	lsls	r4, r3, #31
 8006156:	d50e      	bpl.n	8006176 <_vfiprintf_r+0x6a>
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	b01d      	add	sp, #116	; 0x74
 800615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006162:	4b7b      	ldr	r3, [pc, #492]	; (8006350 <_vfiprintf_r+0x244>)
 8006164:	429d      	cmp	r5, r3
 8006166:	d101      	bne.n	800616c <_vfiprintf_r+0x60>
 8006168:	68b5      	ldr	r5, [r6, #8]
 800616a:	e7df      	b.n	800612c <_vfiprintf_r+0x20>
 800616c:	4b79      	ldr	r3, [pc, #484]	; (8006354 <_vfiprintf_r+0x248>)
 800616e:	429d      	cmp	r5, r3
 8006170:	bf08      	it	eq
 8006172:	68f5      	ldreq	r5, [r6, #12]
 8006174:	e7da      	b.n	800612c <_vfiprintf_r+0x20>
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	0598      	lsls	r0, r3, #22
 800617a:	d4ed      	bmi.n	8006158 <_vfiprintf_r+0x4c>
 800617c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800617e:	f7ff fb09 	bl	8005794 <__retarget_lock_release_recursive>
 8006182:	e7e9      	b.n	8006158 <_vfiprintf_r+0x4c>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
 8006188:	2320      	movs	r3, #32
 800618a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800618e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006192:	2330      	movs	r3, #48	; 0x30
 8006194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006358 <_vfiprintf_r+0x24c>
 8006198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800619c:	f04f 0901 	mov.w	r9, #1
 80061a0:	4623      	mov	r3, r4
 80061a2:	469a      	mov	sl, r3
 80061a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a8:	b10a      	cbz	r2, 80061ae <_vfiprintf_r+0xa2>
 80061aa:	2a25      	cmp	r2, #37	; 0x25
 80061ac:	d1f9      	bne.n	80061a2 <_vfiprintf_r+0x96>
 80061ae:	ebba 0b04 	subs.w	fp, sl, r4
 80061b2:	d00b      	beq.n	80061cc <_vfiprintf_r+0xc0>
 80061b4:	465b      	mov	r3, fp
 80061b6:	4622      	mov	r2, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ff93 	bl	80060e6 <__sfputs_r>
 80061c0:	3001      	adds	r0, #1
 80061c2:	f000 80aa 	beq.w	800631a <_vfiprintf_r+0x20e>
 80061c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c8:	445a      	add	r2, fp
 80061ca:	9209      	str	r2, [sp, #36]	; 0x24
 80061cc:	f89a 3000 	ldrb.w	r3, [sl]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80a2 	beq.w	800631a <_vfiprintf_r+0x20e>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e0:	f10a 0a01 	add.w	sl, sl, #1
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ec:	931a      	str	r3, [sp, #104]	; 0x68
 80061ee:	4654      	mov	r4, sl
 80061f0:	2205      	movs	r2, #5
 80061f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f6:	4858      	ldr	r0, [pc, #352]	; (8006358 <_vfiprintf_r+0x24c>)
 80061f8:	f7f9 fff2 	bl	80001e0 <memchr>
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	b9d8      	cbnz	r0, 8006238 <_vfiprintf_r+0x12c>
 8006200:	06d1      	lsls	r1, r2, #27
 8006202:	bf44      	itt	mi
 8006204:	2320      	movmi	r3, #32
 8006206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800620a:	0713      	lsls	r3, r2, #28
 800620c:	bf44      	itt	mi
 800620e:	232b      	movmi	r3, #43	; 0x2b
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006214:	f89a 3000 	ldrb.w	r3, [sl]
 8006218:	2b2a      	cmp	r3, #42	; 0x2a
 800621a:	d015      	beq.n	8006248 <_vfiprintf_r+0x13c>
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	4654      	mov	r4, sl
 8006220:	2000      	movs	r0, #0
 8006222:	f04f 0c0a 	mov.w	ip, #10
 8006226:	4621      	mov	r1, r4
 8006228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800622c:	3b30      	subs	r3, #48	; 0x30
 800622e:	2b09      	cmp	r3, #9
 8006230:	d94e      	bls.n	80062d0 <_vfiprintf_r+0x1c4>
 8006232:	b1b0      	cbz	r0, 8006262 <_vfiprintf_r+0x156>
 8006234:	9207      	str	r2, [sp, #28]
 8006236:	e014      	b.n	8006262 <_vfiprintf_r+0x156>
 8006238:	eba0 0308 	sub.w	r3, r0, r8
 800623c:	fa09 f303 	lsl.w	r3, r9, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	46a2      	mov	sl, r4
 8006246:	e7d2      	b.n	80061ee <_vfiprintf_r+0xe2>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	1d19      	adds	r1, r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	9103      	str	r1, [sp, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	bfbb      	ittet	lt
 8006254:	425b      	neglt	r3, r3
 8006256:	f042 0202 	orrlt.w	r2, r2, #2
 800625a:	9307      	strge	r3, [sp, #28]
 800625c:	9307      	strlt	r3, [sp, #28]
 800625e:	bfb8      	it	lt
 8006260:	9204      	strlt	r2, [sp, #16]
 8006262:	7823      	ldrb	r3, [r4, #0]
 8006264:	2b2e      	cmp	r3, #46	; 0x2e
 8006266:	d10c      	bne.n	8006282 <_vfiprintf_r+0x176>
 8006268:	7863      	ldrb	r3, [r4, #1]
 800626a:	2b2a      	cmp	r3, #42	; 0x2a
 800626c:	d135      	bne.n	80062da <_vfiprintf_r+0x1ce>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	9203      	str	r2, [sp, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	f04f 33ff 	movlt.w	r3, #4294967295
 800627e:	3402      	adds	r4, #2
 8006280:	9305      	str	r3, [sp, #20]
 8006282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006368 <_vfiprintf_r+0x25c>
 8006286:	7821      	ldrb	r1, [r4, #0]
 8006288:	2203      	movs	r2, #3
 800628a:	4650      	mov	r0, sl
 800628c:	f7f9 ffa8 	bl	80001e0 <memchr>
 8006290:	b140      	cbz	r0, 80062a4 <_vfiprintf_r+0x198>
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	eba0 000a 	sub.w	r0, r0, sl
 8006298:	fa03 f000 	lsl.w	r0, r3, r0
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	4303      	orrs	r3, r0
 80062a0:	3401      	adds	r4, #1
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a8:	482c      	ldr	r0, [pc, #176]	; (800635c <_vfiprintf_r+0x250>)
 80062aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ae:	2206      	movs	r2, #6
 80062b0:	f7f9 ff96 	bl	80001e0 <memchr>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d03f      	beq.n	8006338 <_vfiprintf_r+0x22c>
 80062b8:	4b29      	ldr	r3, [pc, #164]	; (8006360 <_vfiprintf_r+0x254>)
 80062ba:	bb1b      	cbnz	r3, 8006304 <_vfiprintf_r+0x1f8>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	3307      	adds	r3, #7
 80062c0:	f023 0307 	bic.w	r3, r3, #7
 80062c4:	3308      	adds	r3, #8
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ca:	443b      	add	r3, r7
 80062cc:	9309      	str	r3, [sp, #36]	; 0x24
 80062ce:	e767      	b.n	80061a0 <_vfiprintf_r+0x94>
 80062d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80062d4:	460c      	mov	r4, r1
 80062d6:	2001      	movs	r0, #1
 80062d8:	e7a5      	b.n	8006226 <_vfiprintf_r+0x11a>
 80062da:	2300      	movs	r3, #0
 80062dc:	3401      	adds	r4, #1
 80062de:	9305      	str	r3, [sp, #20]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f04f 0c0a 	mov.w	ip, #10
 80062e6:	4620      	mov	r0, r4
 80062e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ec:	3a30      	subs	r2, #48	; 0x30
 80062ee:	2a09      	cmp	r2, #9
 80062f0:	d903      	bls.n	80062fa <_vfiprintf_r+0x1ee>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0c5      	beq.n	8006282 <_vfiprintf_r+0x176>
 80062f6:	9105      	str	r1, [sp, #20]
 80062f8:	e7c3      	b.n	8006282 <_vfiprintf_r+0x176>
 80062fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80062fe:	4604      	mov	r4, r0
 8006300:	2301      	movs	r3, #1
 8006302:	e7f0      	b.n	80062e6 <_vfiprintf_r+0x1da>
 8006304:	ab03      	add	r3, sp, #12
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	462a      	mov	r2, r5
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <_vfiprintf_r+0x258>)
 800630c:	a904      	add	r1, sp, #16
 800630e:	4630      	mov	r0, r6
 8006310:	f7fd fee8 	bl	80040e4 <_printf_float>
 8006314:	4607      	mov	r7, r0
 8006316:	1c78      	adds	r0, r7, #1
 8006318:	d1d6      	bne.n	80062c8 <_vfiprintf_r+0x1bc>
 800631a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631c:	07d9      	lsls	r1, r3, #31
 800631e:	d405      	bmi.n	800632c <_vfiprintf_r+0x220>
 8006320:	89ab      	ldrh	r3, [r5, #12]
 8006322:	059a      	lsls	r2, r3, #22
 8006324:	d402      	bmi.n	800632c <_vfiprintf_r+0x220>
 8006326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006328:	f7ff fa34 	bl	8005794 <__retarget_lock_release_recursive>
 800632c:	89ab      	ldrh	r3, [r5, #12]
 800632e:	065b      	lsls	r3, r3, #25
 8006330:	f53f af12 	bmi.w	8006158 <_vfiprintf_r+0x4c>
 8006334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006336:	e711      	b.n	800615c <_vfiprintf_r+0x50>
 8006338:	ab03      	add	r3, sp, #12
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	462a      	mov	r2, r5
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <_vfiprintf_r+0x258>)
 8006340:	a904      	add	r1, sp, #16
 8006342:	4630      	mov	r0, r6
 8006344:	f7fe f972 	bl	800462c <_printf_i>
 8006348:	e7e4      	b.n	8006314 <_vfiprintf_r+0x208>
 800634a:	bf00      	nop
 800634c:	08007bb8 	.word	0x08007bb8
 8006350:	08007bd8 	.word	0x08007bd8
 8006354:	08007b98 	.word	0x08007b98
 8006358:	08007d54 	.word	0x08007d54
 800635c:	08007d5e 	.word	0x08007d5e
 8006360:	080040e5 	.word	0x080040e5
 8006364:	080060e7 	.word	0x080060e7
 8006368:	08007d5a 	.word	0x08007d5a

0800636c <_sbrk_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d06      	ldr	r5, [pc, #24]	; (8006388 <_sbrk_r+0x1c>)
 8006370:	2300      	movs	r3, #0
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	f7fb fbe0 	bl	8001b3c <_sbrk>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_sbrk_r+0x1a>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_sbrk_r+0x1a>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	20000390 	.word	0x20000390

0800638c <__sread>:
 800638c:	b510      	push	{r4, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	f000 faa8 	bl	80068e8 <_read_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	bfab      	itete	ge
 800639c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800639e:	89a3      	ldrhlt	r3, [r4, #12]
 80063a0:	181b      	addge	r3, r3, r0
 80063a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063a6:	bfac      	ite	ge
 80063a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063aa:	81a3      	strhlt	r3, [r4, #12]
 80063ac:	bd10      	pop	{r4, pc}

080063ae <__swrite>:
 80063ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	461f      	mov	r7, r3
 80063b4:	898b      	ldrh	r3, [r1, #12]
 80063b6:	05db      	lsls	r3, r3, #23
 80063b8:	4605      	mov	r5, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	4616      	mov	r6, r2
 80063be:	d505      	bpl.n	80063cc <__swrite+0x1e>
 80063c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c4:	2302      	movs	r3, #2
 80063c6:	2200      	movs	r2, #0
 80063c8:	f000 f9f8 	bl	80067bc <_lseek_r>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	4632      	mov	r2, r6
 80063da:	463b      	mov	r3, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e2:	f000 b869 	b.w	80064b8 <_write_r>

080063e6 <__sseek>:
 80063e6:	b510      	push	{r4, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ee:	f000 f9e5 	bl	80067bc <_lseek_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	bf15      	itete	ne
 80063f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006402:	81a3      	strheq	r3, [r4, #12]
 8006404:	bf18      	it	ne
 8006406:	81a3      	strhne	r3, [r4, #12]
 8006408:	bd10      	pop	{r4, pc}

0800640a <__sclose>:
 800640a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640e:	f000 b8f1 	b.w	80065f4 <_close_r>
	...

08006414 <__swbuf_r>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	460e      	mov	r6, r1
 8006418:	4614      	mov	r4, r2
 800641a:	4605      	mov	r5, r0
 800641c:	b118      	cbz	r0, 8006426 <__swbuf_r+0x12>
 800641e:	6983      	ldr	r3, [r0, #24]
 8006420:	b90b      	cbnz	r3, 8006426 <__swbuf_r+0x12>
 8006422:	f7ff f913 	bl	800564c <__sinit>
 8006426:	4b21      	ldr	r3, [pc, #132]	; (80064ac <__swbuf_r+0x98>)
 8006428:	429c      	cmp	r4, r3
 800642a:	d12b      	bne.n	8006484 <__swbuf_r+0x70>
 800642c:	686c      	ldr	r4, [r5, #4]
 800642e:	69a3      	ldr	r3, [r4, #24]
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	071a      	lsls	r2, r3, #28
 8006436:	d52f      	bpl.n	8006498 <__swbuf_r+0x84>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	b36b      	cbz	r3, 8006498 <__swbuf_r+0x84>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	1ac0      	subs	r0, r0, r3
 8006442:	6963      	ldr	r3, [r4, #20]
 8006444:	b2f6      	uxtb	r6, r6
 8006446:	4283      	cmp	r3, r0
 8006448:	4637      	mov	r7, r6
 800644a:	dc04      	bgt.n	8006456 <__swbuf_r+0x42>
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f000 f966 	bl	8006720 <_fflush_r>
 8006454:	bb30      	cbnz	r0, 80064a4 <__swbuf_r+0x90>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	3b01      	subs	r3, #1
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	701e      	strb	r6, [r3, #0]
 8006464:	6963      	ldr	r3, [r4, #20]
 8006466:	3001      	adds	r0, #1
 8006468:	4283      	cmp	r3, r0
 800646a:	d004      	beq.n	8006476 <__swbuf_r+0x62>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d506      	bpl.n	8006480 <__swbuf_r+0x6c>
 8006472:	2e0a      	cmp	r6, #10
 8006474:	d104      	bne.n	8006480 <__swbuf_r+0x6c>
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f000 f951 	bl	8006720 <_fflush_r>
 800647e:	b988      	cbnz	r0, 80064a4 <__swbuf_r+0x90>
 8006480:	4638      	mov	r0, r7
 8006482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <__swbuf_r+0x9c>)
 8006486:	429c      	cmp	r4, r3
 8006488:	d101      	bne.n	800648e <__swbuf_r+0x7a>
 800648a:	68ac      	ldr	r4, [r5, #8]
 800648c:	e7cf      	b.n	800642e <__swbuf_r+0x1a>
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <__swbuf_r+0xa0>)
 8006490:	429c      	cmp	r4, r3
 8006492:	bf08      	it	eq
 8006494:	68ec      	ldreq	r4, [r5, #12]
 8006496:	e7ca      	b.n	800642e <__swbuf_r+0x1a>
 8006498:	4621      	mov	r1, r4
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f81e 	bl	80064dc <__swsetup_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d0cb      	beq.n	800643c <__swbuf_r+0x28>
 80064a4:	f04f 37ff 	mov.w	r7, #4294967295
 80064a8:	e7ea      	b.n	8006480 <__swbuf_r+0x6c>
 80064aa:	bf00      	nop
 80064ac:	08007bb8 	.word	0x08007bb8
 80064b0:	08007bd8 	.word	0x08007bd8
 80064b4:	08007b98 	.word	0x08007b98

080064b8 <_write_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d07      	ldr	r5, [pc, #28]	; (80064d8 <_write_r+0x20>)
 80064bc:	4604      	mov	r4, r0
 80064be:	4608      	mov	r0, r1
 80064c0:	4611      	mov	r1, r2
 80064c2:	2200      	movs	r2, #0
 80064c4:	602a      	str	r2, [r5, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	f7fb fae7 	bl	8001a9a <_write>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_write_r+0x1e>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_write_r+0x1e>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20000390 	.word	0x20000390

080064dc <__swsetup_r>:
 80064dc:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <__swsetup_r+0xcc>)
 80064de:	b570      	push	{r4, r5, r6, lr}
 80064e0:	681d      	ldr	r5, [r3, #0]
 80064e2:	4606      	mov	r6, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	b125      	cbz	r5, 80064f2 <__swsetup_r+0x16>
 80064e8:	69ab      	ldr	r3, [r5, #24]
 80064ea:	b913      	cbnz	r3, 80064f2 <__swsetup_r+0x16>
 80064ec:	4628      	mov	r0, r5
 80064ee:	f7ff f8ad 	bl	800564c <__sinit>
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <__swsetup_r+0xd0>)
 80064f4:	429c      	cmp	r4, r3
 80064f6:	d10f      	bne.n	8006518 <__swsetup_r+0x3c>
 80064f8:	686c      	ldr	r4, [r5, #4]
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006500:	0719      	lsls	r1, r3, #28
 8006502:	d42c      	bmi.n	800655e <__swsetup_r+0x82>
 8006504:	06dd      	lsls	r5, r3, #27
 8006506:	d411      	bmi.n	800652c <__swsetup_r+0x50>
 8006508:	2309      	movs	r3, #9
 800650a:	6033      	str	r3, [r6, #0]
 800650c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	f04f 30ff 	mov.w	r0, #4294967295
 8006516:	e03e      	b.n	8006596 <__swsetup_r+0xba>
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <__swsetup_r+0xd4>)
 800651a:	429c      	cmp	r4, r3
 800651c:	d101      	bne.n	8006522 <__swsetup_r+0x46>
 800651e:	68ac      	ldr	r4, [r5, #8]
 8006520:	e7eb      	b.n	80064fa <__swsetup_r+0x1e>
 8006522:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <__swsetup_r+0xd8>)
 8006524:	429c      	cmp	r4, r3
 8006526:	bf08      	it	eq
 8006528:	68ec      	ldreq	r4, [r5, #12]
 800652a:	e7e6      	b.n	80064fa <__swsetup_r+0x1e>
 800652c:	0758      	lsls	r0, r3, #29
 800652e:	d512      	bpl.n	8006556 <__swsetup_r+0x7a>
 8006530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006532:	b141      	cbz	r1, 8006546 <__swsetup_r+0x6a>
 8006534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006538:	4299      	cmp	r1, r3
 800653a:	d002      	beq.n	8006542 <__swsetup_r+0x66>
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff fcdb 	bl	8005ef8 <_free_r>
 8006542:	2300      	movs	r3, #0
 8006544:	6363      	str	r3, [r4, #52]	; 0x34
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	2300      	movs	r3, #0
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f043 0308 	orr.w	r3, r3, #8
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	b94b      	cbnz	r3, 8006576 <__swsetup_r+0x9a>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656c:	d003      	beq.n	8006576 <__swsetup_r+0x9a>
 800656e:	4621      	mov	r1, r4
 8006570:	4630      	mov	r0, r6
 8006572:	f000 f95b 	bl	800682c <__smakebuf_r>
 8006576:	89a0      	ldrh	r0, [r4, #12]
 8006578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800657c:	f010 0301 	ands.w	r3, r0, #1
 8006580:	d00a      	beq.n	8006598 <__swsetup_r+0xbc>
 8006582:	2300      	movs	r3, #0
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	6963      	ldr	r3, [r4, #20]
 8006588:	425b      	negs	r3, r3
 800658a:	61a3      	str	r3, [r4, #24]
 800658c:	6923      	ldr	r3, [r4, #16]
 800658e:	b943      	cbnz	r3, 80065a2 <__swsetup_r+0xc6>
 8006590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006594:	d1ba      	bne.n	800650c <__swsetup_r+0x30>
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	0781      	lsls	r1, r0, #30
 800659a:	bf58      	it	pl
 800659c:	6963      	ldrpl	r3, [r4, #20]
 800659e:	60a3      	str	r3, [r4, #8]
 80065a0:	e7f4      	b.n	800658c <__swsetup_r+0xb0>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e7f7      	b.n	8006596 <__swsetup_r+0xba>
 80065a6:	bf00      	nop
 80065a8:	20000044 	.word	0x20000044
 80065ac:	08007bb8 	.word	0x08007bb8
 80065b0:	08007bd8 	.word	0x08007bd8
 80065b4:	08007b98 	.word	0x08007b98

080065b8 <__assert_func>:
 80065b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065ba:	4614      	mov	r4, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <__assert_func+0x2c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4605      	mov	r5, r0
 80065c4:	68d8      	ldr	r0, [r3, #12]
 80065c6:	b14c      	cbz	r4, 80065dc <__assert_func+0x24>
 80065c8:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <__assert_func+0x30>)
 80065ca:	9100      	str	r1, [sp, #0]
 80065cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065d0:	4906      	ldr	r1, [pc, #24]	; (80065ec <__assert_func+0x34>)
 80065d2:	462b      	mov	r3, r5
 80065d4:	f000 f8e0 	bl	8006798 <fiprintf>
 80065d8:	f000 f9a5 	bl	8006926 <abort>
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <__assert_func+0x38>)
 80065de:	461c      	mov	r4, r3
 80065e0:	e7f3      	b.n	80065ca <__assert_func+0x12>
 80065e2:	bf00      	nop
 80065e4:	20000044 	.word	0x20000044
 80065e8:	08007d65 	.word	0x08007d65
 80065ec:	08007d72 	.word	0x08007d72
 80065f0:	08007da0 	.word	0x08007da0

080065f4 <_close_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d06      	ldr	r5, [pc, #24]	; (8006610 <_close_r+0x1c>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	f7fb fa67 	bl	8001ad2 <_close>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_close_r+0x1a>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_close_r+0x1a>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20000390 	.word	0x20000390

08006614 <__sflush_r>:
 8006614:	898a      	ldrh	r2, [r1, #12]
 8006616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661a:	4605      	mov	r5, r0
 800661c:	0710      	lsls	r0, r2, #28
 800661e:	460c      	mov	r4, r1
 8006620:	d458      	bmi.n	80066d4 <__sflush_r+0xc0>
 8006622:	684b      	ldr	r3, [r1, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	dc05      	bgt.n	8006634 <__sflush_r+0x20>
 8006628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	dc02      	bgt.n	8006634 <__sflush_r+0x20>
 800662e:	2000      	movs	r0, #0
 8006630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006636:	2e00      	cmp	r6, #0
 8006638:	d0f9      	beq.n	800662e <__sflush_r+0x1a>
 800663a:	2300      	movs	r3, #0
 800663c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006640:	682f      	ldr	r7, [r5, #0]
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	d032      	beq.n	80066ac <__sflush_r+0x98>
 8006646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	075a      	lsls	r2, r3, #29
 800664c:	d505      	bpl.n	800665a <__sflush_r+0x46>
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	1ac0      	subs	r0, r0, r3
 8006652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006654:	b10b      	cbz	r3, 800665a <__sflush_r+0x46>
 8006656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	2300      	movs	r3, #0
 800665c:	4602      	mov	r2, r0
 800665e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006660:	6a21      	ldr	r1, [r4, #32]
 8006662:	4628      	mov	r0, r5
 8006664:	47b0      	blx	r6
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	d106      	bne.n	800667a <__sflush_r+0x66>
 800666c:	6829      	ldr	r1, [r5, #0]
 800666e:	291d      	cmp	r1, #29
 8006670:	d82c      	bhi.n	80066cc <__sflush_r+0xb8>
 8006672:	4a2a      	ldr	r2, [pc, #168]	; (800671c <__sflush_r+0x108>)
 8006674:	40ca      	lsrs	r2, r1
 8006676:	07d6      	lsls	r6, r2, #31
 8006678:	d528      	bpl.n	80066cc <__sflush_r+0xb8>
 800667a:	2200      	movs	r2, #0
 800667c:	6062      	str	r2, [r4, #4]
 800667e:	04d9      	lsls	r1, r3, #19
 8006680:	6922      	ldr	r2, [r4, #16]
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	d504      	bpl.n	8006690 <__sflush_r+0x7c>
 8006686:	1c42      	adds	r2, r0, #1
 8006688:	d101      	bne.n	800668e <__sflush_r+0x7a>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	b903      	cbnz	r3, 8006690 <__sflush_r+0x7c>
 800668e:	6560      	str	r0, [r4, #84]	; 0x54
 8006690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006692:	602f      	str	r7, [r5, #0]
 8006694:	2900      	cmp	r1, #0
 8006696:	d0ca      	beq.n	800662e <__sflush_r+0x1a>
 8006698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800669c:	4299      	cmp	r1, r3
 800669e:	d002      	beq.n	80066a6 <__sflush_r+0x92>
 80066a0:	4628      	mov	r0, r5
 80066a2:	f7ff fc29 	bl	8005ef8 <_free_r>
 80066a6:	2000      	movs	r0, #0
 80066a8:	6360      	str	r0, [r4, #52]	; 0x34
 80066aa:	e7c1      	b.n	8006630 <__sflush_r+0x1c>
 80066ac:	6a21      	ldr	r1, [r4, #32]
 80066ae:	2301      	movs	r3, #1
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b0      	blx	r6
 80066b4:	1c41      	adds	r1, r0, #1
 80066b6:	d1c7      	bne.n	8006648 <__sflush_r+0x34>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0c4      	beq.n	8006648 <__sflush_r+0x34>
 80066be:	2b1d      	cmp	r3, #29
 80066c0:	d001      	beq.n	80066c6 <__sflush_r+0xb2>
 80066c2:	2b16      	cmp	r3, #22
 80066c4:	d101      	bne.n	80066ca <__sflush_r+0xb6>
 80066c6:	602f      	str	r7, [r5, #0]
 80066c8:	e7b1      	b.n	800662e <__sflush_r+0x1a>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	e7ad      	b.n	8006630 <__sflush_r+0x1c>
 80066d4:	690f      	ldr	r7, [r1, #16]
 80066d6:	2f00      	cmp	r7, #0
 80066d8:	d0a9      	beq.n	800662e <__sflush_r+0x1a>
 80066da:	0793      	lsls	r3, r2, #30
 80066dc:	680e      	ldr	r6, [r1, #0]
 80066de:	bf08      	it	eq
 80066e0:	694b      	ldreq	r3, [r1, #20]
 80066e2:	600f      	str	r7, [r1, #0]
 80066e4:	bf18      	it	ne
 80066e6:	2300      	movne	r3, #0
 80066e8:	eba6 0807 	sub.w	r8, r6, r7
 80066ec:	608b      	str	r3, [r1, #8]
 80066ee:	f1b8 0f00 	cmp.w	r8, #0
 80066f2:	dd9c      	ble.n	800662e <__sflush_r+0x1a>
 80066f4:	6a21      	ldr	r1, [r4, #32]
 80066f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066f8:	4643      	mov	r3, r8
 80066fa:	463a      	mov	r2, r7
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b0      	blx	r6
 8006700:	2800      	cmp	r0, #0
 8006702:	dc06      	bgt.n	8006712 <__sflush_r+0xfe>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	e78e      	b.n	8006630 <__sflush_r+0x1c>
 8006712:	4407      	add	r7, r0
 8006714:	eba8 0800 	sub.w	r8, r8, r0
 8006718:	e7e9      	b.n	80066ee <__sflush_r+0xda>
 800671a:	bf00      	nop
 800671c:	20400001 	.word	0x20400001

08006720 <_fflush_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	690b      	ldr	r3, [r1, #16]
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	b913      	cbnz	r3, 8006730 <_fflush_r+0x10>
 800672a:	2500      	movs	r5, #0
 800672c:	4628      	mov	r0, r5
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	b118      	cbz	r0, 800673a <_fflush_r+0x1a>
 8006732:	6983      	ldr	r3, [r0, #24]
 8006734:	b90b      	cbnz	r3, 800673a <_fflush_r+0x1a>
 8006736:	f7fe ff89 	bl	800564c <__sinit>
 800673a:	4b14      	ldr	r3, [pc, #80]	; (800678c <_fflush_r+0x6c>)
 800673c:	429c      	cmp	r4, r3
 800673e:	d11b      	bne.n	8006778 <_fflush_r+0x58>
 8006740:	686c      	ldr	r4, [r5, #4]
 8006742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0ef      	beq.n	800672a <_fflush_r+0xa>
 800674a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800674c:	07d0      	lsls	r0, r2, #31
 800674e:	d404      	bmi.n	800675a <_fflush_r+0x3a>
 8006750:	0599      	lsls	r1, r3, #22
 8006752:	d402      	bmi.n	800675a <_fflush_r+0x3a>
 8006754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006756:	f7ff f81c 	bl	8005792 <__retarget_lock_acquire_recursive>
 800675a:	4628      	mov	r0, r5
 800675c:	4621      	mov	r1, r4
 800675e:	f7ff ff59 	bl	8006614 <__sflush_r>
 8006762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006764:	07da      	lsls	r2, r3, #31
 8006766:	4605      	mov	r5, r0
 8006768:	d4e0      	bmi.n	800672c <_fflush_r+0xc>
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	059b      	lsls	r3, r3, #22
 800676e:	d4dd      	bmi.n	800672c <_fflush_r+0xc>
 8006770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006772:	f7ff f80f 	bl	8005794 <__retarget_lock_release_recursive>
 8006776:	e7d9      	b.n	800672c <_fflush_r+0xc>
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <_fflush_r+0x70>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d101      	bne.n	8006782 <_fflush_r+0x62>
 800677e:	68ac      	ldr	r4, [r5, #8]
 8006780:	e7df      	b.n	8006742 <_fflush_r+0x22>
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <_fflush_r+0x74>)
 8006784:	429c      	cmp	r4, r3
 8006786:	bf08      	it	eq
 8006788:	68ec      	ldreq	r4, [r5, #12]
 800678a:	e7da      	b.n	8006742 <_fflush_r+0x22>
 800678c:	08007bb8 	.word	0x08007bb8
 8006790:	08007bd8 	.word	0x08007bd8
 8006794:	08007b98 	.word	0x08007b98

08006798 <fiprintf>:
 8006798:	b40e      	push	{r1, r2, r3}
 800679a:	b503      	push	{r0, r1, lr}
 800679c:	4601      	mov	r1, r0
 800679e:	ab03      	add	r3, sp, #12
 80067a0:	4805      	ldr	r0, [pc, #20]	; (80067b8 <fiprintf+0x20>)
 80067a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067a6:	6800      	ldr	r0, [r0, #0]
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	f7ff fcaf 	bl	800610c <_vfiprintf_r>
 80067ae:	b002      	add	sp, #8
 80067b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b4:	b003      	add	sp, #12
 80067b6:	4770      	bx	lr
 80067b8:	20000044 	.word	0x20000044

080067bc <_lseek_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d07      	ldr	r5, [pc, #28]	; (80067dc <_lseek_r+0x20>)
 80067c0:	4604      	mov	r4, r0
 80067c2:	4608      	mov	r0, r1
 80067c4:	4611      	mov	r1, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	602a      	str	r2, [r5, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7fb f9a8 	bl	8001b20 <_lseek>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_lseek_r+0x1e>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_lseek_r+0x1e>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	20000390 	.word	0x20000390

080067e0 <__swhatbuf_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	460e      	mov	r6, r1
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2900      	cmp	r1, #0
 80067ea:	b096      	sub	sp, #88	; 0x58
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	da08      	bge.n	8006804 <__swhatbuf_r+0x24>
 80067f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	602a      	str	r2, [r5, #0]
 80067fa:	061a      	lsls	r2, r3, #24
 80067fc:	d410      	bmi.n	8006820 <__swhatbuf_r+0x40>
 80067fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006802:	e00e      	b.n	8006822 <__swhatbuf_r+0x42>
 8006804:	466a      	mov	r2, sp
 8006806:	f000 f895 	bl	8006934 <_fstat_r>
 800680a:	2800      	cmp	r0, #0
 800680c:	dbf1      	blt.n	80067f2 <__swhatbuf_r+0x12>
 800680e:	9a01      	ldr	r2, [sp, #4]
 8006810:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006814:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006818:	425a      	negs	r2, r3
 800681a:	415a      	adcs	r2, r3
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	e7ee      	b.n	80067fe <__swhatbuf_r+0x1e>
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	2000      	movs	r0, #0
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	b016      	add	sp, #88	; 0x58
 8006828:	bd70      	pop	{r4, r5, r6, pc}
	...

0800682c <__smakebuf_r>:
 800682c:	898b      	ldrh	r3, [r1, #12]
 800682e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006830:	079d      	lsls	r5, r3, #30
 8006832:	4606      	mov	r6, r0
 8006834:	460c      	mov	r4, r1
 8006836:	d507      	bpl.n	8006848 <__smakebuf_r+0x1c>
 8006838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	2301      	movs	r3, #1
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	b002      	add	sp, #8
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	ab01      	add	r3, sp, #4
 800684a:	466a      	mov	r2, sp
 800684c:	f7ff ffc8 	bl	80067e0 <__swhatbuf_r>
 8006850:	9900      	ldr	r1, [sp, #0]
 8006852:	4605      	mov	r5, r0
 8006854:	4630      	mov	r0, r6
 8006856:	f7ff fbbb 	bl	8005fd0 <_malloc_r>
 800685a:	b948      	cbnz	r0, 8006870 <__smakebuf_r+0x44>
 800685c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006860:	059a      	lsls	r2, r3, #22
 8006862:	d4ef      	bmi.n	8006844 <__smakebuf_r+0x18>
 8006864:	f023 0303 	bic.w	r3, r3, #3
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7e3      	b.n	8006838 <__smakebuf_r+0xc>
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <__smakebuf_r+0x7c>)
 8006872:	62b3      	str	r3, [r6, #40]	; 0x28
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	6020      	str	r0, [r4, #0]
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	9b00      	ldr	r3, [sp, #0]
 8006880:	6163      	str	r3, [r4, #20]
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	6120      	str	r0, [r4, #16]
 8006886:	b15b      	cbz	r3, 80068a0 <__smakebuf_r+0x74>
 8006888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800688c:	4630      	mov	r0, r6
 800688e:	f000 f863 	bl	8006958 <_isatty_r>
 8006892:	b128      	cbz	r0, 80068a0 <__smakebuf_r+0x74>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	89a0      	ldrh	r0, [r4, #12]
 80068a2:	4305      	orrs	r5, r0
 80068a4:	81a5      	strh	r5, [r4, #12]
 80068a6:	e7cd      	b.n	8006844 <__smakebuf_r+0x18>
 80068a8:	080055e5 	.word	0x080055e5

080068ac <__ascii_mbtowc>:
 80068ac:	b082      	sub	sp, #8
 80068ae:	b901      	cbnz	r1, 80068b2 <__ascii_mbtowc+0x6>
 80068b0:	a901      	add	r1, sp, #4
 80068b2:	b142      	cbz	r2, 80068c6 <__ascii_mbtowc+0x1a>
 80068b4:	b14b      	cbz	r3, 80068ca <__ascii_mbtowc+0x1e>
 80068b6:	7813      	ldrb	r3, [r2, #0]
 80068b8:	600b      	str	r3, [r1, #0]
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	1e10      	subs	r0, r2, #0
 80068be:	bf18      	it	ne
 80068c0:	2001      	movne	r0, #1
 80068c2:	b002      	add	sp, #8
 80068c4:	4770      	bx	lr
 80068c6:	4610      	mov	r0, r2
 80068c8:	e7fb      	b.n	80068c2 <__ascii_mbtowc+0x16>
 80068ca:	f06f 0001 	mvn.w	r0, #1
 80068ce:	e7f8      	b.n	80068c2 <__ascii_mbtowc+0x16>

080068d0 <__malloc_lock>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__malloc_lock+0x8>)
 80068d2:	f7fe bf5e 	b.w	8005792 <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	20000384 	.word	0x20000384

080068dc <__malloc_unlock>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__malloc_unlock+0x8>)
 80068de:	f7fe bf59 	b.w	8005794 <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	20000384 	.word	0x20000384

080068e8 <_read_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d07      	ldr	r5, [pc, #28]	; (8006908 <_read_r+0x20>)
 80068ec:	4604      	mov	r4, r0
 80068ee:	4608      	mov	r0, r1
 80068f0:	4611      	mov	r1, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	602a      	str	r2, [r5, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f7fb f8b2 	bl	8001a60 <_read>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_read_r+0x1e>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_read_r+0x1e>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20000390 	.word	0x20000390

0800690c <__ascii_wctomb>:
 800690c:	b149      	cbz	r1, 8006922 <__ascii_wctomb+0x16>
 800690e:	2aff      	cmp	r2, #255	; 0xff
 8006910:	bf85      	ittet	hi
 8006912:	238a      	movhi	r3, #138	; 0x8a
 8006914:	6003      	strhi	r3, [r0, #0]
 8006916:	700a      	strbls	r2, [r1, #0]
 8006918:	f04f 30ff 	movhi.w	r0, #4294967295
 800691c:	bf98      	it	ls
 800691e:	2001      	movls	r0, #1
 8006920:	4770      	bx	lr
 8006922:	4608      	mov	r0, r1
 8006924:	4770      	bx	lr

08006926 <abort>:
 8006926:	b508      	push	{r3, lr}
 8006928:	2006      	movs	r0, #6
 800692a:	f000 f84d 	bl	80069c8 <raise>
 800692e:	2001      	movs	r0, #1
 8006930:	f7fb f88c 	bl	8001a4c <_exit>

08006934 <_fstat_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4d07      	ldr	r5, [pc, #28]	; (8006954 <_fstat_r+0x20>)
 8006938:	2300      	movs	r3, #0
 800693a:	4604      	mov	r4, r0
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	f7fb f8d2 	bl	8001aea <_fstat>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d102      	bne.n	8006950 <_fstat_r+0x1c>
 800694a:	682b      	ldr	r3, [r5, #0]
 800694c:	b103      	cbz	r3, 8006950 <_fstat_r+0x1c>
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop
 8006954:	20000390 	.word	0x20000390

08006958 <_isatty_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d06      	ldr	r5, [pc, #24]	; (8006974 <_isatty_r+0x1c>)
 800695c:	2300      	movs	r3, #0
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7fb f8d1 	bl	8001b0a <_isatty>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_isatty_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_isatty_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20000390 	.word	0x20000390

08006978 <_raise_r>:
 8006978:	291f      	cmp	r1, #31
 800697a:	b538      	push	{r3, r4, r5, lr}
 800697c:	4604      	mov	r4, r0
 800697e:	460d      	mov	r5, r1
 8006980:	d904      	bls.n	800698c <_raise_r+0x14>
 8006982:	2316      	movs	r3, #22
 8006984:	6003      	str	r3, [r0, #0]
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800698e:	b112      	cbz	r2, 8006996 <_raise_r+0x1e>
 8006990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006994:	b94b      	cbnz	r3, 80069aa <_raise_r+0x32>
 8006996:	4620      	mov	r0, r4
 8006998:	f000 f830 	bl	80069fc <_getpid_r>
 800699c:	462a      	mov	r2, r5
 800699e:	4601      	mov	r1, r0
 80069a0:	4620      	mov	r0, r4
 80069a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a6:	f000 b817 	b.w	80069d8 <_kill_r>
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d00a      	beq.n	80069c4 <_raise_r+0x4c>
 80069ae:	1c59      	adds	r1, r3, #1
 80069b0:	d103      	bne.n	80069ba <_raise_r+0x42>
 80069b2:	2316      	movs	r3, #22
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	2001      	movs	r0, #1
 80069b8:	e7e7      	b.n	800698a <_raise_r+0x12>
 80069ba:	2400      	movs	r4, #0
 80069bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069c0:	4628      	mov	r0, r5
 80069c2:	4798      	blx	r3
 80069c4:	2000      	movs	r0, #0
 80069c6:	e7e0      	b.n	800698a <_raise_r+0x12>

080069c8 <raise>:
 80069c8:	4b02      	ldr	r3, [pc, #8]	; (80069d4 <raise+0xc>)
 80069ca:	4601      	mov	r1, r0
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	f7ff bfd3 	b.w	8006978 <_raise_r>
 80069d2:	bf00      	nop
 80069d4:	20000044 	.word	0x20000044

080069d8 <_kill_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <_kill_r+0x20>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f7fb f821 	bl	8001a2c <_kill>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d102      	bne.n	80069f4 <_kill_r+0x1c>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	b103      	cbz	r3, 80069f4 <_kill_r+0x1c>
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	bd38      	pop	{r3, r4, r5, pc}
 80069f6:	bf00      	nop
 80069f8:	20000390 	.word	0x20000390

080069fc <_getpid_r>:
 80069fc:	f7fb b80e 	b.w	8001a1c <_getpid>

08006a00 <sin>:
 8006a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a02:	ec53 2b10 	vmov	r2, r3, d0
 8006a06:	4828      	ldr	r0, [pc, #160]	; (8006aa8 <sin+0xa8>)
 8006a08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a0c:	4281      	cmp	r1, r0
 8006a0e:	dc07      	bgt.n	8006a20 <sin+0x20>
 8006a10:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006aa0 <sin+0xa0>
 8006a14:	2000      	movs	r0, #0
 8006a16:	b005      	add	sp, #20
 8006a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a1c:	f000 be6c 	b.w	80076f8 <__kernel_sin>
 8006a20:	4822      	ldr	r0, [pc, #136]	; (8006aac <sin+0xac>)
 8006a22:	4281      	cmp	r1, r0
 8006a24:	dd09      	ble.n	8006a3a <sin+0x3a>
 8006a26:	ee10 0a10 	vmov	r0, s0
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f7f9 fc2c 	bl	8000288 <__aeabi_dsub>
 8006a30:	ec41 0b10 	vmov	d0, r0, r1
 8006a34:	b005      	add	sp, #20
 8006a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a3a:	4668      	mov	r0, sp
 8006a3c:	f000 f838 	bl	8006ab0 <__ieee754_rem_pio2>
 8006a40:	f000 0003 	and.w	r0, r0, #3
 8006a44:	2801      	cmp	r0, #1
 8006a46:	d00c      	beq.n	8006a62 <sin+0x62>
 8006a48:	2802      	cmp	r0, #2
 8006a4a:	d011      	beq.n	8006a70 <sin+0x70>
 8006a4c:	b9f0      	cbnz	r0, 8006a8c <sin+0x8c>
 8006a4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a52:	ed9d 0b00 	vldr	d0, [sp]
 8006a56:	2001      	movs	r0, #1
 8006a58:	f000 fe4e 	bl	80076f8 <__kernel_sin>
 8006a5c:	ec51 0b10 	vmov	r0, r1, d0
 8006a60:	e7e6      	b.n	8006a30 <sin+0x30>
 8006a62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a66:	ed9d 0b00 	vldr	d0, [sp]
 8006a6a:	f000 fa2d 	bl	8006ec8 <__kernel_cos>
 8006a6e:	e7f5      	b.n	8006a5c <sin+0x5c>
 8006a70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a74:	ed9d 0b00 	vldr	d0, [sp]
 8006a78:	2001      	movs	r0, #1
 8006a7a:	f000 fe3d 	bl	80076f8 <__kernel_sin>
 8006a7e:	ec53 2b10 	vmov	r2, r3, d0
 8006a82:	ee10 0a10 	vmov	r0, s0
 8006a86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a8a:	e7d1      	b.n	8006a30 <sin+0x30>
 8006a8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a90:	ed9d 0b00 	vldr	d0, [sp]
 8006a94:	f000 fa18 	bl	8006ec8 <__kernel_cos>
 8006a98:	e7f1      	b.n	8006a7e <sin+0x7e>
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w
	...
 8006aa8:	3fe921fb 	.word	0x3fe921fb
 8006aac:	7fefffff 	.word	0x7fefffff

08006ab0 <__ieee754_rem_pio2>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	ed2d 8b02 	vpush	{d8}
 8006ab8:	ec55 4b10 	vmov	r4, r5, d0
 8006abc:	4bca      	ldr	r3, [pc, #808]	; (8006de8 <__ieee754_rem_pio2+0x338>)
 8006abe:	b08b      	sub	sp, #44	; 0x2c
 8006ac0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006ac4:	4598      	cmp	r8, r3
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	9502      	str	r5, [sp, #8]
 8006aca:	dc08      	bgt.n	8006ade <__ieee754_rem_pio2+0x2e>
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	ed80 0b00 	vstr	d0, [r0]
 8006ad4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006ad8:	f04f 0b00 	mov.w	fp, #0
 8006adc:	e028      	b.n	8006b30 <__ieee754_rem_pio2+0x80>
 8006ade:	4bc3      	ldr	r3, [pc, #780]	; (8006dec <__ieee754_rem_pio2+0x33c>)
 8006ae0:	4598      	cmp	r8, r3
 8006ae2:	dc78      	bgt.n	8006bd6 <__ieee754_rem_pio2+0x126>
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	4ec2      	ldr	r6, [pc, #776]	; (8006df0 <__ieee754_rem_pio2+0x340>)
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	ee10 0a10 	vmov	r0, s0
 8006aee:	a3b0      	add	r3, pc, #704	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x300>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	4629      	mov	r1, r5
 8006af6:	dd39      	ble.n	8006b6c <__ieee754_rem_pio2+0xbc>
 8006af8:	f7f9 fbc6 	bl	8000288 <__aeabi_dsub>
 8006afc:	45b0      	cmp	r8, r6
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	d01b      	beq.n	8006b3c <__ieee754_rem_pio2+0x8c>
 8006b04:	a3ac      	add	r3, pc, #688	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fbbd 	bl	8000288 <__aeabi_dsub>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	e9ca 2300 	strd	r2, r3, [sl]
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 fbb5 	bl	8000288 <__aeabi_dsub>
 8006b1e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fbb0 	bl	8000288 <__aeabi_dsub>
 8006b28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b2c:	f04f 0b01 	mov.w	fp, #1
 8006b30:	4658      	mov	r0, fp
 8006b32:	b00b      	add	sp, #44	; 0x2c
 8006b34:	ecbd 8b02 	vpop	{d8}
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x310>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fba1 	bl	8000288 <__aeabi_dsub>
 8006b46:	a3a0      	add	r3, pc, #640	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	f7f9 fb9a 	bl	8000288 <__aeabi_dsub>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	e9ca 2300 	strd	r2, r3, [sl]
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 fb92 	bl	8000288 <__aeabi_dsub>
 8006b64:	a398      	add	r3, pc, #608	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	e7db      	b.n	8006b24 <__ieee754_rem_pio2+0x74>
 8006b6c:	f7f9 fb8e 	bl	800028c <__adddf3>
 8006b70:	45b0      	cmp	r8, r6
 8006b72:	4604      	mov	r4, r0
 8006b74:	460d      	mov	r5, r1
 8006b76:	d016      	beq.n	8006ba6 <__ieee754_rem_pio2+0xf6>
 8006b78:	a38f      	add	r3, pc, #572	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fb85 	bl	800028c <__adddf3>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	e9ca 2300 	strd	r2, r3, [sl]
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 fb7b 	bl	8000288 <__aeabi_dsub>
 8006b92:	a389      	add	r3, pc, #548	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fb78 	bl	800028c <__adddf3>
 8006b9c:	f04f 3bff 	mov.w	fp, #4294967295
 8006ba0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ba4:	e7c4      	b.n	8006b30 <__ieee754_rem_pio2+0x80>
 8006ba6:	a386      	add	r3, pc, #536	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x310>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f7f9 fb6e 	bl	800028c <__adddf3>
 8006bb0:	a385      	add	r3, pc, #532	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	460d      	mov	r5, r1
 8006bba:	f7f9 fb67 	bl	800028c <__adddf3>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	e9ca 2300 	strd	r2, r3, [sl]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 fb5d 	bl	8000288 <__aeabi_dsub>
 8006bce:	a37e      	add	r3, pc, #504	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	e7e0      	b.n	8006b98 <__ieee754_rem_pio2+0xe8>
 8006bd6:	4b87      	ldr	r3, [pc, #540]	; (8006df4 <__ieee754_rem_pio2+0x344>)
 8006bd8:	4598      	cmp	r8, r3
 8006bda:	f300 80d9 	bgt.w	8006d90 <__ieee754_rem_pio2+0x2e0>
 8006bde:	f000 fe49 	bl	8007874 <fabs>
 8006be2:	ec55 4b10 	vmov	r4, r5, d0
 8006be6:	ee10 0a10 	vmov	r0, s0
 8006bea:	a379      	add	r3, pc, #484	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x320>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 fd01 	bl	80005f8 <__aeabi_dmul>
 8006bf6:	4b80      	ldr	r3, [pc, #512]	; (8006df8 <__ieee754_rem_pio2+0x348>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f7f9 fb47 	bl	800028c <__adddf3>
 8006bfe:	f7f9 ffab 	bl	8000b58 <__aeabi_d2iz>
 8006c02:	4683      	mov	fp, r0
 8006c04:	f7f9 fc8e 	bl	8000524 <__aeabi_i2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	ec43 2b18 	vmov	d8, r2, r3
 8006c10:	a367      	add	r3, pc, #412	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x300>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fcef 	bl	80005f8 <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fb31 	bl	8000288 <__aeabi_dsub>
 8006c26:	a364      	add	r3, pc, #400	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	ec51 0b18 	vmov	r0, r1, d8
 8006c34:	f7f9 fce0 	bl	80005f8 <__aeabi_dmul>
 8006c38:	f1bb 0f1f 	cmp.w	fp, #31
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	dc0d      	bgt.n	8006c5e <__ieee754_rem_pio2+0x1ae>
 8006c42:	4b6e      	ldr	r3, [pc, #440]	; (8006dfc <__ieee754_rem_pio2+0x34c>)
 8006c44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	4543      	cmp	r3, r8
 8006c4e:	d006      	beq.n	8006c5e <__ieee754_rem_pio2+0x1ae>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 fb16 	bl	8000288 <__aeabi_dsub>
 8006c5c:	e00f      	b.n	8006c7e <__ieee754_rem_pio2+0x1ce>
 8006c5e:	462b      	mov	r3, r5
 8006c60:	4622      	mov	r2, r4
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fb0f 	bl	8000288 <__aeabi_dsub>
 8006c6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c6e:	9303      	str	r3, [sp, #12]
 8006c70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006c78:	f1b8 0f10 	cmp.w	r8, #16
 8006c7c:	dc02      	bgt.n	8006c84 <__ieee754_rem_pio2+0x1d4>
 8006c7e:	e9ca 0100 	strd	r0, r1, [sl]
 8006c82:	e039      	b.n	8006cf8 <__ieee754_rem_pio2+0x248>
 8006c84:	a34e      	add	r3, pc, #312	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x310>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	ec51 0b18 	vmov	r0, r1, d8
 8006c8e:	f7f9 fcb3 	bl	80005f8 <__aeabi_dmul>
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	4689      	mov	r9, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	f7f9 fae7 	bl	8000288 <__aeabi_dsub>
 8006cba:	a343      	add	r3, pc, #268	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	ec51 0b18 	vmov	r0, r1, d8
 8006cc8:	f7f9 fc96 	bl	80005f8 <__aeabi_dmul>
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	f7f9 fada 	bl	8000288 <__aeabi_dsub>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4649      	mov	r1, r9
 8006ce0:	f7f9 fad2 	bl	8000288 <__aeabi_dsub>
 8006ce4:	9a03      	ldr	r2, [sp, #12]
 8006ce6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b31      	cmp	r3, #49	; 0x31
 8006cee:	dc24      	bgt.n	8006d3a <__ieee754_rem_pio2+0x28a>
 8006cf0:	e9ca 0100 	strd	r0, r1, [sl]
 8006cf4:	4646      	mov	r6, r8
 8006cf6:	464f      	mov	r7, r9
 8006cf8:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fac0 	bl	8000288 <__aeabi_dsub>
 8006d08:	462b      	mov	r3, r5
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	f7f9 fabc 	bl	8000288 <__aeabi_dsub>
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d18:	f6bf af0a 	bge.w	8006b30 <__ieee754_rem_pio2+0x80>
 8006d1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d20:	f8ca 3004 	str.w	r3, [sl, #4]
 8006d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d28:	f8ca 8000 	str.w	r8, [sl]
 8006d2c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006d30:	f8ca 300c 	str.w	r3, [sl, #12]
 8006d34:	f1cb 0b00 	rsb	fp, fp, #0
 8006d38:	e6fa      	b.n	8006b30 <__ieee754_rem_pio2+0x80>
 8006d3a:	a327      	add	r3, pc, #156	; (adr r3, 8006dd8 <__ieee754_rem_pio2+0x328>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	ec51 0b18 	vmov	r0, r1, d8
 8006d44:	f7f9 fc58 	bl	80005f8 <__aeabi_dmul>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f7f9 fa98 	bl	8000288 <__aeabi_dsub>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fa90 	bl	8000288 <__aeabi_dsub>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	f7f9 fa8c 	bl	8000288 <__aeabi_dsub>
 8006d70:	a31b      	add	r3, pc, #108	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x330>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	4604      	mov	r4, r0
 8006d78:	460d      	mov	r5, r1
 8006d7a:	ec51 0b18 	vmov	r0, r1, d8
 8006d7e:	f7f9 fc3b 	bl	80005f8 <__aeabi_dmul>
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f7f9 fa7f 	bl	8000288 <__aeabi_dsub>
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	e75f      	b.n	8006c50 <__ieee754_rem_pio2+0x1a0>
 8006d90:	4b1b      	ldr	r3, [pc, #108]	; (8006e00 <__ieee754_rem_pio2+0x350>)
 8006d92:	4598      	cmp	r8, r3
 8006d94:	dd36      	ble.n	8006e04 <__ieee754_rem_pio2+0x354>
 8006d96:	ee10 2a10 	vmov	r2, s0
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fa72 	bl	8000288 <__aeabi_dsub>
 8006da4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006da8:	e9ca 0100 	strd	r0, r1, [sl]
 8006dac:	e694      	b.n	8006ad8 <__ieee754_rem_pio2+0x28>
 8006dae:	bf00      	nop
 8006db0:	54400000 	.word	0x54400000
 8006db4:	3ff921fb 	.word	0x3ff921fb
 8006db8:	1a626331 	.word	0x1a626331
 8006dbc:	3dd0b461 	.word	0x3dd0b461
 8006dc0:	1a600000 	.word	0x1a600000
 8006dc4:	3dd0b461 	.word	0x3dd0b461
 8006dc8:	2e037073 	.word	0x2e037073
 8006dcc:	3ba3198a 	.word	0x3ba3198a
 8006dd0:	6dc9c883 	.word	0x6dc9c883
 8006dd4:	3fe45f30 	.word	0x3fe45f30
 8006dd8:	2e000000 	.word	0x2e000000
 8006ddc:	3ba3198a 	.word	0x3ba3198a
 8006de0:	252049c1 	.word	0x252049c1
 8006de4:	397b839a 	.word	0x397b839a
 8006de8:	3fe921fb 	.word	0x3fe921fb
 8006dec:	4002d97b 	.word	0x4002d97b
 8006df0:	3ff921fb 	.word	0x3ff921fb
 8006df4:	413921fb 	.word	0x413921fb
 8006df8:	3fe00000 	.word	0x3fe00000
 8006dfc:	08007eac 	.word	0x08007eac
 8006e00:	7fefffff 	.word	0x7fefffff
 8006e04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006e08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006e0c:	ee10 0a10 	vmov	r0, s0
 8006e10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006e14:	ee10 6a10 	vmov	r6, s0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	f7f9 fe9d 	bl	8000b58 <__aeabi_d2iz>
 8006e1e:	f7f9 fb81 	bl	8000524 <__aeabi_i2d>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4630      	mov	r0, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <__ieee754_rem_pio2+0x410>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	f7f9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	f7f9 fe8b 	bl	8000b58 <__aeabi_d2iz>
 8006e42:	f7f9 fb6f 	bl	8000524 <__aeabi_i2d>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e52:	f7f9 fa19 	bl	8000288 <__aeabi_dsub>
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <__ieee754_rem_pio2+0x410>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7f9 fbcd 	bl	80005f8 <__aeabi_dmul>
 8006e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e62:	ad04      	add	r5, sp, #16
 8006e64:	f04f 0803 	mov.w	r8, #3
 8006e68:	46a9      	mov	r9, r5
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	2700      	movs	r7, #0
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463b      	mov	r3, r7
 8006e72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006e76:	46c3      	mov	fp, r8
 8006e78:	3d08      	subs	r5, #8
 8006e7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e7e:	f7f9 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d1f3      	bne.n	8006e6e <__ieee754_rem_pio2+0x3be>
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <__ieee754_rem_pio2+0x414>)
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4622      	mov	r2, r4
 8006e90:	465b      	mov	r3, fp
 8006e92:	4651      	mov	r1, sl
 8006e94:	4648      	mov	r0, r9
 8006e96:	f000 f8df 	bl	8007058 <__kernel_rem_pio2>
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	4683      	mov	fp, r0
 8006ea0:	f6bf ae46 	bge.w	8006b30 <__ieee754_rem_pio2+0x80>
 8006ea4:	e9da 2100 	ldrd	r2, r1, [sl]
 8006ea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eac:	e9ca 2300 	strd	r2, r3, [sl]
 8006eb0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006eb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eb8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006ebc:	e73a      	b.n	8006d34 <__ieee754_rem_pio2+0x284>
 8006ebe:	bf00      	nop
 8006ec0:	41700000 	.word	0x41700000
 8006ec4:	08007f2c 	.word	0x08007f2c

08006ec8 <__kernel_cos>:
 8006ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	ec57 6b10 	vmov	r6, r7, d0
 8006ed0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006ed4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006ed8:	ed8d 1b00 	vstr	d1, [sp]
 8006edc:	da07      	bge.n	8006eee <__kernel_cos+0x26>
 8006ede:	ee10 0a10 	vmov	r0, s0
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	f7f9 fe38 	bl	8000b58 <__aeabi_d2iz>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f000 8088 	beq.w	8006ffe <__kernel_cos+0x136>
 8006eee:	4632      	mov	r2, r6
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	f7f9 fb7f 	bl	80005f8 <__aeabi_dmul>
 8006efa:	4b51      	ldr	r3, [pc, #324]	; (8007040 <__kernel_cos+0x178>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	f7f9 fb79 	bl	80005f8 <__aeabi_dmul>
 8006f06:	a340      	add	r3, pc, #256	; (adr r3, 8007008 <__kernel_cos+0x140>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	468b      	mov	fp, r1
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 fb70 	bl	80005f8 <__aeabi_dmul>
 8006f18:	a33d      	add	r3, pc, #244	; (adr r3, 8007010 <__kernel_cos+0x148>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 f9b5 	bl	800028c <__adddf3>
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f7f9 fb67 	bl	80005f8 <__aeabi_dmul>
 8006f2a:	a33b      	add	r3, pc, #236	; (adr r3, 8007018 <__kernel_cos+0x150>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f7f9 f9aa 	bl	8000288 <__aeabi_dsub>
 8006f34:	4622      	mov	r2, r4
 8006f36:	462b      	mov	r3, r5
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	a338      	add	r3, pc, #224	; (adr r3, 8007020 <__kernel_cos+0x158>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f9a3 	bl	800028c <__adddf3>
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	f7f9 fb55 	bl	80005f8 <__aeabi_dmul>
 8006f4e:	a336      	add	r3, pc, #216	; (adr r3, 8007028 <__kernel_cos+0x160>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f7f9 f998 	bl	8000288 <__aeabi_dsub>
 8006f58:	4622      	mov	r2, r4
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	f7f9 fb4c 	bl	80005f8 <__aeabi_dmul>
 8006f60:	a333      	add	r3, pc, #204	; (adr r3, 8007030 <__kernel_cos+0x168>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 f991 	bl	800028c <__adddf3>
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	4622      	mov	r2, r4
 8006f74:	462b      	mov	r3, r5
 8006f76:	f7f9 fb3f 	bl	80005f8 <__aeabi_dmul>
 8006f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	4630      	mov	r0, r6
 8006f84:	4639      	mov	r1, r7
 8006f86:	f7f9 fb37 	bl	80005f8 <__aeabi_dmul>
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7f9 f979 	bl	8000288 <__aeabi_dsub>
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <__kernel_cos+0x17c>)
 8006f98:	4598      	cmp	r8, r3
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	dc10      	bgt.n	8006fc2 <__kernel_cos+0xfa>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 f96e 	bl	8000288 <__aeabi_dsub>
 8006fac:	460b      	mov	r3, r1
 8006fae:	4926      	ldr	r1, [pc, #152]	; (8007048 <__kernel_cos+0x180>)
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f7f9 f968 	bl	8000288 <__aeabi_dsub>
 8006fb8:	ec41 0b10 	vmov	d0, r0, r1
 8006fbc:	b003      	add	sp, #12
 8006fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc2:	4b22      	ldr	r3, [pc, #136]	; (800704c <__kernel_cos+0x184>)
 8006fc4:	4920      	ldr	r1, [pc, #128]	; (8007048 <__kernel_cos+0x180>)
 8006fc6:	4598      	cmp	r8, r3
 8006fc8:	bfcc      	ite	gt
 8006fca:	4d21      	ldrgt	r5, [pc, #132]	; (8007050 <__kernel_cos+0x188>)
 8006fcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f7f9 f956 	bl	8000288 <__aeabi_dsub>
 8006fdc:	4622      	mov	r2, r4
 8006fde:	4680      	mov	r8, r0
 8006fe0:	4689      	mov	r9, r1
 8006fe2:	462b      	mov	r3, r5
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	f7f9 f94e 	bl	8000288 <__aeabi_dsub>
 8006fec:	4632      	mov	r2, r6
 8006fee:	463b      	mov	r3, r7
 8006ff0:	f7f9 f94a 	bl	8000288 <__aeabi_dsub>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	e7da      	b.n	8006fb4 <__kernel_cos+0xec>
 8006ffe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007038 <__kernel_cos+0x170>
 8007002:	e7db      	b.n	8006fbc <__kernel_cos+0xf4>
 8007004:	f3af 8000 	nop.w
 8007008:	be8838d4 	.word	0xbe8838d4
 800700c:	bda8fae9 	.word	0xbda8fae9
 8007010:	bdb4b1c4 	.word	0xbdb4b1c4
 8007014:	3e21ee9e 	.word	0x3e21ee9e
 8007018:	809c52ad 	.word	0x809c52ad
 800701c:	3e927e4f 	.word	0x3e927e4f
 8007020:	19cb1590 	.word	0x19cb1590
 8007024:	3efa01a0 	.word	0x3efa01a0
 8007028:	16c15177 	.word	0x16c15177
 800702c:	3f56c16c 	.word	0x3f56c16c
 8007030:	5555554c 	.word	0x5555554c
 8007034:	3fa55555 	.word	0x3fa55555
 8007038:	00000000 	.word	0x00000000
 800703c:	3ff00000 	.word	0x3ff00000
 8007040:	3fe00000 	.word	0x3fe00000
 8007044:	3fd33332 	.word	0x3fd33332
 8007048:	3ff00000 	.word	0x3ff00000
 800704c:	3fe90000 	.word	0x3fe90000
 8007050:	3fd20000 	.word	0x3fd20000
 8007054:	00000000 	.word	0x00000000

08007058 <__kernel_rem_pio2>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	ed2d 8b02 	vpush	{d8}
 8007060:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007064:	f112 0f14 	cmn.w	r2, #20
 8007068:	9308      	str	r3, [sp, #32]
 800706a:	9101      	str	r1, [sp, #4]
 800706c:	4bc4      	ldr	r3, [pc, #784]	; (8007380 <__kernel_rem_pio2+0x328>)
 800706e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007070:	900b      	str	r0, [sp, #44]	; 0x2c
 8007072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007076:	9302      	str	r3, [sp, #8]
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	f103 33ff 	add.w	r3, r3, #4294967295
 800707e:	bfa8      	it	ge
 8007080:	1ed4      	subge	r4, r2, #3
 8007082:	9306      	str	r3, [sp, #24]
 8007084:	bfb2      	itee	lt
 8007086:	2400      	movlt	r4, #0
 8007088:	2318      	movge	r3, #24
 800708a:	fb94 f4f3 	sdivge	r4, r4, r3
 800708e:	f06f 0317 	mvn.w	r3, #23
 8007092:	fb04 3303 	mla	r3, r4, r3, r3
 8007096:	eb03 0a02 	add.w	sl, r3, r2
 800709a:	9b02      	ldr	r3, [sp, #8]
 800709c:	9a06      	ldr	r2, [sp, #24]
 800709e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007370 <__kernel_rem_pio2+0x318>
 80070a2:	eb03 0802 	add.w	r8, r3, r2
 80070a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80070a8:	1aa7      	subs	r7, r4, r2
 80070aa:	ae22      	add	r6, sp, #136	; 0x88
 80070ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80070b0:	2500      	movs	r5, #0
 80070b2:	4545      	cmp	r5, r8
 80070b4:	dd13      	ble.n	80070de <__kernel_rem_pio2+0x86>
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007370 <__kernel_rem_pio2+0x318>
 80070bc:	aa22      	add	r2, sp, #136	; 0x88
 80070be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80070c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80070c6:	f04f 0800 	mov.w	r8, #0
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	4598      	cmp	r8, r3
 80070ce:	dc2f      	bgt.n	8007130 <__kernel_rem_pio2+0xd8>
 80070d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80070d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80070d8:	462f      	mov	r7, r5
 80070da:	2600      	movs	r6, #0
 80070dc:	e01b      	b.n	8007116 <__kernel_rem_pio2+0xbe>
 80070de:	42ef      	cmn	r7, r5
 80070e0:	d407      	bmi.n	80070f2 <__kernel_rem_pio2+0x9a>
 80070e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80070e6:	f7f9 fa1d 	bl	8000524 <__aeabi_i2d>
 80070ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80070ee:	3501      	adds	r5, #1
 80070f0:	e7df      	b.n	80070b2 <__kernel_rem_pio2+0x5a>
 80070f2:	ec51 0b18 	vmov	r0, r1, d8
 80070f6:	e7f8      	b.n	80070ea <__kernel_rem_pio2+0x92>
 80070f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007100:	f7f9 fa7a 	bl	80005f8 <__aeabi_dmul>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800710c:	f7f9 f8be 	bl	800028c <__adddf3>
 8007110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007114:	3601      	adds	r6, #1
 8007116:	9b06      	ldr	r3, [sp, #24]
 8007118:	429e      	cmp	r6, r3
 800711a:	f1a7 0708 	sub.w	r7, r7, #8
 800711e:	ddeb      	ble.n	80070f8 <__kernel_rem_pio2+0xa0>
 8007120:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	ecab 7b02 	vstmia	fp!, {d7}
 800712c:	3508      	adds	r5, #8
 800712e:	e7cc      	b.n	80070ca <__kernel_rem_pio2+0x72>
 8007130:	9b02      	ldr	r3, [sp, #8]
 8007132:	aa0e      	add	r2, sp, #56	; 0x38
 8007134:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007138:	930d      	str	r3, [sp, #52]	; 0x34
 800713a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800713c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007140:	9c02      	ldr	r4, [sp, #8]
 8007142:	930c      	str	r3, [sp, #48]	; 0x30
 8007144:	00e3      	lsls	r3, r4, #3
 8007146:	930a      	str	r3, [sp, #40]	; 0x28
 8007148:	ab9a      	add	r3, sp, #616	; 0x268
 800714a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800714e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007152:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007156:	ab72      	add	r3, sp, #456	; 0x1c8
 8007158:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800715c:	46c3      	mov	fp, r8
 800715e:	46a1      	mov	r9, r4
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	f1a5 0508 	sub.w	r5, r5, #8
 8007168:	dc77      	bgt.n	800725a <__kernel_rem_pio2+0x202>
 800716a:	ec47 6b10 	vmov	d0, r6, r7
 800716e:	4650      	mov	r0, sl
 8007170:	f000 fc0a 	bl	8007988 <scalbn>
 8007174:	ec57 6b10 	vmov	r6, r7, d0
 8007178:	2200      	movs	r2, #0
 800717a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800717e:	ee10 0a10 	vmov	r0, s0
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 fa38 	bl	80005f8 <__aeabi_dmul>
 8007188:	ec41 0b10 	vmov	d0, r0, r1
 800718c:	f000 fb7c 	bl	8007888 <floor>
 8007190:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <__kernel_rem_pio2+0x32c>)
 8007192:	ec51 0b10 	vmov	r0, r1, d0
 8007196:	2200      	movs	r2, #0
 8007198:	f7f9 fa2e 	bl	80005f8 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f870 	bl	8000288 <__aeabi_dsub>
 80071a8:	460f      	mov	r7, r1
 80071aa:	4606      	mov	r6, r0
 80071ac:	f7f9 fcd4 	bl	8000b58 <__aeabi_d2iz>
 80071b0:	9004      	str	r0, [sp, #16]
 80071b2:	f7f9 f9b7 	bl	8000524 <__aeabi_i2d>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4630      	mov	r0, r6
 80071bc:	4639      	mov	r1, r7
 80071be:	f7f9 f863 	bl	8000288 <__aeabi_dsub>
 80071c2:	f1ba 0f00 	cmp.w	sl, #0
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	dd6d      	ble.n	80072a8 <__kernel_rem_pio2+0x250>
 80071cc:	1e62      	subs	r2, r4, #1
 80071ce:	ab0e      	add	r3, sp, #56	; 0x38
 80071d0:	9d04      	ldr	r5, [sp, #16]
 80071d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80071d6:	f1ca 0118 	rsb	r1, sl, #24
 80071da:	fa40 f301 	asr.w	r3, r0, r1
 80071de:	441d      	add	r5, r3
 80071e0:	408b      	lsls	r3, r1
 80071e2:	1ac0      	subs	r0, r0, r3
 80071e4:	ab0e      	add	r3, sp, #56	; 0x38
 80071e6:	9504      	str	r5, [sp, #16]
 80071e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80071ec:	f1ca 0317 	rsb	r3, sl, #23
 80071f0:	fa40 fb03 	asr.w	fp, r0, r3
 80071f4:	f1bb 0f00 	cmp.w	fp, #0
 80071f8:	dd65      	ble.n	80072c6 <__kernel_rem_pio2+0x26e>
 80071fa:	9b04      	ldr	r3, [sp, #16]
 80071fc:	2200      	movs	r2, #0
 80071fe:	3301      	adds	r3, #1
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	4615      	mov	r5, r2
 8007204:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007208:	4294      	cmp	r4, r2
 800720a:	f300 809c 	bgt.w	8007346 <__kernel_rem_pio2+0x2ee>
 800720e:	f1ba 0f00 	cmp.w	sl, #0
 8007212:	dd07      	ble.n	8007224 <__kernel_rem_pio2+0x1cc>
 8007214:	f1ba 0f01 	cmp.w	sl, #1
 8007218:	f000 80c0 	beq.w	800739c <__kernel_rem_pio2+0x344>
 800721c:	f1ba 0f02 	cmp.w	sl, #2
 8007220:	f000 80c6 	beq.w	80073b0 <__kernel_rem_pio2+0x358>
 8007224:	f1bb 0f02 	cmp.w	fp, #2
 8007228:	d14d      	bne.n	80072c6 <__kernel_rem_pio2+0x26e>
 800722a:	4632      	mov	r2, r6
 800722c:	463b      	mov	r3, r7
 800722e:	4956      	ldr	r1, [pc, #344]	; (8007388 <__kernel_rem_pio2+0x330>)
 8007230:	2000      	movs	r0, #0
 8007232:	f7f9 f829 	bl	8000288 <__aeabi_dsub>
 8007236:	4606      	mov	r6, r0
 8007238:	460f      	mov	r7, r1
 800723a:	2d00      	cmp	r5, #0
 800723c:	d043      	beq.n	80072c6 <__kernel_rem_pio2+0x26e>
 800723e:	4650      	mov	r0, sl
 8007240:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007378 <__kernel_rem_pio2+0x320>
 8007244:	f000 fba0 	bl	8007988 <scalbn>
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	ec53 2b10 	vmov	r2, r3, d0
 8007250:	f7f9 f81a 	bl	8000288 <__aeabi_dsub>
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	e035      	b.n	80072c6 <__kernel_rem_pio2+0x26e>
 800725a:	4b4c      	ldr	r3, [pc, #304]	; (800738c <__kernel_rem_pio2+0x334>)
 800725c:	2200      	movs	r2, #0
 800725e:	4630      	mov	r0, r6
 8007260:	4639      	mov	r1, r7
 8007262:	f7f9 f9c9 	bl	80005f8 <__aeabi_dmul>
 8007266:	f7f9 fc77 	bl	8000b58 <__aeabi_d2iz>
 800726a:	f7f9 f95b 	bl	8000524 <__aeabi_i2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	ec43 2b18 	vmov	d8, r2, r3
 8007276:	4b46      	ldr	r3, [pc, #280]	; (8007390 <__kernel_rem_pio2+0x338>)
 8007278:	2200      	movs	r2, #0
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f8 ffff 	bl	8000288 <__aeabi_dsub>
 800728a:	f7f9 fc65 	bl	8000b58 <__aeabi_d2iz>
 800728e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007292:	f84b 0b04 	str.w	r0, [fp], #4
 8007296:	ec51 0b18 	vmov	r0, r1, d8
 800729a:	f7f8 fff7 	bl	800028c <__adddf3>
 800729e:	f109 39ff 	add.w	r9, r9, #4294967295
 80072a2:	4606      	mov	r6, r0
 80072a4:	460f      	mov	r7, r1
 80072a6:	e75b      	b.n	8007160 <__kernel_rem_pio2+0x108>
 80072a8:	d106      	bne.n	80072b8 <__kernel_rem_pio2+0x260>
 80072aa:	1e63      	subs	r3, r4, #1
 80072ac:	aa0e      	add	r2, sp, #56	; 0x38
 80072ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80072b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80072b6:	e79d      	b.n	80071f4 <__kernel_rem_pio2+0x19c>
 80072b8:	4b36      	ldr	r3, [pc, #216]	; (8007394 <__kernel_rem_pio2+0x33c>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	f7f9 fc22 	bl	8000b04 <__aeabi_dcmpge>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d13d      	bne.n	8007340 <__kernel_rem_pio2+0x2e8>
 80072c4:	4683      	mov	fp, r0
 80072c6:	2200      	movs	r2, #0
 80072c8:	2300      	movs	r3, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f000 80c0 	beq.w	8007458 <__kernel_rem_pio2+0x400>
 80072d8:	1e65      	subs	r5, r4, #1
 80072da:	462b      	mov	r3, r5
 80072dc:	2200      	movs	r2, #0
 80072de:	9902      	ldr	r1, [sp, #8]
 80072e0:	428b      	cmp	r3, r1
 80072e2:	da6c      	bge.n	80073be <__kernel_rem_pio2+0x366>
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	f000 8089 	beq.w	80073fc <__kernel_rem_pio2+0x3a4>
 80072ea:	ab0e      	add	r3, sp, #56	; 0x38
 80072ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80072f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80ad 	beq.w	8007454 <__kernel_rem_pio2+0x3fc>
 80072fa:	4650      	mov	r0, sl
 80072fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007378 <__kernel_rem_pio2+0x320>
 8007300:	f000 fb42 	bl	8007988 <scalbn>
 8007304:	ab9a      	add	r3, sp, #616	; 0x268
 8007306:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800730a:	ec57 6b10 	vmov	r6, r7, d0
 800730e:	00ec      	lsls	r4, r5, #3
 8007310:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007314:	46aa      	mov	sl, r5
 8007316:	f1ba 0f00 	cmp.w	sl, #0
 800731a:	f280 80d6 	bge.w	80074ca <__kernel_rem_pio2+0x472>
 800731e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007370 <__kernel_rem_pio2+0x318>
 8007322:	462e      	mov	r6, r5
 8007324:	2e00      	cmp	r6, #0
 8007326:	f2c0 8104 	blt.w	8007532 <__kernel_rem_pio2+0x4da>
 800732a:	ab72      	add	r3, sp, #456	; 0x1c8
 800732c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007330:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007398 <__kernel_rem_pio2+0x340>
 8007334:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007338:	f04f 0800 	mov.w	r8, #0
 800733c:	1baf      	subs	r7, r5, r6
 800733e:	e0ea      	b.n	8007516 <__kernel_rem_pio2+0x4be>
 8007340:	f04f 0b02 	mov.w	fp, #2
 8007344:	e759      	b.n	80071fa <__kernel_rem_pio2+0x1a2>
 8007346:	f8d8 3000 	ldr.w	r3, [r8]
 800734a:	b955      	cbnz	r5, 8007362 <__kernel_rem_pio2+0x30a>
 800734c:	b123      	cbz	r3, 8007358 <__kernel_rem_pio2+0x300>
 800734e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007352:	f8c8 3000 	str.w	r3, [r8]
 8007356:	2301      	movs	r3, #1
 8007358:	3201      	adds	r2, #1
 800735a:	f108 0804 	add.w	r8, r8, #4
 800735e:	461d      	mov	r5, r3
 8007360:	e752      	b.n	8007208 <__kernel_rem_pio2+0x1b0>
 8007362:	1acb      	subs	r3, r1, r3
 8007364:	f8c8 3000 	str.w	r3, [r8]
 8007368:	462b      	mov	r3, r5
 800736a:	e7f5      	b.n	8007358 <__kernel_rem_pio2+0x300>
 800736c:	f3af 8000 	nop.w
	...
 800737c:	3ff00000 	.word	0x3ff00000
 8007380:	08008078 	.word	0x08008078
 8007384:	40200000 	.word	0x40200000
 8007388:	3ff00000 	.word	0x3ff00000
 800738c:	3e700000 	.word	0x3e700000
 8007390:	41700000 	.word	0x41700000
 8007394:	3fe00000 	.word	0x3fe00000
 8007398:	08008038 	.word	0x08008038
 800739c:	1e62      	subs	r2, r4, #1
 800739e:	ab0e      	add	r3, sp, #56	; 0x38
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80073a8:	a90e      	add	r1, sp, #56	; 0x38
 80073aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80073ae:	e739      	b.n	8007224 <__kernel_rem_pio2+0x1cc>
 80073b0:	1e62      	subs	r2, r4, #1
 80073b2:	ab0e      	add	r3, sp, #56	; 0x38
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80073bc:	e7f4      	b.n	80073a8 <__kernel_rem_pio2+0x350>
 80073be:	a90e      	add	r1, sp, #56	; 0x38
 80073c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	430a      	orrs	r2, r1
 80073c8:	e789      	b.n	80072de <__kernel_rem_pio2+0x286>
 80073ca:	3301      	adds	r3, #1
 80073cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d0fa      	beq.n	80073ca <__kernel_rem_pio2+0x372>
 80073d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80073da:	446a      	add	r2, sp
 80073dc:	3a98      	subs	r2, #152	; 0x98
 80073de:	920a      	str	r2, [sp, #40]	; 0x28
 80073e0:	9a08      	ldr	r2, [sp, #32]
 80073e2:	18e3      	adds	r3, r4, r3
 80073e4:	18a5      	adds	r5, r4, r2
 80073e6:	aa22      	add	r2, sp, #136	; 0x88
 80073e8:	f104 0801 	add.w	r8, r4, #1
 80073ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	9b04      	ldr	r3, [sp, #16]
 80073f4:	4543      	cmp	r3, r8
 80073f6:	da04      	bge.n	8007402 <__kernel_rem_pio2+0x3aa>
 80073f8:	461c      	mov	r4, r3
 80073fa:	e6a3      	b.n	8007144 <__kernel_rem_pio2+0xec>
 80073fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073fe:	2301      	movs	r3, #1
 8007400:	e7e4      	b.n	80073cc <__kernel_rem_pio2+0x374>
 8007402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007404:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007408:	f7f9 f88c 	bl	8000524 <__aeabi_i2d>
 800740c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007412:	46ab      	mov	fp, r5
 8007414:	461c      	mov	r4, r3
 8007416:	f04f 0900 	mov.w	r9, #0
 800741a:	2600      	movs	r6, #0
 800741c:	2700      	movs	r7, #0
 800741e:	9b06      	ldr	r3, [sp, #24]
 8007420:	4599      	cmp	r9, r3
 8007422:	dd06      	ble.n	8007432 <__kernel_rem_pio2+0x3da>
 8007424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007426:	e8e3 6702 	strd	r6, r7, [r3], #8
 800742a:	f108 0801 	add.w	r8, r8, #1
 800742e:	930a      	str	r3, [sp, #40]	; 0x28
 8007430:	e7df      	b.n	80073f2 <__kernel_rem_pio2+0x39a>
 8007432:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007436:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800743a:	f7f9 f8dd 	bl	80005f8 <__aeabi_dmul>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4630      	mov	r0, r6
 8007444:	4639      	mov	r1, r7
 8007446:	f7f8 ff21 	bl	800028c <__adddf3>
 800744a:	f109 0901 	add.w	r9, r9, #1
 800744e:	4606      	mov	r6, r0
 8007450:	460f      	mov	r7, r1
 8007452:	e7e4      	b.n	800741e <__kernel_rem_pio2+0x3c6>
 8007454:	3d01      	subs	r5, #1
 8007456:	e748      	b.n	80072ea <__kernel_rem_pio2+0x292>
 8007458:	ec47 6b10 	vmov	d0, r6, r7
 800745c:	f1ca 0000 	rsb	r0, sl, #0
 8007460:	f000 fa92 	bl	8007988 <scalbn>
 8007464:	ec57 6b10 	vmov	r6, r7, d0
 8007468:	4ba0      	ldr	r3, [pc, #640]	; (80076ec <__kernel_rem_pio2+0x694>)
 800746a:	ee10 0a10 	vmov	r0, s0
 800746e:	2200      	movs	r2, #0
 8007470:	4639      	mov	r1, r7
 8007472:	f7f9 fb47 	bl	8000b04 <__aeabi_dcmpge>
 8007476:	b1f8      	cbz	r0, 80074b8 <__kernel_rem_pio2+0x460>
 8007478:	4b9d      	ldr	r3, [pc, #628]	; (80076f0 <__kernel_rem_pio2+0x698>)
 800747a:	2200      	movs	r2, #0
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 f8ba 	bl	80005f8 <__aeabi_dmul>
 8007484:	f7f9 fb68 	bl	8000b58 <__aeabi_d2iz>
 8007488:	4680      	mov	r8, r0
 800748a:	f7f9 f84b 	bl	8000524 <__aeabi_i2d>
 800748e:	4b97      	ldr	r3, [pc, #604]	; (80076ec <__kernel_rem_pio2+0x694>)
 8007490:	2200      	movs	r2, #0
 8007492:	f7f9 f8b1 	bl	80005f8 <__aeabi_dmul>
 8007496:	460b      	mov	r3, r1
 8007498:	4602      	mov	r2, r0
 800749a:	4639      	mov	r1, r7
 800749c:	4630      	mov	r0, r6
 800749e:	f7f8 fef3 	bl	8000288 <__aeabi_dsub>
 80074a2:	f7f9 fb59 	bl	8000b58 <__aeabi_d2iz>
 80074a6:	1c65      	adds	r5, r4, #1
 80074a8:	ab0e      	add	r3, sp, #56	; 0x38
 80074aa:	f10a 0a18 	add.w	sl, sl, #24
 80074ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80074b2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80074b6:	e720      	b.n	80072fa <__kernel_rem_pio2+0x2a2>
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f9 fb4c 	bl	8000b58 <__aeabi_d2iz>
 80074c0:	ab0e      	add	r3, sp, #56	; 0x38
 80074c2:	4625      	mov	r5, r4
 80074c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80074c8:	e717      	b.n	80072fa <__kernel_rem_pio2+0x2a2>
 80074ca:	ab0e      	add	r3, sp, #56	; 0x38
 80074cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80074d0:	f7f9 f828 	bl	8000524 <__aeabi_i2d>
 80074d4:	4632      	mov	r2, r6
 80074d6:	463b      	mov	r3, r7
 80074d8:	f7f9 f88e 	bl	80005f8 <__aeabi_dmul>
 80074dc:	4b84      	ldr	r3, [pc, #528]	; (80076f0 <__kernel_rem_pio2+0x698>)
 80074de:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80074e2:	2200      	movs	r2, #0
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	e70f      	b.n	8007316 <__kernel_rem_pio2+0x2be>
 80074f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80074fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800750a:	f7f8 febf 	bl	800028c <__adddf3>
 800750e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007512:	f108 0801 	add.w	r8, r8, #1
 8007516:	9b02      	ldr	r3, [sp, #8]
 8007518:	4598      	cmp	r8, r3
 800751a:	dc01      	bgt.n	8007520 <__kernel_rem_pio2+0x4c8>
 800751c:	45b8      	cmp	r8, r7
 800751e:	ddea      	ble.n	80074f6 <__kernel_rem_pio2+0x49e>
 8007520:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007524:	ab4a      	add	r3, sp, #296	; 0x128
 8007526:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800752a:	ed87 7b00 	vstr	d7, [r7]
 800752e:	3e01      	subs	r6, #1
 8007530:	e6f8      	b.n	8007324 <__kernel_rem_pio2+0x2cc>
 8007532:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007534:	2b02      	cmp	r3, #2
 8007536:	dc0b      	bgt.n	8007550 <__kernel_rem_pio2+0x4f8>
 8007538:	2b00      	cmp	r3, #0
 800753a:	dc35      	bgt.n	80075a8 <__kernel_rem_pio2+0x550>
 800753c:	d059      	beq.n	80075f2 <__kernel_rem_pio2+0x59a>
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	f003 0007 	and.w	r0, r3, #7
 8007544:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007548:	ecbd 8b02 	vpop	{d8}
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007552:	2b03      	cmp	r3, #3
 8007554:	d1f3      	bne.n	800753e <__kernel_rem_pio2+0x4e6>
 8007556:	ab4a      	add	r3, sp, #296	; 0x128
 8007558:	4423      	add	r3, r4
 800755a:	9306      	str	r3, [sp, #24]
 800755c:	461c      	mov	r4, r3
 800755e:	469a      	mov	sl, r3
 8007560:	9502      	str	r5, [sp, #8]
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f1aa 0a08 	sub.w	sl, sl, #8
 800756a:	dc6b      	bgt.n	8007644 <__kernel_rem_pio2+0x5ec>
 800756c:	46aa      	mov	sl, r5
 800756e:	f1ba 0f01 	cmp.w	sl, #1
 8007572:	f1a4 0408 	sub.w	r4, r4, #8
 8007576:	f300 8085 	bgt.w	8007684 <__kernel_rem_pio2+0x62c>
 800757a:	9c06      	ldr	r4, [sp, #24]
 800757c:	2000      	movs	r0, #0
 800757e:	3408      	adds	r4, #8
 8007580:	2100      	movs	r1, #0
 8007582:	2d01      	cmp	r5, #1
 8007584:	f300 809d 	bgt.w	80076c2 <__kernel_rem_pio2+0x66a>
 8007588:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800758c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007590:	f1bb 0f00 	cmp.w	fp, #0
 8007594:	f040 809b 	bne.w	80076ce <__kernel_rem_pio2+0x676>
 8007598:	9b01      	ldr	r3, [sp, #4]
 800759a:	e9c3 5600 	strd	r5, r6, [r3]
 800759e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80075a2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80075a6:	e7ca      	b.n	800753e <__kernel_rem_pio2+0x4e6>
 80075a8:	3408      	adds	r4, #8
 80075aa:	ab4a      	add	r3, sp, #296	; 0x128
 80075ac:	441c      	add	r4, r3
 80075ae:	462e      	mov	r6, r5
 80075b0:	2000      	movs	r0, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	da36      	bge.n	8007626 <__kernel_rem_pio2+0x5ce>
 80075b8:	f1bb 0f00 	cmp.w	fp, #0
 80075bc:	d039      	beq.n	8007632 <__kernel_rem_pio2+0x5da>
 80075be:	4602      	mov	r2, r0
 80075c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075c4:	9c01      	ldr	r4, [sp, #4]
 80075c6:	e9c4 2300 	strd	r2, r3, [r4]
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80075d2:	f7f8 fe59 	bl	8000288 <__aeabi_dsub>
 80075d6:	ae4c      	add	r6, sp, #304	; 0x130
 80075d8:	2401      	movs	r4, #1
 80075da:	42a5      	cmp	r5, r4
 80075dc:	da2c      	bge.n	8007638 <__kernel_rem_pio2+0x5e0>
 80075de:	f1bb 0f00 	cmp.w	fp, #0
 80075e2:	d002      	beq.n	80075ea <__kernel_rem_pio2+0x592>
 80075e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e8:	4619      	mov	r1, r3
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80075f0:	e7a5      	b.n	800753e <__kernel_rem_pio2+0x4e6>
 80075f2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80075f6:	eb0d 0403 	add.w	r4, sp, r3
 80075fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80075fe:	2000      	movs	r0, #0
 8007600:	2100      	movs	r1, #0
 8007602:	2d00      	cmp	r5, #0
 8007604:	da09      	bge.n	800761a <__kernel_rem_pio2+0x5c2>
 8007606:	f1bb 0f00 	cmp.w	fp, #0
 800760a:	d002      	beq.n	8007612 <__kernel_rem_pio2+0x5ba>
 800760c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007610:	4619      	mov	r1, r3
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	e9c3 0100 	strd	r0, r1, [r3]
 8007618:	e791      	b.n	800753e <__kernel_rem_pio2+0x4e6>
 800761a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800761e:	f7f8 fe35 	bl	800028c <__adddf3>
 8007622:	3d01      	subs	r5, #1
 8007624:	e7ed      	b.n	8007602 <__kernel_rem_pio2+0x5aa>
 8007626:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800762a:	f7f8 fe2f 	bl	800028c <__adddf3>
 800762e:	3e01      	subs	r6, #1
 8007630:	e7c0      	b.n	80075b4 <__kernel_rem_pio2+0x55c>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	e7c5      	b.n	80075c4 <__kernel_rem_pio2+0x56c>
 8007638:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800763c:	f7f8 fe26 	bl	800028c <__adddf3>
 8007640:	3401      	adds	r4, #1
 8007642:	e7ca      	b.n	80075da <__kernel_rem_pio2+0x582>
 8007644:	e9da 8900 	ldrd	r8, r9, [sl]
 8007648:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800764c:	9b02      	ldr	r3, [sp, #8]
 800764e:	3b01      	subs	r3, #1
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f8 fe17 	bl	800028c <__adddf3>
 800765e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f8 fe0d 	bl	8000288 <__aeabi_dsub>
 800766e:	4632      	mov	r2, r6
 8007670:	463b      	mov	r3, r7
 8007672:	f7f8 fe0b 	bl	800028c <__adddf3>
 8007676:	ed9d 7b08 	vldr	d7, [sp, #32]
 800767a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800767e:	ed8a 7b00 	vstr	d7, [sl]
 8007682:	e76e      	b.n	8007562 <__kernel_rem_pio2+0x50a>
 8007684:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007688:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800768c:	4640      	mov	r0, r8
 800768e:	4632      	mov	r2, r6
 8007690:	463b      	mov	r3, r7
 8007692:	4649      	mov	r1, r9
 8007694:	f7f8 fdfa 	bl	800028c <__adddf3>
 8007698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f8 fdf0 	bl	8000288 <__aeabi_dsub>
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	f7f8 fdee 	bl	800028c <__adddf3>
 80076b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80076b8:	ed84 7b00 	vstr	d7, [r4]
 80076bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076c0:	e755      	b.n	800756e <__kernel_rem_pio2+0x516>
 80076c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80076c6:	f7f8 fde1 	bl	800028c <__adddf3>
 80076ca:	3d01      	subs	r5, #1
 80076cc:	e759      	b.n	8007582 <__kernel_rem_pio2+0x52a>
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	601d      	str	r5, [r3, #0]
 80076d4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80076d8:	605c      	str	r4, [r3, #4]
 80076da:	609f      	str	r7, [r3, #8]
 80076dc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80076e0:	60d3      	str	r3, [r2, #12]
 80076e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076e6:	6110      	str	r0, [r2, #16]
 80076e8:	6153      	str	r3, [r2, #20]
 80076ea:	e728      	b.n	800753e <__kernel_rem_pio2+0x4e6>
 80076ec:	41700000 	.word	0x41700000
 80076f0:	3e700000 	.word	0x3e700000
 80076f4:	00000000 	.word	0x00000000

080076f8 <__kernel_sin>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	ed2d 8b04 	vpush	{d8-d9}
 8007700:	eeb0 8a41 	vmov.f32	s16, s2
 8007704:	eef0 8a61 	vmov.f32	s17, s3
 8007708:	ec55 4b10 	vmov	r4, r5, d0
 800770c:	b083      	sub	sp, #12
 800770e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007712:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007716:	9001      	str	r0, [sp, #4]
 8007718:	da06      	bge.n	8007728 <__kernel_sin+0x30>
 800771a:	ee10 0a10 	vmov	r0, s0
 800771e:	4629      	mov	r1, r5
 8007720:	f7f9 fa1a 	bl	8000b58 <__aeabi_d2iz>
 8007724:	2800      	cmp	r0, #0
 8007726:	d051      	beq.n	80077cc <__kernel_sin+0xd4>
 8007728:	4622      	mov	r2, r4
 800772a:	462b      	mov	r3, r5
 800772c:	4620      	mov	r0, r4
 800772e:	4629      	mov	r1, r5
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4620      	mov	r0, r4
 800773e:	4629      	mov	r1, r5
 8007740:	f7f8 ff5a 	bl	80005f8 <__aeabi_dmul>
 8007744:	a341      	add	r3, pc, #260	; (adr r3, 800784c <__kernel_sin+0x154>)
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	4680      	mov	r8, r0
 800774c:	4689      	mov	r9, r1
 800774e:	4650      	mov	r0, sl
 8007750:	4659      	mov	r1, fp
 8007752:	f7f8 ff51 	bl	80005f8 <__aeabi_dmul>
 8007756:	a33f      	add	r3, pc, #252	; (adr r3, 8007854 <__kernel_sin+0x15c>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	4652      	mov	r2, sl
 8007762:	465b      	mov	r3, fp
 8007764:	f7f8 ff48 	bl	80005f8 <__aeabi_dmul>
 8007768:	a33c      	add	r3, pc, #240	; (adr r3, 800785c <__kernel_sin+0x164>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 fd8d 	bl	800028c <__adddf3>
 8007772:	4652      	mov	r2, sl
 8007774:	465b      	mov	r3, fp
 8007776:	f7f8 ff3f 	bl	80005f8 <__aeabi_dmul>
 800777a:	a33a      	add	r3, pc, #232	; (adr r3, 8007864 <__kernel_sin+0x16c>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd82 	bl	8000288 <__aeabi_dsub>
 8007784:	4652      	mov	r2, sl
 8007786:	465b      	mov	r3, fp
 8007788:	f7f8 ff36 	bl	80005f8 <__aeabi_dmul>
 800778c:	a337      	add	r3, pc, #220	; (adr r3, 800786c <__kernel_sin+0x174>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 fd7b 	bl	800028c <__adddf3>
 8007796:	9b01      	ldr	r3, [sp, #4]
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
 800779c:	b9eb      	cbnz	r3, 80077da <__kernel_sin+0xe2>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4650      	mov	r0, sl
 80077a4:	4659      	mov	r1, fp
 80077a6:	f7f8 ff27 	bl	80005f8 <__aeabi_dmul>
 80077aa:	a325      	add	r3, pc, #148	; (adr r3, 8007840 <__kernel_sin+0x148>)
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f7f8 fd6a 	bl	8000288 <__aeabi_dsub>
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	f7f8 ff1e 	bl	80005f8 <__aeabi_dmul>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fd62 	bl	800028c <__adddf3>
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	ec45 4b10 	vmov	d0, r4, r5
 80077d0:	b003      	add	sp, #12
 80077d2:	ecbd 8b04 	vpop	{d8-d9}
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <__kernel_sin+0x150>)
 80077dc:	ec51 0b18 	vmov	r0, r1, d8
 80077e0:	2200      	movs	r2, #0
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4632      	mov	r2, r6
 80077e8:	ec41 0b19 	vmov	d9, r0, r1
 80077ec:	463b      	mov	r3, r7
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	f7f8 ff01 	bl	80005f8 <__aeabi_dmul>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	ec51 0b19 	vmov	r0, r1, d9
 80077fe:	f7f8 fd43 	bl	8000288 <__aeabi_dsub>
 8007802:	4652      	mov	r2, sl
 8007804:	465b      	mov	r3, fp
 8007806:	f7f8 fef7 	bl	80005f8 <__aeabi_dmul>
 800780a:	ec53 2b18 	vmov	r2, r3, d8
 800780e:	f7f8 fd3b 	bl	8000288 <__aeabi_dsub>
 8007812:	a30b      	add	r3, pc, #44	; (adr r3, 8007840 <__kernel_sin+0x148>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	4640      	mov	r0, r8
 800781e:	4649      	mov	r1, r9
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fd2e 	bl	800028c <__adddf3>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4620      	mov	r0, r4
 8007836:	4629      	mov	r1, r5
 8007838:	f7f8 fd26 	bl	8000288 <__aeabi_dsub>
 800783c:	e7c4      	b.n	80077c8 <__kernel_sin+0xd0>
 800783e:	bf00      	nop
 8007840:	55555549 	.word	0x55555549
 8007844:	3fc55555 	.word	0x3fc55555
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	5acfd57c 	.word	0x5acfd57c
 8007850:	3de5d93a 	.word	0x3de5d93a
 8007854:	8a2b9ceb 	.word	0x8a2b9ceb
 8007858:	3e5ae5e6 	.word	0x3e5ae5e6
 800785c:	57b1fe7d 	.word	0x57b1fe7d
 8007860:	3ec71de3 	.word	0x3ec71de3
 8007864:	19c161d5 	.word	0x19c161d5
 8007868:	3f2a01a0 	.word	0x3f2a01a0
 800786c:	1110f8a6 	.word	0x1110f8a6
 8007870:	3f811111 	.word	0x3f811111

08007874 <fabs>:
 8007874:	ec51 0b10 	vmov	r0, r1, d0
 8007878:	ee10 2a10 	vmov	r2, s0
 800787c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007880:	ec43 2b10 	vmov	d0, r2, r3
 8007884:	4770      	bx	lr
	...

08007888 <floor>:
 8007888:	ec51 0b10 	vmov	r0, r1, d0
 800788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007890:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007894:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007898:	2e13      	cmp	r6, #19
 800789a:	ee10 5a10 	vmov	r5, s0
 800789e:	ee10 8a10 	vmov	r8, s0
 80078a2:	460c      	mov	r4, r1
 80078a4:	dc32      	bgt.n	800790c <floor+0x84>
 80078a6:	2e00      	cmp	r6, #0
 80078a8:	da14      	bge.n	80078d4 <floor+0x4c>
 80078aa:	a333      	add	r3, pc, #204	; (adr r3, 8007978 <floor+0xf0>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 fcec 	bl	800028c <__adddf3>
 80078b4:	2200      	movs	r2, #0
 80078b6:	2300      	movs	r3, #0
 80078b8:	f7f9 f92e 	bl	8000b18 <__aeabi_dcmpgt>
 80078bc:	b138      	cbz	r0, 80078ce <floor+0x46>
 80078be:	2c00      	cmp	r4, #0
 80078c0:	da57      	bge.n	8007972 <floor+0xea>
 80078c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80078c6:	431d      	orrs	r5, r3
 80078c8:	d001      	beq.n	80078ce <floor+0x46>
 80078ca:	4c2d      	ldr	r4, [pc, #180]	; (8007980 <floor+0xf8>)
 80078cc:	2500      	movs	r5, #0
 80078ce:	4621      	mov	r1, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	e025      	b.n	8007920 <floor+0x98>
 80078d4:	4f2b      	ldr	r7, [pc, #172]	; (8007984 <floor+0xfc>)
 80078d6:	4137      	asrs	r7, r6
 80078d8:	ea01 0307 	and.w	r3, r1, r7
 80078dc:	4303      	orrs	r3, r0
 80078de:	d01f      	beq.n	8007920 <floor+0x98>
 80078e0:	a325      	add	r3, pc, #148	; (adr r3, 8007978 <floor+0xf0>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fcd1 	bl	800028c <__adddf3>
 80078ea:	2200      	movs	r2, #0
 80078ec:	2300      	movs	r3, #0
 80078ee:	f7f9 f913 	bl	8000b18 <__aeabi_dcmpgt>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d0eb      	beq.n	80078ce <floor+0x46>
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	bfbe      	ittt	lt
 80078fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80078fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8007902:	19a4      	addlt	r4, r4, r6
 8007904:	ea24 0407 	bic.w	r4, r4, r7
 8007908:	2500      	movs	r5, #0
 800790a:	e7e0      	b.n	80078ce <floor+0x46>
 800790c:	2e33      	cmp	r6, #51	; 0x33
 800790e:	dd0b      	ble.n	8007928 <floor+0xa0>
 8007910:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007914:	d104      	bne.n	8007920 <floor+0x98>
 8007916:	ee10 2a10 	vmov	r2, s0
 800791a:	460b      	mov	r3, r1
 800791c:	f7f8 fcb6 	bl	800028c <__adddf3>
 8007920:	ec41 0b10 	vmov	d0, r0, r1
 8007924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007928:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800792c:	f04f 33ff 	mov.w	r3, #4294967295
 8007930:	fa23 f707 	lsr.w	r7, r3, r7
 8007934:	4207      	tst	r7, r0
 8007936:	d0f3      	beq.n	8007920 <floor+0x98>
 8007938:	a30f      	add	r3, pc, #60	; (adr r3, 8007978 <floor+0xf0>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f7f8 fca5 	bl	800028c <__adddf3>
 8007942:	2200      	movs	r2, #0
 8007944:	2300      	movs	r3, #0
 8007946:	f7f9 f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800794a:	2800      	cmp	r0, #0
 800794c:	d0bf      	beq.n	80078ce <floor+0x46>
 800794e:	2c00      	cmp	r4, #0
 8007950:	da02      	bge.n	8007958 <floor+0xd0>
 8007952:	2e14      	cmp	r6, #20
 8007954:	d103      	bne.n	800795e <floor+0xd6>
 8007956:	3401      	adds	r4, #1
 8007958:	ea25 0507 	bic.w	r5, r5, r7
 800795c:	e7b7      	b.n	80078ce <floor+0x46>
 800795e:	2301      	movs	r3, #1
 8007960:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007964:	fa03 f606 	lsl.w	r6, r3, r6
 8007968:	4435      	add	r5, r6
 800796a:	4545      	cmp	r5, r8
 800796c:	bf38      	it	cc
 800796e:	18e4      	addcc	r4, r4, r3
 8007970:	e7f2      	b.n	8007958 <floor+0xd0>
 8007972:	2500      	movs	r5, #0
 8007974:	462c      	mov	r4, r5
 8007976:	e7aa      	b.n	80078ce <floor+0x46>
 8007978:	8800759c 	.word	0x8800759c
 800797c:	7e37e43c 	.word	0x7e37e43c
 8007980:	bff00000 	.word	0xbff00000
 8007984:	000fffff 	.word	0x000fffff

08007988 <scalbn>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	ec55 4b10 	vmov	r4, r5, d0
 800798e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007992:	4606      	mov	r6, r0
 8007994:	462b      	mov	r3, r5
 8007996:	b99a      	cbnz	r2, 80079c0 <scalbn+0x38>
 8007998:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800799c:	4323      	orrs	r3, r4
 800799e:	d036      	beq.n	8007a0e <scalbn+0x86>
 80079a0:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <scalbn+0x100>)
 80079a2:	4629      	mov	r1, r5
 80079a4:	ee10 0a10 	vmov	r0, s0
 80079a8:	2200      	movs	r2, #0
 80079aa:	f7f8 fe25 	bl	80005f8 <__aeabi_dmul>
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <scalbn+0x104>)
 80079b0:	429e      	cmp	r6, r3
 80079b2:	4604      	mov	r4, r0
 80079b4:	460d      	mov	r5, r1
 80079b6:	da10      	bge.n	80079da <scalbn+0x52>
 80079b8:	a32b      	add	r3, pc, #172	; (adr r3, 8007a68 <scalbn+0xe0>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	e03a      	b.n	8007a36 <scalbn+0xae>
 80079c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80079c4:	428a      	cmp	r2, r1
 80079c6:	d10c      	bne.n	80079e2 <scalbn+0x5a>
 80079c8:	ee10 2a10 	vmov	r2, s0
 80079cc:	4620      	mov	r0, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	f7f8 fc5c 	bl	800028c <__adddf3>
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	e019      	b.n	8007a0e <scalbn+0x86>
 80079da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079de:	460b      	mov	r3, r1
 80079e0:	3a36      	subs	r2, #54	; 0x36
 80079e2:	4432      	add	r2, r6
 80079e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079e8:	428a      	cmp	r2, r1
 80079ea:	dd08      	ble.n	80079fe <scalbn+0x76>
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	a120      	add	r1, pc, #128	; (adr r1, 8007a70 <scalbn+0xe8>)
 80079f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f4:	da1c      	bge.n	8007a30 <scalbn+0xa8>
 80079f6:	a120      	add	r1, pc, #128	; (adr r1, 8007a78 <scalbn+0xf0>)
 80079f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079fc:	e018      	b.n	8007a30 <scalbn+0xa8>
 80079fe:	2a00      	cmp	r2, #0
 8007a00:	dd08      	ble.n	8007a14 <scalbn+0x8c>
 8007a02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a0e:	ec45 4b10 	vmov	d0, r4, r5
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a18:	da19      	bge.n	8007a4e <scalbn+0xc6>
 8007a1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a1e:	429e      	cmp	r6, r3
 8007a20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007a24:	dd0a      	ble.n	8007a3c <scalbn+0xb4>
 8007a26:	a112      	add	r1, pc, #72	; (adr r1, 8007a70 <scalbn+0xe8>)
 8007a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e2      	bne.n	80079f6 <scalbn+0x6e>
 8007a30:	a30f      	add	r3, pc, #60	; (adr r3, 8007a70 <scalbn+0xe8>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fddf 	bl	80005f8 <__aeabi_dmul>
 8007a3a:	e7cb      	b.n	80079d4 <scalbn+0x4c>
 8007a3c:	a10a      	add	r1, pc, #40	; (adr r1, 8007a68 <scalbn+0xe0>)
 8007a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0b8      	beq.n	80079b8 <scalbn+0x30>
 8007a46:	a10e      	add	r1, pc, #56	; (adr r1, 8007a80 <scalbn+0xf8>)
 8007a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a4c:	e7b4      	b.n	80079b8 <scalbn+0x30>
 8007a4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a52:	3236      	adds	r2, #54	; 0x36
 8007a54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4b0c      	ldr	r3, [pc, #48]	; (8007a90 <scalbn+0x108>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	e7e8      	b.n	8007a36 <scalbn+0xae>
 8007a64:	f3af 8000 	nop.w
 8007a68:	c2f8f359 	.word	0xc2f8f359
 8007a6c:	01a56e1f 	.word	0x01a56e1f
 8007a70:	8800759c 	.word	0x8800759c
 8007a74:	7e37e43c 	.word	0x7e37e43c
 8007a78:	8800759c 	.word	0x8800759c
 8007a7c:	fe37e43c 	.word	0xfe37e43c
 8007a80:	c2f8f359 	.word	0xc2f8f359
 8007a84:	81a56e1f 	.word	0x81a56e1f
 8007a88:	43500000 	.word	0x43500000
 8007a8c:	ffff3cb0 	.word	0xffff3cb0
 8007a90:	3c900000 	.word	0x3c900000

08007a94 <_init>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr

08007aa0 <_fini>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr
